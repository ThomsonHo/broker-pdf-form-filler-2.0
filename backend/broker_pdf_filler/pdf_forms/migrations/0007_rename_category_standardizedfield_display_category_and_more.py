# Generated by Django 5.1 on 2025-04-07 07:30

from django.db import migrations, models
import json

def convert_validation_rules(apps, schema_editor):
    StandardizedField = apps.get_model('pdf_forms', 'StandardizedField')
    db_alias = schema_editor.connection.alias
    
    for field in StandardizedField.objects.using(db_alias).all():
        try:
            # Initialize empty validation rules
            validation_rules = []
            
            # Check if validation exists and is not None/empty
            if hasattr(field, 'validation') and field.validation:
                if isinstance(field.validation, str):
                    try:
                        # Try to parse as JSON first
                        parsed = json.loads(field.validation)
                        if isinstance(parsed, list):
                            validation_rules = parsed
                        else:
                            validation_rules = [{
                                'type': 'custom',
                                'value': field.validation,
                                'message': 'Custom validation rule'
                            }]
                    except json.JSONDecodeError:
                        # If not valid JSON, treat as plain string
                        validation_rules = [{
                            'type': 'custom',
                            'value': field.validation,
                            'message': 'Custom validation rule'
                        }]
            
            # Update the field with new validation rules
            field.validation_rules = validation_rules
            field.has_validation = bool(validation_rules)
            field.save()
            
        except Exception as e:
            print(f"Error converting validation for field {field.id}: {str(e)}")
            # Set safe defaults
            field.validation_rules = []
            field.has_validation = False
            field.save()

def convert_relationship_rules(apps, schema_editor):
    StandardizedField = apps.get_model('pdf_forms', 'StandardizedField')
    db_alias = schema_editor.connection.alias
    
    for field in StandardizedField.objects.using(db_alias).all():
        try:
            # Initialize empty relationship rules
            relationship_rules = []
            
            # Check if relationships exists and is not None/empty
            if hasattr(field, 'relationships') and field.relationships:
                if isinstance(field.relationships, str):
                    try:
                        # Try to parse as JSON first
                        parsed = json.loads(field.relationships)
                        if isinstance(parsed, list):
                            relationship_rules = parsed
                        else:
                            relationship_rules = [{
                                'type': 'dependency',
                                'target_field': field.relationships,
                                'condition': {}
                            }]
                    except json.JSONDecodeError:
                        # If not valid JSON, treat as plain string
                        relationship_rules = [{
                            'type': 'dependency',
                            'target_field': field.relationships,
                            'condition': {}
                        }]
            
            # Update the field with new relationship rules
            field.relationship_rules = relationship_rules
            field.has_relationship = bool(relationship_rules)
            field.save()
            
        except Exception as e:
            print(f"Error converting relationships for field {field.id}: {str(e)}")
            # Set safe defaults
            field.relationship_rules = []
            field.has_relationship = False
            field.save()

def reverse_func(apps, schema_editor):
    """
    Reverse migration - convert back to old format if needed
    """
    pass

class Migration(migrations.Migration):

    dependencies = [
        ('pdf_forms', '0006_merge_20250406_1645'),
    ]

    operations = [
        # First add the new fields
        migrations.AddField(
            model_name='standardizedfield',
            name='has_validation',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='standardizedfield',
            name='has_relationship',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='standardizedfield',
            name='relationship_rules',
            field=models.JSONField(blank=True, default=list),
        ),
        migrations.AlterField(
            model_name='standardizedfield',
            name='validation_rules',
            field=models.JSONField(blank=True, default=list),
        ),
        
        # Then run the data migration
        migrations.RunPython(convert_validation_rules, reverse_func),
        migrations.RunPython(convert_relationship_rules, reverse_func),
        
        # Finally remove old fields
        migrations.RenameField(
            model_name='standardizedfield',
            old_name='category',
            new_name='display_category',
        ),
        migrations.RemoveField(
            model_name='standardizedfield',
            name='relationships',
        ),
        migrations.RemoveField(
            model_name='standardizedfield',
            name='type',
        ),
        migrations.RemoveField(
            model_name='standardizedfield',
            name='validation',
        ),
    ]
