// Dockerfile
# Dockerfile
FROM python:3.10-slim

WORKDIR /app

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    pdftk \
    gcc \
    libc6-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY app/ ./app/
COPY static/ ./static/
COPY config/ ./config/
COPY templates/ ./templates/

# Create directories for PDF templates
# RUN mkdir -p templates/broker templates/boclife templates/chubb

# Create sample PDF files for testing (in production, you'd use actual forms)
# RUN touch templates/broker/10Life_client_agreement.pdf templates/broker/10Life_fna.pdf \
#    templates/boclife/BOCLife_application.pdf templates/boclife/BOCLife_fna.pdf templates/boclife/BOCLife_payment.pdf \
#    templates/chubb/Chubb_application.pdf templates/chubb/Chubb_fna.pdf templates/chubb/Chubb_payment.pdf

# Create temp directory
RUN mkdir -p /tmp/pdf-form-filler

# Expose port
EXPOSE 8002

# Add healthcheck
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8002/api/health || exit 1

# Run the application
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8002", "--reload"]

// app/__init__.py
# app/__init__.py
"""
PDF Form Filler application package.
"""
__version__ = "0.1.0"

# app/api/__init__.py
"""
API package for the PDF Form Filler application.
"""

# app/api/routes/__init__.py
"""
Route definitions for the PDF Form Filler API.
"""

# app/api/models/__init__.py
"""
Pydantic models for the PDF Form Filler API.
"""

# app/services/__init__.py
"""
Business logic services for the PDF Form Filler application.
"""

# app/core/__init__.py
"""
Core functionality for the PDF Form Filler application.
"""

// app/api/models/schemas.py
# app/api/models/schemas.py
"""
Pydantic models for request and response schemas.
"""
from typing import Dict, List, Optional, Any
from pydantic import BaseModel, Field


class ClientInfoRequest(BaseModel):
    """Request model for client information extraction."""
    
    text_input: str = Field(
        ..., 
        description="Free-text client information to be processed"
    )
    insurer: str = Field(
        ..., 
        description="Selected insurer (e.g., 'BOCLife' or 'Chubb')"
    )
    
    class Config:
        schema_extra = {
            "example": {
                "text_input": "Client Name: John Smith\nDOB: 01/15/1980\nHKID: A123456(7)\nAddress: 123 Main St, Central, Hong Kong\nPhone: +852 9876 5432\nOccupation: Engineer\nAnnual Income: HKD 960,000",
                "insurer": "BOCLife"
            }
        }


class ExtractedField(BaseModel):
    """Model for an extracted data field."""
    
    field_name: str = Field(..., description="Name of the field")
    value: str = Field(..., description="Extracted value for the field")
    required: bool = Field(..., description="Whether the field is required")
    missing: bool = Field(..., description="Whether required field is missing")
    display_name: str = Field(..., description="Human-readable field name")
    category: str = Field(..., description="Field category for UI organization")


class ExtractedDataResponse(BaseModel):
    """Response model for extracted client data."""
    
    fields: List[ExtractedField] = Field(
        ..., 
        description="List of extracted fields with their values"
    )
    missing_required: List[str] = Field(
        ..., 
        description="List of missing required fields"
    )


class VerifiedDataRequest(BaseModel):
    """Request model for verified data to generate forms."""
    
    fields: Dict[str, str] = Field(
        ..., 
        description="Dictionary of field names and their verified values"
    )
    insurer: str = Field(
        ..., 
        description="Selected insurer (e.g., 'BOCLife' or 'Chubb')"
    )
    
    class Config:
        schema_extra = {
            "example": {
                "fields": {
                    "first_name": "John",
                    "last_name": "Smith",
                    "dob": "01/15/1980",
                    "hkid": "A123456(7)",
                    "address_line1": "123 Main St",
                    "city": "Hong Kong",
                    "phone": "+852 9876 5432",
                    "occupation": "Engineer",
                    "income_amount": "960000",
                    "marital_status": "Single"
                },
                "insurer": "BOCLife"
            }
        }


class GeneratedFormsResponse(BaseModel):
    """Response model for generated forms."""
    
    download_url: str = Field(
        ..., 
        description="URL to download the generated forms as a ZIP file"
    )
    forms: List[str] = Field(
        ..., 
        description="List of form names included in the package"
    )


class ErrorResponse(BaseModel):
    """Error response model."""
    
    error: str = Field(..., description="Error message")
    details: Optional[Any] = Field(None, description="Additional error details")

// app/api/routes/admin.py
# app/api/routes/admin.py
"""
Administrative API routes.
"""
from fastapi import APIRouter, Depends, HTTPException, status
from pydantic import BaseModel

from app.core.field_mapping import reload_mappings
from app.config import Settings, get_settings

router = APIRouter()

class ReloadResponse(BaseModel):
    """Response model for reload endpoint."""
    status: str
    message: str

@router.post(
    "/reload-mappings",
    response_model=ReloadResponse,
    status_code=status.HTTP_200_OK
)
async def reload_field_mappings(
    settings: Settings = Depends(get_settings)
) -> ReloadResponse:
    """
    Reload field mappings from configuration files.
    Use this endpoint when mappings have been updated.
    
    Args:
        settings: Application settings
        
    Returns:
        ReloadResponse: Status of the reload operation
    """
    try:
        # Reload all mappings
        reload_mappings()
        
        return ReloadResponse(
            status="success",
            message="Field mappings successfully reloaded"
        )
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to reload mappings: {str(e)}"
        )

// app/api/routes/extraction.py
# app/api/routes/extraction.py
"""
API routes for text extraction and data processing.
"""
from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.responses import JSONResponse

from app.api.models.schemas import (
    ClientInfoRequest,
    ExtractedDataResponse,
    ErrorResponse
)
from app.services.extraction import extract_client_data
from app.core.field_mapping import map_extracted_data_to_form_fields
from app.config import Settings, get_settings

router = APIRouter()

@router.post(
    "/extract",
    response_model=ExtractedDataResponse,
    responses={
        422: {"model": ErrorResponse},
        500: {"model": ErrorResponse}
    }
)
async def extract_data(
    request: ClientInfoRequest,
    settings: Settings = Depends(get_settings)
) -> ExtractedDataResponse:
    """
    Extract structured data from free text client information.
    
    Args:
        request: Client information request containing text input and insurer selection
        settings: Application settings
        
    Returns:
        ExtractedDataResponse: Structured data extracted from the input text
        
    Raises:
        HTTPException: If extraction fails or input is invalid
    """
    try:
        # Validate insurer
        if request.insurer not in ["BOCLife", "Chubb"]:
            raise HTTPException(
                status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
                detail="Invalid insurer selected. Must be 'BOCLife' or 'Chubb'."
            )
        
        # Extract data using LLM
        extracted_data = await extract_client_data(
            request.text_input, 
            settings
        )
        
        # Map to form fields - using the updated mapping function
        # This will create one UI field per standardized field
        mapped_data = map_extracted_data_to_form_fields(
            extracted_data, 
            request.insurer
        )
        
        return mapped_data
        
    except Exception as e:
        # Log the exception (in a real app)
        print(f"Error during extraction: {str(e)}")
        
        # Return appropriate error response
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to extract data: {str(e)}"
        )

// app/api/routes/forms.py
# app/api/routes/forms.py
"""
API routes for form generation and download.
"""
import os
from typing import List
from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.responses import FileResponse

from app.api.models.schemas import (
    VerifiedDataRequest,
    GeneratedFormsResponse,
    ErrorResponse
)
# Import the enhanced PDF service instead of the original one
from app.services.pdf_enhanced import fill_pdf_forms
from app.services.zip import create_zip_package
from app.config import Settings, get_settings

router = APIRouter()

@router.post(
    "/generate",
    response_model=GeneratedFormsResponse,
    responses={
        422: {"model": ErrorResponse},
        500: {"model": ErrorResponse}
    }
)
async def generate_forms(
    request: VerifiedDataRequest,
    settings: Settings = Depends(get_settings)
) -> GeneratedFormsResponse:
    """
    Generate filled PDF forms based on verified client data.
    
    Args:
        request: Verified client data and insurer selection
        settings: Application settings
        
    Returns:
        GeneratedFormsResponse: Information about generated forms and download URL
        
    Raises:
        HTTPException: If form generation fails
    """
    try:
        # Validate insurer
        if request.insurer not in ["BOCLife", "Chubb"]:
            raise HTTPException(
                status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
                detail="Invalid insurer selected. Must be 'BOCLife' or 'Chubb'."
            )
        
        # Fill PDF forms using the enhanced PDF service
        filled_forms, form_names = await fill_pdf_forms(
            request.fields,
            request.insurer,
            settings
        )
        
        # Create ZIP package
        zip_path = await create_zip_package(filled_forms, settings)
        
        # Generate response
        return GeneratedFormsResponse(
            download_url=f"/api/download?file={os.path.basename(zip_path)}",
            forms=form_names
        )
        
    except Exception as e:
        # Log the exception (in a real app)
        print(f"Error during form generation: {str(e)}")
        
        # Return appropriate error response
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to generate forms: {str(e)}"
        )


@router.get(
    "/download",
    responses={
        404: {"model": ErrorResponse},
        500: {"model": ErrorResponse}
    }
)
async def download_forms(
    file: str,
    settings: Settings = Depends(get_settings)
):
    """
    Download generated ZIP package of filled forms.
    
    Args:
        file: Filename of the ZIP package to download
        settings: Application settings
        
    Returns:
        FileResponse: ZIP file download
        
    Raises:
        HTTPException: If file not found or invalid
    """
    try:
        # Security check - ensure filename is just a basename
        if "/" in file or "\\" in file:
            raise HTTPException(
                status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
                detail="Invalid filename"
            )
        
        # Construct full path
        file_path = os.path.join(settings.TEMP_DIR, file)
        
        # Check if file exists
        if not os.path.exists(file_path):
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="File not found"
            )
        
        # Return file download
        return FileResponse(
            file_path,
            media_type="application/zip",
            filename="insurance_forms.zip"
        )
        
    except HTTPException:
        # Re-raise HTTP exceptions
        raise
        
    except Exception as e:
        # Log the exception (in a real app)
        print(f"Error during file download: {str(e)}")
        
        # Return appropriate error response
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to download file: {str(e)}"
        )

// app/config.py
# app/config.py
"""
Configuration settings for the PDF Form Filler application.
Loads environment variables and provides settings for different components.
"""
import os
from functools import lru_cache
from typing import Optional

from pydantic import BaseSettings, validator

class Settings(BaseSettings):
    """Application settings loaded from environment variables."""
    
    # Azure OpenAI Settings
    AZURE_OPENAI_API_KEY: str
    AZURE_OPENAI_ENDPOINT: str
    AZURE_OPENAI_DEPLOYMENT_NAME: str = "gpt-4o-mini"
    AZURE_OPENAI_API_VERSION: str = "2023-12-01-preview"
    
    # Application Settings
    ENV: str = "development"
    DEBUG: bool = True
    APP_HOST: str = "0.0.0.0"
    APP_PORT: int = 8002
    
    # PDF Template Paths
    TEMPLATES_DIR: str = "./templates"
    BROKER_TEMPLATES_DIR: str = "./templates/broker"
    BOCLIFE_TEMPLATES_DIR: str = "./templates/boclife"
    CHUBB_TEMPLATES_DIR: str = "./templates/chubb"
    
    # Temporary File Storage
    TEMP_DIR: str = "/tmp/pdf-form-filler"
    
    @validator("TEMP_DIR", pre=True)
    def create_temp_dir(cls, v):
        """Create temporary directory if it doesn't exist."""
        if not os.path.exists(v):
            os.makedirs(v, exist_ok=True)
        return v
    
    class Config:
        """Pydantic config for environment variables."""
        env_file = ".env"
        case_sensitive = True

@lru_cache()
def get_settings() -> Settings:
    """
    Create and cache settings instance.
    
    Returns:
        Settings: Application settings
    """
    return Settings()

// app/core/field_mapping.py
# app/core/field_mapping.py
"""
Field mapping logic for PDF forms.
Loads mappings from JSON configuration files.
"""
import os
import json
import logging
from typing import Dict, List, Set, Any, Optional
from app.api.models.schemas import ExtractedDataResponse, ExtractedField

# Set up logger
logger = logging.getLogger(__name__)

# Configuration directories
CONFIG_DIR = "config"
FORMS_DIR = os.path.join(CONFIG_DIR, "forms")
MAPPINGS_DIR = os.path.join(CONFIG_DIR, "mappings")

# Cache for loaded configurations
_standardized_fields = None
_field_mappings = None
_form_fields = None
_reverse_mappings = None

def load_json_file(file_path: str) -> Dict[str, Any]:
    """
    Load a JSON file.
    
    Args:
        file_path: Path to the JSON file
        
    Returns:
        Dict: Loaded JSON data
        
    Raises:
        Exception: If file can't be loaded or parsed
    """
    try:
        if not os.path.exists(file_path):
            logger.error(f"JSON file not found: {file_path}")
            return {}
            
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
            
    except json.JSONDecodeError as e:
        logger.error(f"Error decoding JSON file {file_path}: {str(e)}")
        return {}
        
    except Exception as e:
        logger.error(f"Error loading JSON file {file_path}: {str(e)}")
        return {}

def get_standardized_fields() -> Dict[str, Dict[str, Any]]:
    """
    Get standardized field definitions.
    
    Returns:
        Dict: Standardized field definitions
    """
    global _standardized_fields
    
    if _standardized_fields is None:
        _standardized_fields = load_json_file(os.path.join(CONFIG_DIR, "standardized_fields.json"))
        
    return _standardized_fields

def get_field_mappings() -> Dict[str, Dict[str, str]]:
    """
    Get field mappings.
    
    Returns:
        Dict: Field mappings
    """
    global _field_mappings
    
    if _field_mappings is None:
        _field_mappings = load_json_file(os.path.join(MAPPINGS_DIR, "field_mappings.json"))
        
    return _field_mappings

def get_form_fields() -> Dict[str, Dict[str, Dict[str, Any]]]:
    """
    Get form field definitions.
    
    Returns:
        Dict: Form field definitions
    """
    global _form_fields
    
    if _form_fields is None:
        _form_fields = {}
        
        # Load broker forms
        broker_forms = load_json_file(os.path.join(FORMS_DIR, "broker_forms.json"))
        _form_fields.update(broker_forms)
        
        # Load BOCLife forms
        boclife_forms = load_json_file(os.path.join(FORMS_DIR, "boclife_forms.json"))
        _form_fields.update(boclife_forms)
        
        # Load Chubb forms
        chubb_forms = load_json_file(os.path.join(FORMS_DIR, "chubb_forms.json"))
        _form_fields.update(chubb_forms)
        
    return _form_fields

def get_reverse_mappings() -> Dict[str, str]:
    """
    Get reverse mappings from form fields to standardized fields.
    
    Returns:
        Dict: Reverse mappings
    """
    global _reverse_mappings
    
    if _reverse_mappings is None:
        # Create reverse mappings from field mappings
        _reverse_mappings = {}
        field_mappings = get_field_mappings()
        
        for std_field, mappings in field_mappings.items():
            for form_type, form_field in mappings.items():
                # Handle both single field mapping and list of fields
                if isinstance(form_field, list):
                    for field in form_field:
                        if field not in _reverse_mappings:
                            _reverse_mappings[field] = std_field
                else:
                    if form_field not in _reverse_mappings:
                        _reverse_mappings[form_field] = std_field
        
        # Save reverse mappings for reference (optional)
        reverse_mappings_path = os.path.join(MAPPINGS_DIR, "reverse_mappings.json")
        try:
            with open(reverse_mappings_path, 'w', encoding='utf-8') as f:
                json.dump(_reverse_mappings, f, indent=2)
        except Exception as e:
            logger.warning(f"Could not save reverse mappings: {str(e)}")
    
    return _reverse_mappings

def reload_mappings() -> None:
    """
    Reload all mappings from disk.
    Call this function when mappings are updated.
    """
    global _standardized_fields, _field_mappings, _form_fields, _reverse_mappings
    
    _standardized_fields = None
    _field_mappings = None
    _form_fields = None
    _reverse_mappings = None
    
    # Force reload
    get_standardized_fields()
    get_field_mappings()
    get_form_fields()
    get_reverse_mappings()
    
    logger.info("Mappings reloaded from disk")

def map_extracted_data_to_form_fields(
    extracted_data: Dict[str, str], 
    insurer: str
) -> ExtractedDataResponse:
    """
    Map the extracted data to the appropriate form fields.
    This version always displays all standardized fields as defined in the JSON configuration,
    regardless of whether the LLM was able to extract a value.
    The display sequence follows the order of fields in the standardized_fields.json.
    
    Args:
        extracted_data: Dictionary of extracted data from the LLM.
        insurer: Selected insurer (BOCLife or Chubb) - (Note: insurer is not used for field filtering in this version)
        
    Returns:
        ExtractedDataResponse: Mapped data with field information ready for UI display.
    """
    # Load standardized fields
    standardized_fields = get_standardized_fields()
    
    mapped_fields = []
    missing_required = []
    
    # Iterate over standardized fields in the order they appear in the JSON file.
    for std_field, config in standardized_fields.items():
        # Skip blank slots as they should not be rendered as actual form fields
        if std_field.startswith('blankSlot') or config.get('is_blank_slot', False):
            continue
            
        # Get the extracted value if available; default to empty string if not.
        value = extracted_data.get(std_field, "")
        has_value = value is not None and value.strip() != ""
        
        # Determine if the field is required and if it's missing a value.
        required = config.get("required", False)
        missing = required and not has_value
        
        # Get the category for grouping (default to "Other" if not specified)
        category = config.get("category", "Other Information")
        
        # If the field is required and missing, add to missing_required list.
        if missing:
            missing_required.append(std_field)
        
        # Create the field object
        field = ExtractedField(
            field_name=std_field,
            value=value if has_value else "",
            required=required,
            missing=missing,
            display_name=config.get("display_name", std_field),
            category=category
        )
        
        # Add to the main list to maintain the original order
        mapped_fields.append(field)
    
    return ExtractedDataResponse(
        fields=mapped_fields,
        missing_required=missing_required
    )

def map_verified_data_to_form_fields(
    verified_data: Dict[str, str],
    form_type: str,
    insurer: str
) -> Dict[str, str]:
    """
    Map the verified data to form-specific fields for a specific form.
    This function maps the standardized field names from the UI back
    to form-specific field names for PDF filling.
    
    Args:
        verified_data: Verified data from the UI (with standardized field names)
        form_type: Type of form (e.g., broker_agreement, insurer_application)
        insurer: Selected insurer (BOCLife or Chubb)
        
    Returns:
        Dict[str, str]: Form-specific data for PDF filling
    """
    # Load field mappings
    field_mappings = get_field_mappings()
    
    form_data = {}
    
    # Normalize form type to ensure consistency
    # This addresses the broker_agreement vs broker_client_agreement issue
    if form_type == "broker_agreement" or form_type == "broker_client_agreement":
        actual_form_type = "broker_client_agreement"  # Standardize on this name
    elif form_type == "broker_fna":
        actual_form_type = "broker_fna"
    elif form_type == "insurer_application":
        actual_form_type = f"{insurer.lower()}_application"
    elif form_type == "insurer_fna":
        actual_form_type = f"{insurer.lower()}_fna"
    elif form_type == "insurer_payment":
        actual_form_type = f"{insurer.lower()}_payment"
    else:
        return form_data  # Empty mapping for unknown form type
    
    # Map each standardized field to the form-specific field
    for std_field, value in verified_data.items():
        # Skip empty fields
        if not value:
            continue
            
        # Check if this standardized field maps to a field in this form
        if std_field in field_mappings and actual_form_type in field_mappings[std_field]:
            # The field may map to a string or a list of strings
            form_field_mapping = field_mappings[std_field][actual_form_type]
            
            # Handle both single field mapping and multiple field mapping
            if isinstance(form_field_mapping, str):
                if form_field_mapping:  # Only map non-empty strings
                    form_data[form_field_mapping] = value
            elif isinstance(form_field_mapping, list):
                # Map to multiple fields in the same form
                for target_field in form_field_mapping:
                    if target_field:  # Only map non-empty strings
                        form_data[target_field] = value
    
    return form_data

def get_form_fields_for_insurer(insurer: str) -> Dict[str, Dict[str, Dict]]:
    """
    Get form fields definitions for a specific insurer.
    
    Args:
        insurer: Selected insurer (BOCLife or Chubb)
        
    Returns:
        Dict: Form field definitions for the selected insurer
    """
    # Load form fields
    form_fields = get_form_fields()
    
    # Get broker forms (same for all insurers)
    forms = {
        "broker_agreement": form_fields["broker_agreement"],
        "broker_fna": form_fields["broker_fna"]
    }
    
    # Add insurer-specific forms
    if insurer == "BOCLife":
        forms.update({
            "application": form_fields["boclife_application"],
            "fna": form_fields["boclife_fna"],
            "payment": form_fields["boclife_payment"]
        })
    else:  # Chubb
        forms.update({
            "application": form_fields["chubb_application"],
            "fna": form_fields["chubb_fna"],
            "payment": form_fields["chubb_payment"]
        })
    
    return forms

// app/main.py
# app/main.py
"""
Main entry point for the PDF Form Filler application.
Initializes the FastAPI app and includes all routes.
"""
import os
from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware

from app.api.routes import forms, extraction, admin
from app.config import Settings, get_settings

def create_application() -> FastAPI:
    """
    Create and configure the FastAPI application.
    
    Returns:
        FastAPI: Configured FastAPI application instance
    """
    settings = get_settings()
    
    # Initialize FastAPI
    app = FastAPI(
        title="AI-Assisted PDF Form Filler",
        description="An AI-powered system for automatically filling insurance forms",
        version="0.1.0",
    )
    
    # Configure CORS for local development
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],  # In production, this should be restricted
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    
    # Include routes
    app.include_router(extraction.router, prefix="/api", tags=["Extraction"])
    app.include_router(forms.router, prefix="/api", tags=["Forms"])
    app.include_router(admin.router, prefix="/api/admin", tags=["Admin"])
    
    # Mount static files (frontend)
    app.mount("/", StaticFiles(directory="static", html=True), name="static")
    
    @app.get("/api/health", tags=["Health"])
    async def health_check():
        """Simple health check endpoint."""
        return {"status": "ok"}
    
    return app

app = create_application()

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("app.main:app", host="0.0.0.0", port=8002, reload=True)

// app/services/extraction.py
# app/services/extraction.py
"""
Extraction service to process free text input and extract structured client data.
Uses LLM service for the actual extraction.
"""
import logging
from typing import Dict

from app.services.llm import extract_structured_data
from app.config import Settings

# Set up logger
logger = logging.getLogger(__name__)

async def extract_client_data(
    text_input: str,
    settings: Settings
) -> Dict[str, str]:
    """
    Extract client data from free text input.
    
    Args:
        text_input: Free text input containing client information
        settings: Application settings
        
    Returns:
        Dict[str, str]: Extracted client data
        
    Raises:
        Exception: If extraction fails
    """
    try:
        # Use LLM to extract structured data
        extracted_data = await extract_structured_data(text_input, settings)
        
        # Perform post-processing on extracted data if needed
        processed_data = post_process_extracted_data(extracted_data)
        
        return processed_data
        
    except Exception as e:
        logger.error(f"Error during client data extraction: {str(e)}")
        raise Exception(f"Failed to extract client data: {str(e)}")


def post_process_extracted_data(extracted_data: Dict[str, str]) -> Dict[str, str]:
    """
    Perform post-processing on extracted data to ensure consistency.
    
    Args:
        extracted_data: Raw extracted data from LLM
        
    Returns:
        Dict[str, str]: Processed extracted data
    """
    processed_data = {}
    
    # Process each field
    for key, value in extracted_data.items():
        # Skip blank slots
        if key.startswith('blankSlot'):
            continue
            
        # Skip empty fields
        if not value:
            processed_data[key] = ""
            continue
            
        # Process based on field type
        if key == "annualIncome":
            # Remove currency symbols and commas from income
            processed_value = ''.join(c for c in value if c.isdigit() or c == '.')
            processed_data[key] = processed_value
            
        elif key == "dateOfBirth":
            # Ensure date format is consistent (MM/DD/YYYY)
            # This is a simplified example - in a real app, you'd want more robust date parsing
            if value and len(value) > 0:
                # Basic validation - this could be much more sophisticated
                if '/' in value and len(value.split('/')) == 3:
                    processed_data[key] = value
                else:
                    # Flag for manual correction if format is unclear
                    processed_data[key] = value + " (please verify format: MM/DD/YYYY)"
            else:
                processed_data[key] = ""
                
        elif key == "phoneNumber":
            # Ensure phone number has country code
            if value and '+' not in value:
                # Add Hong Kong country code if missing
                processed_data[key] = "+852 " + value.strip()
            else:
                processed_data[key] = value
                
        else:
            # No special processing for other fields
            processed_data[key] = value
            
    # If we have firstName and lastName but no fullName, construct it
    if (
        not processed_data.get("fullName") and 
        processed_data.get("firstName") and 
        processed_data.get("lastName")
    ):
        processed_data["fullName"] = (
            f"{processed_data['firstName']} {processed_data['lastName']}"
        )
            
    return processed_data

// app/services/llm.py
# app/services/llm.py
"""
LLM integration service using Azure OpenAI API (GPT-4o mini).
Handles communication with the LLM for data extraction.
"""
import os
import json
import logging
from typing import Dict, Any, List, Optional

import httpx
from pydantic import BaseModel

from app.config import Settings

# Set up logger
logger = logging.getLogger(__name__)

class AzureOpenAIMessage(BaseModel):
    """Model for OpenAI chat message."""
    role: str
    content: str

class AzureOpenAIRequest(BaseModel):
    """Model for Azure OpenAI API request."""
    messages: List[AzureOpenAIMessage]
    max_tokens: int = 1000
    temperature: float = 0.0
    top_p: float = 1.0
    frequency_penalty: float = 0.0
    presence_penalty: float = 0.0
    stop: Optional[List[str]] = None

async def call_azure_openai(
    prompt: str,
    system_message: str,
    settings: Settings
) -> Dict[str, Any]:
    """
    Call Azure OpenAI API with the given prompt.
    
    Args:
        prompt: User prompt for the LLM
        system_message: System message for the LLM
        settings: Application settings
        
    Returns:
        Dict: Response from the LLM
        
    Raises:
        Exception: If API call fails
    """
    url = f"{settings.AZURE_OPENAI_ENDPOINT}/openai/deployments/{settings.AZURE_OPENAI_DEPLOYMENT_NAME}/chat/completions?api-version={settings.AZURE_OPENAI_API_VERSION}"
    
    headers = {
        "Content-Type": "application/json",
        "api-key": settings.AZURE_OPENAI_API_KEY
    }
    
    request_data = AzureOpenAIRequest(
        messages=[
            AzureOpenAIMessage(role="system", content=system_message),
            AzureOpenAIMessage(role="user", content=prompt)
        ]
    )
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                url, 
                headers=headers,
                json=request_data.dict(),
                timeout=30.0  # 30 second timeout
            )
            
            response.raise_for_status()
            return response.json()
            
    except httpx.HTTPStatusError as e:
        logger.error(f"HTTP error during LLM API call: {e.response.status_code} - {e.response.text}")
        raise Exception(f"LLM API error: {e.response.status_code} - {e.response.text}")
        
    except httpx.RequestError as e:
        logger.error(f"Request error during LLM API call: {str(e)}")
        raise Exception(f"LLM API request error: {str(e)}")
        
    except Exception as e:
        logger.error(f"Unexpected error during LLM API call: {str(e)}")
        raise Exception(f"LLM API unexpected error: {str(e)}")


async def extract_structured_data(
    text_input: str,
    settings: Settings
) -> Dict[str, str]:
    """
    Extract structured data from free text input using LLM.
    Uses standardized field definitions with LLM guides for improved extraction.
    
    Args:
        text_input: Free text input containing client information
        settings: Application settings
        
    Returns:
        Dict[str, str]: Extracted structured data
        
    Raises:
        Exception: If extraction fails
    """
    try:
        # Load standardized fields to get the LLM guides
        standardized_fields = {}
        try:
            config_path = os.path.join("config", "standardized_fields.json")
            if os.path.exists(config_path):
                with open(config_path, 'r', encoding='utf-8') as f:
                    standardized_fields = json.load(f)
        except Exception as e:
            logger.warning(f"Could not load standardized fields: {e}")
        
        # Build field extraction instructions based on standardized fields
        field_instructions = []
        for field_name, field_config in standardized_fields.items():
            guide = field_config.get("llm_guide", "")
            required = "required" if field_config.get("required", False) else "optional"
            display_name = field_config.get("display_name", field_name)
            
            instruction = f"- {field_name} ({display_name}, {required})"
            if guide:
                instruction += f": {guide}"
                
            field_instructions.append(instruction)
        
        # Join all field instructions
        fields_to_extract = "\n".join(field_instructions)
        
        # Define system message for the LLM
        system_message = """
        You are an AI assistant that extracts structured information from unstructured text about insurance clients.
        Extract ONLY the requested fields from the provided text. If a field is not found in the text, use null.
        Return the results as a valid JSON object with the exact field names specified.
        Do not include any explanations or notes. Your entire response must be valid parseable JSON.
        """
        
        # Define prompt for the LLM
        prompt = f"""
        Extract the following information from the text below. Return as JSON.
        Fields to extract:
        {fields_to_extract}
        
        Text to extract from:
        {text_input}
        
        Return ONLY a valid JSON object with these fields. If a field is not found, use null.
        """
        
        # Call LLM API
        response = await call_azure_openai(prompt, system_message, settings)
        
        # Extract content from response
        content = response.get("choices", [{}])[0].get("message", {}).get("content", "")
        
        # Parse JSON content
        extracted_data = json.loads(content.strip())
        
        # Clean up the extracted data
        cleaned_data = {}
        for key, value in extracted_data.items():
            # Convert None to empty string for easier processing
            cleaned_data[key] = str(value).strip() if value is not None else ""
        
        return cleaned_data
        
    except json.JSONDecodeError as e:
        logger.error(f"Failed to parse LLM output as JSON: {e}")
        logger.error(f"Raw content: {content}")
        raise Exception("Failed to parse extracted data as JSON")
        
    except Exception as e:
        logger.error(f"Error during data extraction: {str(e)}")
        raise Exception(f"Failed to extract data: {str(e)}")

// app/services/pdf_enhanced.py
# app/services/pdf_enhanced.py
"""
Enhanced PDF processing service with multiple filling strategies.
This version includes special handling for appearance streams, fallback mechanisms,
and improved support for Chinese characters.
"""
import os
import json
import logging
import uuid
import datetime
import subprocess
import tempfile
import traceback
from typing import Dict, List, Tuple, Optional, Any
import PyPDF2
import shutil

from app.core.field_mapping import map_verified_data_to_form_fields
from app.config import Settings

# Set up logger
logger = logging.getLogger(__name__)

async def fill_pdf_forms(
    data: Dict[str, str],
    insurer: str,
    settings: Settings
) -> Tuple[List[str], List[str]]:
    """
    Fill PDF forms with verified client data.
    
    Args:
        data: Verified client data
        insurer: Selected insurer (BOCLife or Chubb)
        settings: Application settings
        
    Returns:
        Tuple[List[str], List[str]]: List of filled form paths and form names
    """
    try:
        # Get form templates based on insurer
        template_paths = get_template_paths(insurer, settings)
        
        # Generate unique session ID for this submission
        session_id = str(uuid.uuid4())
        
        # Get current timestamp for filenames
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # Get client last name for filenames (default to "Unknown" if not available)
        client_last_name = data.get("lastName", "Unknown")
        if not client_last_name or client_last_name.strip() == "":
            client_last_name = "Unknown"
        
        # Clean up the last name for use in filenames
        client_last_name = ''.join(c for c in client_last_name if c.isalnum() or c in ' _-')
        
        # Create output directory for filled forms
        output_dir = os.path.join(settings.TEMP_DIR, f"{client_last_name}_{current_time}")
        os.makedirs(output_dir, exist_ok=True)
        
        logger.info(f"Filling forms for client: {client_last_name}")
        logger.info(f"Output directory: {output_dir}")
        
        filled_forms = []
        form_names = []
        
        # Fill each form
        for form_type, template_path in template_paths.items():
            logger.info(f"Processing form: {form_type} - {os.path.basename(template_path)}")
            
            # Get form-specific field mapping
            form_data = map_verified_data_to_form_fields(
                data, 
                form_type, 
                insurer
            )
            
            logger.info(f"Mapped data for form {form_type}: {form_data}")
            
            # Fill the form
            if os.path.exists(template_path):
                # Create custom filename with client name and timestamp
                form_filename = f"{client_last_name}_{form_type}_{current_time}.pdf"
                output_path = os.path.join(output_dir, form_filename)
                
                logger.info(f"Filling form template: {template_path}")
                logger.info(f"Output will be saved to: {output_path}")
                
                # Try multiple filling strategies with fallbacks
                filled_form_path = fill_pdf_form_with_fallbacks(template_path, form_data, output_path)
                
                # Generate form name for UI display
                form_name = f"{insurer if 'broker' not in form_type else 'broker'} - {form_type.replace('_', ' ').title()}"
                
                filled_forms.append(filled_form_path)
                form_names.append(form_name)
            else:
                logger.warning(f"Template not found: {template_path}")
        
        return filled_forms, form_names
        
    except Exception as e:
        logger.error(f"Error during PDF form filling: {str(e)}")
        logger.error(traceback.format_exc())
        raise Exception(f"Failed to fill PDF forms: {str(e)}")


def get_template_paths(
    insurer: str,
    settings: Settings
) -> Dict[str, str]:
    """
    Get paths to PDF form templates based on insurer.
    
    Args:
        insurer: Selected insurer (BOCLife or Chubb)
        settings: Application settings
        
    Returns:
        Dict[str, str]: Dictionary mapping form types to template paths
    """
    # Broker forms (same for all insurers)
    # Standardize on broker_client_agreement as the form key
    template_paths = {
        "broker_client_agreement": os.path.join(settings.BROKER_TEMPLATES_DIR, "broker_client_agreement.pdf"),
        "broker_fna": os.path.join(settings.BROKER_TEMPLATES_DIR, "broker_fna.pdf")
    }
    
    # Insurer-specific forms
    if insurer == "BOCLife":
        template_paths.update({
            "insurer_application": os.path.join(settings.BOCLIFE_TEMPLATES_DIR, "BOCLife_application.pdf"),
            "insurer_fna": os.path.join(settings.BOCLIFE_TEMPLATES_DIR, "BOCLife_fna.pdf"),
            "insurer_payment": os.path.join(settings.BOCLIFE_TEMPLATES_DIR, "BOCLife_payment.pdf")
        })
    else:  # Chubb
        template_paths.update({
            "insurer_application": os.path.join(settings.CHUBB_TEMPLATES_DIR, "Chubb_application.pdf"),
            "insurer_fna": os.path.join(settings.CHUBB_TEMPLATES_DIR, "Chubb_fna.pdf"),
            "insurer_payment": os.path.join(settings.CHUBB_TEMPLATES_DIR, "Chubb_payment.pdf")
        })
    
    return template_paths


def fill_pdf_form_with_fallbacks(
    template_path: str,
    form_data: Dict[str, str],
    output_path: str
) -> str:
    """
    Fill a PDF form with multiple fallback strategies.
    Added special support for Chinese characters.
    
    Args:
        template_path: Path to the PDF file
        form_data: Field data to fill
        output_path: Path to save the output
        
    Returns:
        str: Path to the filled form
    """
    # Copy the template as a fallback
    shutil.copy(template_path, output_path)
    logger.info(f"Created template copy as fallback: {output_path}")
    
    # Check if any field values contain Chinese characters
    has_chinese = any(any(u'\u4e00' <= char <= u'\u9fff' for char in value) for value in form_data.values())
    
    # If Chinese characters are detected, use specialized method first
    if has_chinese:
        logger.info("Chinese characters detected in form data, using specialized filling method")
        try:
            result = fill_pdf_with_pdftk_chinese(template_path, form_data, output_path)
            if result.get("success", False):
                logger.info(f"Chinese-optimized pdftk strategy succeeded with {result.get('fields_filled', 0)} fields")
                return output_path
            logger.warning(f"Chinese-optimized pdftk strategy failed: {result.get('error', 'Unknown error')}")
        except Exception as e:
            logger.error(f"Error with Chinese-optimized pdftk strategy: {str(e)}")
            logger.error(traceback.format_exc())
    
    # Try each standard strategy in order
    strategies = [
        ("PyPDF2 Field-by-Field with Appearance", fill_pdf_with_pypdf2_appearance),
        ("pdfrw with Appearance Streams", fill_pdf_with_pdfrw),
        ("PyPDF2 Direct Field Access", fill_pdf_with_pypdf2_direct),
        ("External Tool (pdftk)", fill_pdf_with_pdftk)
    ]
    
    for name, strategy in strategies:
        try:
            logger.info(f"Trying strategy: {name}")
            result = strategy(template_path, form_data, output_path)
            
            # If strategy worked, break the loop
            if result.get("success", False):
                logger.info(f"Strategy {name} succeeded with {result.get('fields_filled', 0)} fields")
                return output_path
                
            logger.warning(f"Strategy {name} did not work: {result.get('error', 'Unknown error')}")
        except Exception as e:
            logger.error(f"Error with {name} strategy: {str(e)}")
            logger.error(traceback.format_exc())
    
    logger.warning("All strategies failed, using template copy as fallback")
    return output_path


def fill_pdf_with_pdftk_chinese(
    template_path: str,
    form_data: Dict[str, str],
    output_path: str
) -> Dict[str, Any]:
    """
    Fill PDF using pdftk with special handling for Chinese characters.
    
    Args:
        template_path: Path to the PDF file
        form_data: Field data to fill
        output_path: Path to save the output
        
    Returns:
        Dict: Result information
    """
    result = {
        "success": False,
        "fields_filled": 0,
        "error": None
    }
    
    try:
        # Create XFDF file instead of FDF for better Unicode support
        xfdf_content = ['<?xml version="1.0" encoding="UTF-8"?>\n']
        xfdf_content.append('<xfdf xmlns="http://ns.adobe.com/xfdf/" xml:space="preserve">\n')
        xfdf_content.append('<fields>\n')
        
        # Add all fields with proper UTF-8 encoding
        for field_name, field_value in form_data.items():
            xfdf_content.append('<field name="' + field_name + '">\n')
            xfdf_content.append('<value>' + field_value + '</value>\n')
            xfdf_content.append('</field>\n')
        
        xfdf_content.append('</fields>\n')
        xfdf_content.append('<f href="' + os.path.basename(template_path) + '"/>\n')
        xfdf_content.append('</xfdf>\n')
        
        # Write the XFDF file with UTF-8 encoding
        with tempfile.NamedTemporaryFile(suffix='.xfdf', delete=False, mode='w', encoding='utf-8') as xfdf_file:
            xfdf_path = xfdf_file.name
            xfdf_file.write(''.join(xfdf_content))
        
        # Use pdftk with XFDF for better Unicode support
        try:
            env = os.environ.copy()
            env['LANG'] = 'en_US.UTF-8'  # Set UTF-8 locale
            
            # Use pdftk with the XFDF file
            subprocess.run([
                "pdftk", template_path,
                "fill_form", xfdf_path,
                "output", output_path,
                "need_appearances"  # Force appearance regeneration
            ], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env)
            
            # If that failed, try the legacy FDF approach
            if not os.path.exists(output_path) or os.path.getsize(output_path) == 0:
                # Create FDF file instead
                fdf_content = ['%FDF-1.2\n']
                fdf_content.append('1 0 obj\n')
                fdf_content.append('<<\n')
                fdf_content.append('/FDF\n')
                fdf_content.append('<<\n')
                fdf_content.append('/Fields [\n')
                
                # Add fields with UTF-8 encoding
                for field_name, field_value in form_data.items():
                    fdf_content.append('<<\n')
                    fdf_content.append(f'/T ({field_name})\n')
                    fdf_content.append(f'/V ({field_value})\n')
                    fdf_content.append('>>\n')
                
                fdf_content.append(']\n')
                fdf_content.append('>>\n')
                fdf_content.append('>>\n')
                fdf_content.append('endobj\n')
                fdf_content.append('trailer\n')
                fdf_content.append('<<\n')
                fdf_content.append('/Root 1 0 R\n')
                fdf_content.append('>>\n')
                fdf_content.append('%%EOF\n')
                
                # Write the FDF file
                with tempfile.NamedTemporaryFile(suffix='.fdf', delete=False, mode='wb') as fdf_file:
                    fdf_path = fdf_file.name
                    fdf_file.write(''.join(fdf_content).encode('utf-8'))
                
                # Try again with FDF
                subprocess.run([
                    "pdftk", template_path,
                    "fill_form", fdf_path,
                    "output", output_path,
                    "need_appearances"
                ], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env)
                
                # Clean up FDF file
                os.unlink(fdf_path)
            
            result["success"] = True
            result["fields_filled"] = len(form_data)
            
        except subprocess.CalledProcessError as e:
            result["error"] = f"pdftk failed: {e.stderr.decode() if e.stderr else str(e)}"
            
        finally:
            # Clean up XFDF file
            if os.path.exists(xfdf_path):
                os.unlink(xfdf_path)
        
        return result
        
    except Exception as e:
        result["error"] = str(e)
        return result


def fill_pdf_with_pypdf2_appearance(
    template_path: str,
    form_data: Dict[str, str],
    output_path: str
) -> Dict[str, Any]:
    """
    Fill PDF using PyPDF2 with special appearance stream handling.
    Uses page numbers from form definitions for more reliable field updates.
    
    Args:
        template_path: Path to the PDF file
        form_data: Field data to fill
        output_path: Path to save the output
        
    Returns:
        Dict: Result information
    """
    result = {
        "success": False,
        "fields_filled": 0,
        "fields_failed": 0,
        "error": None
    }
    
    try:
        # Determine form type from template path
        form_type = None
        if "broker_client_agreement.pdf" in template_path:
            form_type = "broker_client_agreement"
        elif "broker_fna.pdf" in template_path:
            form_type = "broker_fna"
        elif "BOCLife_application.pdf" in template_path:
            form_type = "boclife_application"
        elif "BOCLife_fna.pdf" in template_path:
            form_type = "boclife_fna"
        elif "BOCLife_payment.pdf" in template_path:
            form_type = "boclife_payment"
        elif "Chubb_application.pdf" in template_path:
            form_type = "chubb_application"
        elif "Chubb_fna.pdf" in template_path:
            form_type = "chubb_fna"
        elif "Chubb_payment.pdf" in template_path:
            form_type = "chubb_payment"
            
        # Load form field definitions to get page numbers
        form_fields = {}
        if form_type:
            try:
                # Load the appropriate form definition file
                if form_type.startswith("broker_"):
                    forms_file = os.path.join("config", "forms", "broker_forms.json")
                elif form_type.startswith("boclife_"):
                    forms_file = os.path.join("config", "forms", "boclife_forms.json")
                elif form_type.startswith("chubb_"):
                    forms_file = os.path.join("config", "forms", "chubb_forms.json")
                    
                if os.path.exists(forms_file):
                    with open(forms_file, 'r', encoding='utf-8') as f:
                        all_forms = json.load(f)
                        if form_type in all_forms:
                            form_fields = all_forms[form_type]
                            logger.info(f"Loaded field definitions for {form_type}")
            except Exception as e:
                logger.warning(f"Could not load form field definitions: {e}")
        
        reader = PyPDF2.PdfReader(template_path)
        writer = PyPDF2.PdfWriter()
        
        # Add all pages
        for page in reader.pages:
            writer.add_page(page)
        
        # Get field info
        fields = reader.get_fields()
        if not fields:
            result["error"] = "No form fields found"
            return result
        
        # Process each field individually, using page numbers from form definition
        successful_fields = []
        failed_fields = []
        
        for field_name, field_value in form_data.items():
            try:
                # Get page number from form field definition (default to 0 if not found)
                page_num = 0
                if field_name in form_fields and "page_number" in form_fields[field_name]:
                    page_num = form_fields[field_name]["page_number"]
                    
                logger.info(f"Filling field {field_name} on page {page_num}")
                
                # 1. Update using page-specific method with page number from form definition
                field_data = {field_name: field_value}
                writer.update_page_form_field_values(page_num, field_data)
                
                # 2. Additionally, try to force appearance update
                if hasattr(writer, "_root_object") and writer._root_object is not None:
                    if "/AcroForm" in writer._root_object:
                        acroform = writer._root_object["/AcroForm"]
                        
                        # Set NeedAppearances flag to ensure appearance streams are generated
                        acroform["/NeedAppearances"] = PyPDF2.generic.BooleanObject(True)
                
                successful_fields.append(field_name)
            except Exception as e:
                failed_fields.append(field_name)
                logger.warning(f"Failed to fill field {field_name}: {str(e)}")
        
        # Write the output
        with open(output_path, 'wb') as f:
            writer.write(f)
        
        # Update result
        result["fields_filled"] = len(successful_fields)
        result["fields_failed"] = len(failed_fields)
        result["success"] = result["fields_filled"] > 0
        
        return result
        
    except Exception as e:
        result["error"] = str(e)
        return result


def fill_pdf_with_pdfrw(
    template_path: str,
    form_data: Dict[str, str],
    output_path: str
) -> Dict[str, Any]:
    """
    Fill PDF using pdfrw library with appearance handling.
    
    Args:
        template_path: Path to the PDF file
        form_data: Field data to fill
        output_path: Path to save the output
        
    Returns:
        Dict: Result information
    """
    result = {
        "success": False,
        "fields_filled": 0,
        "fields_failed": 0,
        "error": None
    }
    
    try:
        # Check if pdfrw is available
        try:
            import pdfrw
            from pdfrw import PdfReader, PdfWriter, PdfDict, PdfName, PdfObject, PdfString
        except ImportError:
            result["error"] = "pdfrw library not installed"
            return result
        
        # Read the template
        template = PdfReader(template_path)
        
        # First handle default appearance for all fields
        if template.Root.AcroForm and template.Root.AcroForm.NeedAppearances:
            template.Root.AcroForm.NeedAppearances = pdfrw.PdfObject('true')
        
        successful_fields = []
        failed_fields = []
            
        # Function to process fields
        def process_annotation(annot):
            if annot['/Subtype'] == '/Widget' and annot['/T']:
                field_name = annot['/T'].to_unicode()
                if field_name in form_data:
                    try:
                        # Handle potential Chinese characters in field value
                        field_value = form_data[field_name]
                        
                        # Set the field value
                        annot.update(
                            pdfrw.PdfDict(
                                V=pdfrw.PdfString.encode(field_value),
                                DV=pdfrw.PdfString.encode(field_value),
                                AP=None  # Force regeneration of appearance stream
                            )
                        )
                        
                        # Flag as modified to force appearance update
                        if '/Ff' in annot:
                            ff = int(annot['/Ff'])
                            ff |= 1  # Set bit 1 to mark as modified
                            annot['/Ff'] = pdfrw.PdfObject(str(ff))
                        else:
                            annot['/Ff'] = pdfrw.PdfObject('1')
                        
                        if field_name not in successful_fields:
                            successful_fields.append(field_name)
                        
                        return True
                    except Exception as e:
                        logger.error(f"Error filling field {field_name}: {str(e)}")
                        if field_name not in failed_fields:
                            failed_fields.append(field_name)
            return False
        
        # Process pages and their fields
        for page in template.pages:
            if page.Annots:
                for idx, annot in enumerate(page.Annots):
                    if isinstance(annot, pdfrw.PdfDict):
                        # Process this annotation
                        process_annotation(annot)
                    elif annot.resolved.Subtype == '/Widget' and annot.resolved.Parent:
                        # This is a grouped field with a parent
                        parent = annot.resolved.Parent
                        
                        if '/T' in parent and parent['/T']:
                            field_name = parent['/T'].to_unicode()
                            if field_name in form_data:
                                try:
                                    field_value = form_data[field_name]
                                    
                                    # Set value on parent
                                    parent.update(
                                        pdfrw.PdfDict(
                                            V=pdfrw.PdfString.encode(field_value),
                                            DV=pdfrw.PdfString.encode(field_value)
                                        )
                                    )
                                    
                                    # Clear appearance to force regeneration
                                    annot.update(pdfrw.PdfDict(AP=None))
                                    
                                    if field_name not in successful_fields:
                                        successful_fields.append(field_name)
                                        
                                except Exception as e:
                                    logger.error(f"Error filling parent field {field_name}: {str(e)}")
                                    if field_name not in failed_fields:
                                        failed_fields.append(field_name)
        
        # Force appearance regeneration for the entire form
        if template.Root.AcroForm:
            template.Root.AcroForm.update(pdfrw.PdfDict(NeedAppearances=pdfrw.PdfObject('true')))
        
        # Write the filled PDF
        writer = PdfWriter()
        writer.write(output_path, template)
        
        # Update result
        result["fields_filled"] = len(successful_fields)
        result["fields_failed"] = len(failed_fields)
        result["success"] = result["fields_filled"] > 0
        
        return result
    
    except Exception as e:
        result["error"] = str(e)
        return result


def fill_pdf_with_pypdf2_direct(
    template_path: str,
    form_data: Dict[str, str],
    output_path: str
) -> Dict[str, Any]:
    """
    Fill PDF using direct field manipulation with PyPDF2.
    
    Args:
        template_path: Path to the PDF file
        form_data: Field data to fill
        output_path: Path to save the output
        
    Returns:
        Dict: Result information
    """
    result = {
        "success": False,
        "fields_filled": 0,
        "fields_failed": 0,
        "error": None
    }
    
    try:
        reader = PyPDF2.PdfReader(template_path)
        writer = PyPDF2.PdfWriter()
        
        # Add all pages
        for page in reader.pages:
            writer.add_page(page)
        
        # Check for AcroForm
        has_form_fields = False
        if reader.trailer and '/Root' in reader.trailer:
            root = reader.trailer['/Root']
            if isinstance(root, PyPDF2.generic.IndirectObject):
                root = root.get_object()
            if '/AcroForm' in root:
                has_form_fields = True
        
        if not has_form_fields:
            result["error"] = "No AcroForm in PDF"
            return result
        
        # Direct modification of fields
        successful_fields = []
        failed_fields = []
        
        # Get the AcroForm dictionary
        if hasattr(writer, "_root_object") and "/AcroForm" in writer._root_object:
            acroform = writer._root_object["/AcroForm"]
            if isinstance(acroform, PyPDF2.generic.IndirectObject):
                acroform = acroform.get_object()
            
            # Set NeedAppearances flag
            acroform["/NeedAppearances"] = PyPDF2.generic.BooleanObject(True)
            
            # Get the fields array
            if "/Fields" in acroform:
                fields_array = acroform["/Fields"]
                
                # Process each field in the form data
                for field_name, field_value in form_data.items():
                    try:
                        # Look for a field with matching name
                        field_found = False
                        
                        for field_ref in fields_array:
                            field = field_ref.get_object()
                            
                            # Check if this is the field we're looking for
                            if "/T" in field and str(field["/T"]) == field_name:
                                # Set the value
                                field["/V"] = PyPDF2.generic.TextStringObject(field_value)
                                
                                # Clear appearance streams
                                if "/AP" in field:
                                    del field["/AP"]
                                
                                field_found = True
                                successful_fields.append(field_name)
                                break
                            
                            # Try child fields
                            elif "/Kids" in field:
                                kids = field["/Kids"]
                                for kid in kids:
                                    kid_obj = kid.get_object()
                                    
                                    if "/T" in kid_obj:
                                        kid_name = str(kid_obj["/T"])
                                        full_name = str(field.get("/T", "")) + "." + kid_name
                                        
                                        if full_name == field_name or kid_name == field_name:
                                            kid_obj["/V"] = PyPDF2.generic.TextStringObject(field_value)
                                            
                                            # Clear appearance streams
                                            if "/AP" in kid_obj:
                                                del kid_obj["/AP"]
                                                
                                            field_found = True
                                            successful_fields.append(field_name)
                                            break
                        
                        if not field_found:
                            failed_fields.append(field_name)
                    except Exception as e:
                        failed_fields.append(field_name)
                        logger.error(f"Error filling field {field_name}: {str(e)}")
        
        # Write the filled PDF
        with open(output_path, 'wb') as f:
            writer.write(f)
        
        # Update result
        result["fields_filled"] = len(successful_fields)
        result["fields_failed"] = len(failed_fields)
        result["success"] = result["fields_filled"] > 0
        
        return result
    
    except Exception as e:
        result["error"] = str(e)
        return result


def fill_pdf_with_pdftk(
    template_path: str,
    form_data: Dict[str, str],
    output_path: str
) -> Dict[str, Any]:
    """
    Fill PDF using external pdftk command line tool.
    
    Args:
        template_path: Path to the PDF file
        form_data: Field data to fill
        output_path: Path to save the output
        
    Returns:
        Dict: Result information
    """
    result = {
        "success": False,
        "fields_filled": 0,
        "fields_failed": 0,
        "error": None
    }
    
    try:
        # Check if pdftk is available
        try:
            subprocess.run(["pdftk", "--version"], 
                          stdout=subprocess.PIPE, 
                          stderr=subprocess.PIPE, 
                          check=False)
        except (subprocess.SubprocessError, FileNotFoundError):
            result["error"] = "pdftk not installed or not in PATH"
            return result
        
        # Create a FDF data file with the form values
        fdf_content = ['%FDF-1.2\n']
        fdf_content.append('1 0 obj\n')
        fdf_content.append('<<\n')
        fdf_content.append('/FDF\n')
        fdf_content.append('<<\n')
        fdf_content.append('/Fields [\n')
        
        # Add all fields
        for field_name, field_value in form_data.items():
            fdf_content.append('<<\n')
            fdf_content.append(f'/T ({field_name})\n')
            fdf_content.append(f'/V ({field_value})\n')
            fdf_content.append('>>\n')
        
        fdf_content.append(']\n')
        fdf_content.append('>>\n')
        fdf_content.append('>>\n')
        fdf_content.append('endobj\n')
        fdf_content.append('trailer\n')
        fdf_content.append('<<\n')
        fdf_content.append('/Root 1 0 R\n')
        fdf_content.append('>>\n')
        fdf_content.append('%%EOF\n')
        
        # Write the FDF file
        with tempfile.NamedTemporaryFile(suffix='.fdf', delete=False) as fdf_file:
            fdf_path = fdf_file.name
            fdf_file.write(''.join(fdf_content).encode('utf-8'))
        
        # Fill the form using pdftk
        try:
            subprocess.run([
                "pdftk", template_path,
                "fill_form", fdf_path,
                "output", output_path,
                "need_appearances"  # Force appearance regeneration
            ], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            
            # If we get here, the command succeeded
            result["success"] = True
            result["fields_filled"] = len(form_data)
            
        except subprocess.CalledProcessError as e:
            result["error"] = f"pdftk failed: {e.stderr.decode() if e.stderr else str(e)}"
            
        finally:
            # Clean up temporary file
            os.unlink(fdf_path)
        
        return result
        
    except Exception as e:
        result["error"] = str(e)
        return result

// app/services/zip.py
# app/services/zip.py
"""
ZIP service to package filled PDF forms for download.
Enhanced with better error handling and logging.
"""
import os
import logging
import zipfile
import uuid
import traceback
from typing import List, Dict, Any
import datetime

from app.config import Settings

# Set up logger
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def create_zip_package(
    file_paths: List[str],
    settings: Settings
) -> str:
    """
    Create a ZIP file containing all filled forms.
    
    Args:
        file_paths: List of paths to filled PDF forms
        settings: Application settings
        
    Returns:
        str: Path to the generated ZIP file
        
    Raises:
        Exception: If ZIP creation fails
    """
    try:
        # Generate unique filename with timestamp for the ZIP package
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        zip_filename = f"insurance_forms_{current_time}_{uuid.uuid4()}.zip"
        zip_path = os.path.join(settings.TEMP_DIR, zip_filename)
        
        logger.info(f"Creating ZIP package with {len(file_paths)} files")
        logger.info(f"ZIP will be saved to: {zip_path}")
        
        # Create ZIP file
        with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            # Add each form to the ZIP file
            for file_path in file_paths:
                if os.path.exists(file_path):
                    # Use just the filename as the archive path (strip the directory)
                    archive_name = os.path.basename(file_path)
                    logger.info(f"Adding to ZIP: {archive_name}")
                    zipf.write(file_path, arcname=archive_name)
                else:
                    logger.warning(f"File not found for ZIP packaging: {file_path}")
        
        # Check if the ZIP was created successfully
        if os.path.exists(zip_path) and os.path.getsize(zip_path) > 0:
            logger.info(f"Successfully created ZIP package: {zip_path}")
            return zip_path
        else:
            raise Exception("ZIP file was not created or is empty")
        
    except Exception as e:
        logger.error(f"Error creating ZIP package: {str(e)}")
        logger.error(traceback.format_exc())
        raise Exception(f"Failed to create ZIP package: {str(e)}")


def cleanup_temp_files(
    file_paths: List[str],
    zip_path: str,
    settings: Settings,
    retain_days: int = 1
) -> Dict[str, Any]:
    """
    Clean up temporary files after successful download.
    
    Args:
        file_paths: List of paths to filled PDF forms
        zip_path: Path to the generated ZIP file
        settings: Application settings
        retain_days: Number of days to retain files before cleanup
        
    Returns:
        Dict: Summary of cleanup operation
    """
    cleanup_summary = {
        "files_deleted": 0,
        "files_retained": 0,
        "errors": []
    }
    
    try:
        # Check if immediate cleanup is disabled
        if retain_days > 0:
            logger.info(f"Files will be retained for {retain_days} days")
            cleanup_summary["message"] = f"Files will be retained for {retain_days} days"
            return cleanup_summary
        
        # Remove individual PDF files
        for file_path in file_paths:
            try:
                if os.path.exists(file_path):
                    os.remove(file_path)
                    logger.debug(f"Removed temporary file: {file_path}")
                    cleanup_summary["files_deleted"] += 1
            except Exception as e:
                error_msg = f"Error removing file {file_path}: {str(e)}"
                logger.error(error_msg)
                cleanup_summary["errors"].append(error_msg)
                cleanup_summary["files_retained"] += 1
        
        # Remove ZIP file
        try:
            if os.path.exists(zip_path):
                os.remove(zip_path)
                logger.debug(f"Removed temporary ZIP file: {zip_path}")
                cleanup_summary["files_deleted"] += 1
            else:
                cleanup_summary["files_retained"] += 1
        except Exception as e:
            error_msg = f"Error removing ZIP file {zip_path}: {str(e)}"
            logger.error(error_msg)
            cleanup_summary["errors"].append(error_msg)
            cleanup_summary["files_retained"] += 1
        
        # Note: In a production system, you might want to implement a scheduled
        # cleanup task instead of immediate deletion, or implement a TTL-based
        # system for temporary files
        
        return cleanup_summary
        
    except Exception as e:
        # Log but don't raise exception for cleanup errors
        logger.error(f"Error during cleanup of temporary files: {str(e)}")
        logger.error(traceback.format_exc())
        cleanup_summary["errors"].append(str(e))
        return cleanup_summary

// app/tools/pdf_form_reader.py
# app/tools/pdf_form_reader.py
"""
PDF Form Reader Tool.

This tool reads a PDF file, extracts all form fields, and generates
appropriate JSON configuration files for the field mapping system.
"""
import os
import json
import argparse
import logging
from typing import Dict, List, Any, Optional, Set
import PyPDF2

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def extract_form_fields(pdf_path: str) -> Dict[str, Dict[str, Any]]:
    """
    Extract form fields from a PDF file.
    
    Args:
        pdf_path: Path to the PDF file
        
    Returns:
        Dict: Dictionary of form fields with metadata
    """
    logger.info(f"Extracting form fields from: {pdf_path}")
    
    fields = {}
    
    try:
        # Open the PDF file
        with open(pdf_path, 'rb') as file:
            reader = PyPDF2.PdfReader(file)
            
            # Check if the PDF has form fields
            has_acroform = False
            if reader.trailer and '/Root' in reader.trailer:
                root = reader.trailer['/Root']
                if isinstance(root, PyPDF2.generic.IndirectObject):
                    root = root.get_object()
                has_acroform = '/AcroForm' in root
            
            if not has_acroform:
                logger.warning(f"PDF does not have AcroForm. This may not be a fillable PDF: {pdf_path}")
            
            # Extract all form fields
            raw_fields = reader.get_fields()
            
            if not raw_fields:
                logger.warning(f"No form fields found in PDF: {pdf_path}")
                return {}
            
            logger.info(f"Found {len(raw_fields)} form fields")
            
            # Process each field
            for field_name, field_obj in raw_fields.items():
                # Skip any parent fields that don't directly hold values
                if isinstance(field_obj, dict) and '/Kids' in field_obj:
                    continue
                
                # Clean up field name (remove any internal structure, take the last part)
                clean_name = field_name.split('.')[-1]
                
                # Get field type if possible
                field_type = "unknown"
                if isinstance(field_obj, dict):
                    if '/FT' in field_obj:
                        field_type_code = field_obj['/FT']
                        if field_type_code == '/Tx':
                            field_type = "text"
                        elif field_type_code == '/Btn':
                            field_type = "button"  # checkbox or radio button
                        elif field_type_code == '/Ch':
                            field_type = "choice"  # dropdown or list
                        else:
                            field_type = str(field_type_code)
                
                # Add to fields dictionary
                fields[clean_name] = {
                    "required": True,  # Default to true, can be adjusted later
                    "display_name": format_display_name(clean_name),
                    "category": guess_category(clean_name),
                    "field_type": field_type
                }
    
    except Exception as e:
        logger.error(f"Error extracting fields from PDF: {e}")
        return {}
    
    return fields

def format_display_name(field_name: str) -> str:
    """
    Format a field name for display.
    
    Args:
        field_name: Technical field name
        
    Returns:
        str: Formatted display name
    """
    # Split by underscore, camelCase, or other common separators
    words = []
    current_word = ""
    
    for char in field_name:
        if char.isupper() and current_word and current_word[-1].islower():
            words.append(current_word)
            current_word = char
        elif char == '_' or char == '-':
            if current_word:
                words.append(current_word)
                current_word = ""
        else:
            current_word += char
    
    if current_word:
        words.append(current_word)
    
    # Capitalize each word
    display_name = ' '.join(word.capitalize() for word in words)
    
    return display_name

def guess_category(field_name: str) -> str:
    """
    Guess the category for a field based on its name.
    
    Args:
        field_name: Field name
        
    Returns:
        str: Guessed category
    """
    field_name_lower = field_name.lower()
    
    # Personal information fields
    if any(keyword in field_name_lower for keyword in ['name', 'first', 'last', 'dob', 'birth', 'gender', 'sex', 'marital', 'id', 'hkid']):
        return "Personal Information"
    
    # Contact information fields
    if any(keyword in field_name_lower for keyword in ['address', 'city', 'country', 'zip', 'postal', 'phone', 'email', 'contact']):
        return "Contact Information"
    
    # Financial information fields
    if any(keyword in field_name_lower for keyword in ['income', 'salary', 'job', 'occupation', 'employment', 'money', 'financial']):
        return "Financial Information"
    
    # Payment information fields
    if any(keyword in field_name_lower for keyword in ['payment', 'bank', 'account', 'credit', 'card', 'method']):
        return "Payment Information"
    
    # Default category
    return "Other Information"

def generate_form_json(form_name: str, fields: Dict[str, Dict[str, Any]]) -> Dict[str, Dict[str, Dict[str, Any]]]:
    """
    Generate a form JSON configuration.
    
    Args:
        form_name: Name of the form
        fields: Dictionary of form fields
        
    Returns:
        Dict: Form configuration JSON
    """
    return {form_name: fields}

def save_json_file(data: Dict, file_path: str) -> None:
    """
    Save data to a JSON file.
    
    Args:
        data: Data to save
        file_path: Path to save the JSON file
    """
    # Create directory if it doesn't exist
    os.makedirs(os.path.dirname(file_path), exist_ok=True)
    
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2)
        logger.info(f"Saved JSON file: {file_path}")
    except Exception as e:
        logger.error(f"Error saving JSON file {file_path}: {e}")

def update_field_mappings(form_name: str, fields: Dict[str, Dict[str, Any]], mappings_file: str) -> None:
    """
    Update the field mappings file with new fields.
    
    Args:
        form_name: Name of the form
        fields: Dictionary of form fields
        mappings_file: Path to the field mappings file
    """
    # Load existing mappings
    existing_mappings = {}
    if os.path.exists(mappings_file):
        try:
            with open(mappings_file, 'r', encoding='utf-8') as f:
                existing_mappings = json.load(f)
        except Exception as e:
            logger.error(f"Error loading mappings file: {e}")
    
    # For each field, update or add to mappings
    for field_name in fields:
        # Guess a standardized field name
        std_field = guess_standardized_field(field_name)
        
        if std_field:
            # If standardized field exists, add or update the mapping
            if std_field not in existing_mappings:
                existing_mappings[std_field] = {}
            
            existing_mappings[std_field][form_name] = field_name
    
    # Save updated mappings
    save_json_file(existing_mappings, mappings_file)

def guess_standardized_field(field_name: str) -> Optional[str]:
    """
    Guess a standardized field name for a form field.
    
    Args:
        field_name: Form field name
        
    Returns:
        Optional[str]: Guessed standardized field name or None
    """
    field_name_lower = field_name.lower()
    
    # Simple mapping for common fields
    field_mapping = {
        'first': 'firstName',
        'last': 'lastName',
        'name': 'fullName',
        'dob': 'dateOfBirth',
        'birth': 'dateOfBirth',
        'id': 'idNumber',
        'hkid': 'idNumber',
        'address': 'addressLine1',
        'city': 'city',
        'phone': 'phoneNumber',
        'email': 'email',
        'occupation': 'occupation',
        'job': 'occupation',
        'income': 'annualIncome',
        'salary': 'annualIncome',
        'marital': 'maritalStatus',
        'payment': 'paymentMethod',
        'bank': 'accountNumber',
        'account': 'accountNumber'
    }
    
    # Check for matches
    for keyword, std_field in field_mapping.items():
        if keyword in field_name_lower:
            return std_field
    
    return None

def update_standardized_fields(fields: Dict[str, Dict[str, Any]], std_fields_file: str) -> None:
    """
    Update the standardized fields file with potentially new fields.
    
    Args:
        fields: Dictionary of form fields
        std_fields_file: Path to the standardized fields file
    """
    # Load existing standardized fields
    existing_std_fields = {}
    if os.path.exists(std_fields_file):
        try:
            with open(std_fields_file, 'r', encoding='utf-8') as f:
                existing_std_fields = json.load(f)
        except Exception as e:
            logger.error(f"Error loading standardized fields file: {e}")
    
    # Find new standardized fields
    new_std_fields = set()
    for field_name in fields:
        std_field = guess_standardized_field(field_name)
        if std_field and std_field not in existing_std_fields:
            new_std_fields.add(std_field)
    
    # Update standardized fields file if needed
    if new_std_fields:
        logger.info(f"Adding new standardized fields: {new_std_fields}")
        
        # Add new fields
        for std_field in new_std_fields:
            existing_std_fields[std_field] = {
                "display_name": format_display_name(std_field),
                "category": guess_category(std_field),
                "required": True
            }
        
        # Save updated standardized fields
        save_json_file(existing_std_fields, std_fields_file)

def main():
    parser = argparse.ArgumentParser(description='PDF Form Field Reader')
    parser.add_argument('pdf_path', help='Path to the PDF file')
    parser.add_argument('--form-name', required=True, help='Name of the form (e.g., broker_agreement)')
    parser.add_argument('--config-dir', default='config', help='Path to the configuration directory')
    args = parser.parse_args()
    
    # Extract form fields
    fields = extract_form_fields(args.pdf_path)
    
    if not fields:
        logger.error("No fields found or error extracting fields. Check the PDF and try again.")
        return
    
    # Generate and save form configuration
    form_json = generate_form_json(args.form_name, fields)
    
    # Determine which form file to update
    if 'broker' in args.form_name:
        forms_file = os.path.join(args.config_dir, 'forms', 'broker_forms.json')
    elif 'boclife' in args.form_name:
        forms_file = os.path.join(args.config_dir, 'forms', 'boclife_forms.json')
    elif 'chubb' in args.form_name:
        forms_file = os.path.join(args.config_dir, 'forms', 'chubb_forms.json')
    else:
        forms_file = os.path.join(args.config_dir, 'forms', f'{args.form_name}.json')
    
    # Load existing form configuration if it exists
    existing_forms = {}
    if os.path.exists(forms_file):
        try:
            with open(forms_file, 'r', encoding='utf-8') as f:
                existing_forms = json.load(f)
        except Exception as e:
            logger.error(f"Error loading existing form configuration: {e}")
    
    # Update forms configuration
    existing_forms.update(form_json)
    
    # Save updated forms configuration
    save_json_file(existing_forms, forms_file)
    
    # Update field mappings
    mappings_file = os.path.join(args.config_dir, 'mappings', 'field_mappings.json')
    update_field_mappings(args.form_name, fields, mappings_file)
    
    # Update standardized fields
    std_fields_file = os.path.join(args.config_dir, 'standardized_fields.json')
    update_standardized_fields(fields, std_fields_file)
    
    logger.info(f"Successfully processed PDF and updated configuration files:")
    logger.info(f"  - Forms file: {forms_file}")
    logger.info(f"  - Mappings file: {mappings_file}")
    logger.info(f"  - Standardized fields file: {std_fields_file}")

if __name__ == "__main__":
    main()

// config/forms/boclife_forms.json
{
  "boclife_application": {
    "fill_30": {
      "required": true,
      "display_name": "Fill 30",
      "page_number": 1,
      "field_type": "text"
    },
    "fill_45": {
      "required": true,
      "display_name": "Fill 45",
      "page_number": 1,
      "field_type": "text"
    },
    "fill_46": {
      "required": true,
      "display_name": "Fill 46",
      "page_number": 1,
      "field_type": "text"
    },
    "fill_34_2": {
      "required": true,
      "display_name": "Fill 34 2",
      "page_number": 1,
      "field_type": "text"
    },
    "toggle_1_2": {
      "required": true,
      "display_name": "Toggle 1 2",
      "page_number": 1,
      "field_type": "button"
    },
    "toggle_3_2": {
      "required": true,
      "display_name": "Toggle 3 2",
      "page_number": 1,
      "field_type": "button"
    },
    "toggle_4_2": {
      "required": true,
      "display_name": "Toggle 4 2",
      "page_number": 1,
      "field_type": "button"
    },
    "toggle_2_2": {
      "required": true,
      "display_name": "Toggle 2 2",
      "page_number": 1,
      "field_type": "button"
    },
    "fill_49_2": {
      "required": true,
      "display_name": "Fill 49 2",
      "page_number": 1,
      "field_type": "text"
    },
    "i_4": {
      "required": true,
      "display_name": "I 4",
      "page_number": 1,
      "field_type": "text"
    },
    "toggle_5_2": {
      "required": true,
      "display_name": "Toggle 5 2",
      "page_number": 1,
      "field_type": "button"
    },
    "toggle_7_2": {
      "required": true,
      "display_name": "Toggle 7 2",
      "page_number": 1,
      "field_type": "button"
    },
    "toggle_10_2": {
      "required": true,
      "display_name": "Toggle 10 2",
      "page_number": 1,
      "field_type": "button"
    },
    "toggle_11_2": {
      "required": true,
      "display_name": "Toggle 11 2",
      "page_number": 1,
      "field_type": "button"
    },
    "toggle_13_2": {
      "required": true,
      "display_name": "Toggle 13 2",
      "page_number": 1,
      "field_type": "button"
    },
    "toggle_15_2": {
      "required": true,
      "display_name": "Toggle 15 2",
      "page_number": 1,
      "field_type": "button"
    },
    "toggle_18_2": {
      "required": true,
      "display_name": "Toggle 18 2",
      "page_number": 1,
      "field_type": "button"
    },
    "toggle_6_2": {
      "required": true,
      "display_name": "Toggle 6 2",
      "page_number": 1,
      "field_type": "button"
    },
    "toggle_8_2": {
      "required": true,
      "display_name": "Toggle 8 2",
      "page_number": 1,
      "field_type": "button"
    },
    "toggle_9_2": {
      "required": true,
      "display_name": "Toggle 9 2",
      "page_number": 1,
      "field_type": "button"
    },
    "toggle_12_2": {
      "required": true,
      "display_name": "Toggle 12 2",
      "page_number": 1,
      "field_type": "button"
    },
    "toggle_14_2": {
      "required": true,
      "display_name": "Toggle 14 2",
      "page_number": 1,
      "field_type": "button"
    },
    "toggle_16_2": {
      "required": true,
      "display_name": "Toggle 16 2",
      "page_number": 1,
      "field_type": "button"
    },
    "toggle_17_2": {
      "required": true,
      "display_name": "Toggle 17 2",
      "page_number": 1,
      "field_type": "button"
    },
    "Manual Work Involved Details": {
      "required": true,
      "display_name": "Manual work involved details",
      "page_number": 1,
      "field_type": "text"
    },
    "Manual Work Involved Details_2": {
      "required": true,
      "display_name": "Manual work involved details 2",
      "page_number": 1,
      "field_type": "text"
    },
    "fill_5": {
      "required": true,
      "display_name": "Fill 5",
      "page_number": 1,
      "field_type": "text"
    },
    "fill_6": {
      "required": true,
      "display_name": "Fill 6",
      "page_number": 1,
      "field_type": "text"
    },
    "fill_7": {
      "required": true,
      "display_name": "Fill 7",
      "page_number": 1,
      "field_type": "text"
    },
    "fill_8": {
      "required": true,
      "display_name": "Fill 8",
      "page_number": 1,
      "field_type": "text"
    },
    "Others Please Specify": {
      "required": true,
      "display_name": "Others please specify",
      "page_number": 1,
      "field_type": "text"
    },
    "Others Please Specify_2": {
      "required": true,
      "display_name": "Others please specify 2",
      "page_number": 1,
      "field_type": "text"
    },
    "fill_11": {
      "required": true,
      "display_name": "Fill 11",
      "page_number": 1,
      "field_type": "text"
    },
    "fill_12": {
      "required": true,
      "display_name": "Fill 12",
      "page_number": 1,
      "field_type": "text"
    },
    "annual salary and position of the previous job": {
      "required": true,
      "display_name": "Annual salary and position of the previous job",
      "page_number": 1,
      "field_type": "text"
    },
    "annual salary and position of the previous job_2": {
      "required": true,
      "display_name": "Annual salary and position of the previous job 2",
      "page_number": 1,
      "field_type": "text"
    },
    "toggle_22_2": {
      "required": true,
      "display_name": "Toggle 22 2",
      "page_number": 1,
      "field_type": "button"
    },
    "toggle_23_2": {
      "required": true,
      "display_name": "Toggle 23 2",
      "page_number": 1,
      "field_type": "button"
    },
    "toggle_24_2": {
      "required": true,
      "display_name": "Toggle 24 2",
      "page_number": 1,
      "field_type": "button"
    },
    "toggle_19_2": {
      "required": true,
      "display_name": "Toggle 19 2",
      "page_number": 1,
      "field_type": "button"
    },
    "toggle_20_2": {
      "required": true,
      "display_name": "Toggle 20 2",
      "page_number": 1,
      "field_type": "button"
    },
    "toggle_21_2": {
      "required": true,
      "display_name": "Toggle 21 2",
      "page_number": 1,
      "field_type": "button"
    },
    "toggle_26": {
      "required": true,
      "display_name": "Toggle 26",
      "page_number": 1,
      "field_type": "button"
    },
    "toggle_25": {
      "required": true,
      "display_name": "Toggle 25",
      "page_number": 1,
      "field_type": "button"
    },
    "Job title duties  salary before unemployment 1": {
      "required": true,
      "display_name": "Job title duties  salary before unemployment 1",
      "page_number": 1,
      "field_type": "text"
    },
    "Job title duties  salary before unemployment 2": {
      "required": true,
      "display_name": "Job title duties  salary before unemployment 2",
      "page_number": 1,
      "field_type": "text"
    },
    "Job title duties  salary before unemployment 1_2": {
      "required": true,
      "display_name": "Job title duties  salary before unemployment 1 2",
      "page_number": 1,
      "field_type": "text"
    },
    "Job title duties  salary before unemployment 2_2": {
      "required": true,
      "display_name": "Job title duties  salary before unemployment 2 2",
      "page_number": 1,
      "field_type": "text"
    },
    "Duration for unemployment": {
      "required": true,
      "display_name": "Duration for unemployment",
      "page_number": 1,
      "field_type": "text"
    },
    "Duration for unemployment_2": {
      "required": true,
      "display_name": "Duration for unemployment 2",
      "page_number": 1,
      "field_type": "text"
    },
    "Reason for unemployment": {
      "required": true,
      "display_name": "Reason for unemployment",
      "page_number": 1,
      "field_type": "text"
    },
    "Reason for unemployment_2": {
      "required": true,
      "display_name": "Reason for unemployment 2",
      "page_number": 1,
      "field_type": "text"
    },
    "Details of other source of income": {
      "required": true,
      "display_name": "Details of other source of income",
      "page_number": 1,
      "field_type": "text"
    },
    "Details of other source of income_2": {
      "required": true,
      "display_name": "Details of other source of income 2",
      "page_number": 1,
      "field_type": "text"
    },
    "fill_36": {
      "required": true,
      "display_name": "Fill 36",
      "page_number": 1,
      "field_type": "text"
    },
    "fill_37_2": {
      "required": true,
      "display_name": "Fill 37 2",
      "page_number": 1,
      "field_type": "text"
    },
    "fill_38": {
      "required": true,
      "display_name": "Fill 38",
      "page_number": 1,
      "field_type": "text"
    },
    "fill_39": {
      "required": true,
      "display_name": "Fill 39",
      "page_number": 1,
      "field_type": "text"
    },
    "fill_40_2": {
      "required": true,
      "display_name": "Fill 40 2",
      "page_number": 1,
      "field_type": "text"
    },
    "fill_54_2": {
      "required": true,
      "display_name": "Fill 54 2",
      "page_number": 1,
      "field_type": "text"
    },
    "toggle_27": {
      "required": true,
      "display_name": "Toggle 27",
      "page_number": 1,
      "field_type": "button"
    },
    "toggle_28": {
      "required": true,
      "display_name": "Toggle 28",
      "page_number": 1,
      "field_type": "button"
    },
    "toggle_29": {
      "required": true,
      "display_name": "Toggle 29",
      "page_number": 1,
      "field_type": "button"
    },
    "toggle_30": {
      "required": true,
      "display_name": "Toggle 30",
      "page_number": 1,
      "field_type": "button"
    },
    "undefined_23": {
      "required": true,
      "display_name": "Undefined 23",
      "page_number": 1,
      "field_type": "text"
    },
    "fill_41": {
      "required": true,
      "display_name": "Fill 41",
      "page_number": 1,
      "field_type": "text"
    },
    "fill_42": {
      "required": true,
      "display_name": "Fill 42",
      "page_number": 1,
      "field_type": "text"
    },
    "fill_55_2": {
      "required": true,
      "display_name": "Fill 55 2",
      "page_number": 1,
      "field_type": "text"
    },
    "toggle_31": {
      "required": true,
      "display_name": "Toggle 31",
      "page_number": 1,
      "field_type": "button"
    },
    "toggle_32": {
      "required": true,
      "display_name": "Toggle 32",
      "page_number": 1,
      "field_type": "button"
    },
    "toggle_33": {
      "required": true,
      "display_name": "Toggle 33",
      "page_number": 1,
      "field_type": "button"
    },
    "toggle_34": {
      "required": true,
      "display_name": "Toggle 34",
      "page_number": 1,
      "field_type": "button"
    },
    "fill_56_2": {
      "required": true,
      "display_name": "Fill 56 2",
      "page_number": 1,
      "field_type": "text"
    },
    "undefined_24": {
      "required": true,
      "display_name": "Undefined 24",
      "page_number": 1,
      "field_type": "button"
    },
    "toggle_36": {
      "required": true,
      "display_name": "Toggle 36",
      "page_number": 1,
      "field_type": "button"
    },
    "Payment Period": {
      "required": true,
      "display_name": "Payment period",
      "page_number": 1,
      "field_type": "text"
    },
    "toggle_37": {
      "required": true,
      "display_name": "Toggle 37",
      "page_number": 1,
      "field_type": "button"
    },
    "toggle_38": {
      "required": true,
      "display_name": "Toggle 38",
      "page_number": 1,
      "field_type": "button"
    },
    "undefined_54": {
      "required": true,
      "display_name": "Undefined 54",
      "page_number": 2,
      "field_type": "text"
    },
    "undefined_55": {
      "required": true,
      "display_name": "Undefined 55",
      "page_number": 2,
      "field_type": "text"
    },
    "undefined_56": {
      "required": true,
      "display_name": "Undefined 56",
      "page_number": 2,
      "field_type": "text"
    },
    "toggle_24_3": {
      "required": true,
      "display_name": "Toggle 24 3",
      "page_number": 2,
      "field_type": "button"
    },
    "toggle_25_2": {
      "required": true,
      "display_name": "Toggle 25 2",
      "page_number": 2,
      "field_type": "button"
    },
    "toggle_26_2": {
      "required": true,
      "display_name": "Toggle 26 2",
      "page_number": 2,
      "field_type": "button"
    },
    "toggle_27_2": {
      "required": true,
      "display_name": "Toggle 27 2",
      "page_number": 2,
      "field_type": "button"
    },
    "fill_57_2": {
      "required": true,
      "display_name": "Fill 57 2",
      "page_number": 2,
      "field_type": "text"
    },
    "Maturity policy no": {
      "required": true,
      "display_name": "Maturity policy no",
      "page_number": 2,
      "field_type": "text"
    },
    "Maturity policy currency": {
      "required": true,
      "display_name": "Maturity policy currency",
      "page_number": 2,
      "field_type": "text"
    },
    "Transfer amount": {
      "required": true,
      "display_name": "Transfer amount",
      "page_number": 2,
      "field_type": "text"
    },
    "undefined_57": {
      "required": true,
      "display_name": "Undefined 57",
      "page_number": 2,
      "field_type": "text"
    },
    "toggle_28_2": {
      "required": true,
      "display_name": "Toggle 28 2",
      "page_number": 2,
      "field_type": "button"
    },
    "Other payment arrangement": {
      "required": true,
      "display_name": "Other payment arrangement",
      "page_number": 2,
      "field_type": "text"
    },
    "fill_12_2": {
      "required": true,
      "display_name": "Fill 12 2",
      "page_number": 2,
      "field_type": "text"
    },
    "fill_59_2": {
      "required": true,
      "display_name": "Fill 59 2",
      "page_number": 2,
      "field_type": "text"
    },
    "fill_61_2": {
      "required": true,
      "display_name": "Fill 61 2",
      "page_number": 2,
      "field_type": "text"
    },
    "fill_62_2": {
      "required": true,
      "display_name": "Fill 62 2",
      "page_number": 2,
      "field_type": "text"
    },
    "fill_60_2": {
      "required": true,
      "display_name": "Fill 60 2",
      "page_number": 2,
      "field_type": "text"
    },
    "undefined_58": {
      "required": true,
      "display_name": "Undefined 58",
      "page_number": 2,
      "field_type": "text"
    },
    "toggle_29_2": {
      "required": true,
      "display_name": "Toggle 29 2",
      "page_number": 2,
      "field_type": "button"
    },
    "undefined_59": {
      "required": true,
      "display_name": "Undefined 59",
      "page_number": 2,
      "field_type": "text"
    },
    "toggle_32_2": {
      "required": true,
      "display_name": "Toggle 32 2",
      "page_number": 2,
      "field_type": "button"
    },
    "undefined_60": {
      "required": true,
      "display_name": "Undefined 60",
      "page_number": 2,
      "field_type": "text"
    },
    "toggle_35": {
      "required": true,
      "display_name": "Toggle 35",
      "page_number": 2,
      "field_type": "button"
    },
    "undefined_61": {
      "required": true,
      "display_name": "Undefined 61",
      "page_number": 2,
      "field_type": "text"
    },
    "toggle_38_2": {
      "required": true,
      "display_name": "Toggle 38 2",
      "page_number": 2,
      "field_type": "button"
    },
    "undefined_62": {
      "required": true,
      "display_name": "Undefined 62",
      "page_number": 2,
      "field_type": "text"
    },
    "toggle_30_2": {
      "required": true,
      "display_name": "Toggle 30 2",
      "page_number": 2,
      "field_type": "button"
    },
    "undefined_63": {
      "required": true,
      "display_name": "Undefined 63",
      "page_number": 2,
      "field_type": "text"
    },
    "toggle_33_2": {
      "required": true,
      "display_name": "Toggle 33 2",
      "page_number": 2,
      "field_type": "button"
    },
    "undefined_64": {
      "required": true,
      "display_name": "Undefined 64",
      "page_number": 2,
      "field_type": "text"
    },
    "toggle_36_2": {
      "required": true,
      "display_name": "Toggle 36 2",
      "page_number": 2,
      "field_type": "button"
    },
    "undefined_65": {
      "required": true,
      "display_name": "Undefined 65",
      "page_number": 2,
      "field_type": "text"
    },
    "toggle_39": {
      "required": true,
      "display_name": "Toggle 39",
      "page_number": 2,
      "field_type": "button"
    },
    "undefined_66": {
      "required": true,
      "display_name": "Undefined 66",
      "page_number": 2,
      "field_type": "text"
    },
    "toggle_31_2": {
      "required": true,
      "display_name": "Toggle 31 2",
      "page_number": 2,
      "field_type": "button"
    },
    "undefined_67": {
      "required": true,
      "display_name": "Undefined 67",
      "page_number": 2,
      "field_type": "text"
    },
    "toggle_34_2": {
      "required": true,
      "display_name": "Toggle 34 2",
      "page_number": 2,
      "field_type": "button"
    },
    "undefined_68": {
      "required": true,
      "display_name": "Undefined 68",
      "page_number": 2,
      "field_type": "text"
    },
    "toggle_37_2": {
      "required": true,
      "display_name": "Toggle 37 2",
      "page_number": 2,
      "field_type": "button"
    },
    "fill_77": {
      "required": true,
      "display_name": "Fill 77",
      "page_number": 2,
      "field_type": "text"
    },
    "undefined_69": {
      "required": true,
      "display_name": "Undefined 69",
      "page_number": 2,
      "field_type": "text"
    },
    "undefined_70": {
      "required": true,
      "display_name": "Undefined 70",
      "page_number": 2,
      "field_type": "text"
    },
    "fill_14": {
      "required": true,
      "display_name": "Fill 14",
      "page_number": 2,
      "field_type": "text"
    },
    "fill_15": {
      "required": true,
      "display_name": "Fill 15",
      "page_number": 2,
      "field_type": "text"
    },
    "fill_16": {
      "required": true,
      "display_name": "Fill 16",
      "page_number": 2,
      "field_type": "text"
    },
    "Nationality CountryRegion": {
      "required": true,
      "display_name": "Nationality country Region",
      "page_number": 3,
      "field_type": "text"
    },
    "Please provide detailed reasons": {
      "required": true,
      "display_name": "Please provide detailed reasons",
      "page_number": 3,
      "field_type": "text"
    },
    "undefined_71": {
      "required": true,
      "display_name": "Undefined 71",
      "page_number": 3,
      "field_type": "button"
    },
    "undefined_72": {
      "required": true,
      "display_name": "Undefined 72",
      "page_number": 3,
      "field_type": "text"
    },
    "undefined_73": {
      "required": true,
      "display_name": "Undefined 73",
      "page_number": 3,
      "field_type": "text"
    },
    "fill_4": {
      "required": true,
      "display_name": "Fill 4",
      "page_number": 3,
      "field_type": "text"
    },
    "undefined_74": {
      "required": true,
      "display_name": "Undefined 74",
      "page_number": 3,
      "field_type": "text"
    },
    "Former Name  Alias if any": {
      "required": true,
      "display_name": "Former name  alias if any",
      "page_number": 3,
      "field_type": "text"
    },
    "Relationship with that person": {
      "required": true,
      "display_name": "Relationship with that person",
      "page_number": 3,
      "field_type": "text"
    },
    "Name in English 1": {
      "required": true,
      "display_name": "Name in english 1",
      "page_number": 3,
      "field_type": "text"
    },
    "Name in English 2": {
      "required": true,
      "display_name": "Name in english 2",
      "page_number": 3,
      "field_type": "text"
    },
    "Name in English 3": {
      "required": true,
      "display_name": "Name in english 3",
      "page_number": 3,
      "field_type": "text"
    },
    "Name in English 4": {
      "required": true,
      "display_name": "Name in english 4",
      "page_number": 3,
      "field_type": "text"
    },
    "Name in Chinese 1": {
      "required": true,
      "display_name": "Name in chinese 1",
      "page_number": 3,
      "field_type": "text"
    },
    "Name in Chinese 2": {
      "required": true,
      "display_name": "Name in chinese 2",
      "page_number": 3,
      "field_type": "text"
    },
    "Name in Chinese 3": {
      "required": true,
      "display_name": "Name in chinese 3",
      "page_number": 3,
      "field_type": "text"
    },
    "Name in Chinese 4": {
      "required": true,
      "display_name": "Name in chinese 4",
      "page_number": 3,
      "field_type": "text"
    },
    "ID Card No  Passport No 1": {
      "required": true,
      "display_name": "Id card no  passport no 1",
      "page_number": 3,
      "field_type": "text"
    },
    "ID Card No  Passport No 2": {
      "required": true,
      "display_name": "Id card no  passport no 2",
      "page_number": 3,
      "field_type": "text"
    },
    "ID Card No  Passport No 3": {
      "required": true,
      "display_name": "Id card no  passport no 3",
      "page_number": 3,
      "field_type": "text"
    },
    "ID Card No  Passport No 4": {
      "required": true,
      "display_name": "Id card no  passport no 4",
      "page_number": 3,
      "field_type": "text"
    },
    "Relationship with Proposed Insured 1": {
      "required": true,
      "display_name": "Relationship with proposed insured 1",
      "page_number": 3,
      "field_type": "text"
    },
    "Relationship with Proposed Insured 2": {
      "required": true,
      "display_name": "Relationship with proposed insured 2",
      "page_number": 3,
      "field_type": "text"
    },
    "Relationship with Proposed Insured 3": {
      "required": true,
      "display_name": "Relationship with proposed insured 3",
      "page_number": 3,
      "field_type": "text"
    },
    "Relationship with Proposed Insured 4": {
      "required": true,
      "display_name": "Relationship with proposed insured 4",
      "page_number": 3,
      "field_type": "text"
    },
    "of Entitlement 1": {
      "required": true,
      "display_name": "Of entitlement 1",
      "page_number": 3,
      "field_type": "text"
    },
    "of Entitlement 2": {
      "required": true,
      "display_name": "Of entitlement 2",
      "page_number": 3,
      "field_type": "text"
    },
    "of Entitlement 3": {
      "required": true,
      "display_name": "Of entitlement 3",
      "page_number": 3,
      "field_type": "text"
    },
    "of Entitlement 4": {
      "required": true,
      "display_name": "Of entitlement 4",
      "page_number": 3,
      "field_type": "text"
    },
    "undefined_75": {
      "required": true,
      "display_name": "Undefined 75",
      "page_number": 3,
      "field_type": "text"
    },
    "undefined_76": {
      "required": true,
      "display_name": "Undefined 76",
      "page_number": 3,
      "field_type": "text"
    },
    "undefined_77": {
      "required": true,
      "display_name": "Undefined 77",
      "page_number": 3,
      "field_type": "text"
    },
    "undefined_78": {
      "required": true,
      "display_name": "Undefined 78",
      "page_number": 3,
      "field_type": "text"
    },
    "fill_34_3": {
      "required": true,
      "display_name": "Fill 34 3",
      "page_number": 3,
      "field_type": "text"
    },
    "fill_35_3": {
      "required": true,
      "display_name": "Fill 35 3",
      "page_number": 3,
      "field_type": "text"
    },
    "fill_36_2": {
      "required": true,
      "display_name": "Fill 36 2",
      "page_number": 3,
      "field_type": "text"
    },
    "fill_37_3": {
      "required": true,
      "display_name": "Fill 37 3",
      "page_number": 3,
      "field_type": "text"
    },
    "undefined_79": {
      "required": true,
      "display_name": "Undefined 79",
      "page_number": 3,
      "field_type": "text"
    },
    "undefined_80": {
      "required": true,
      "display_name": "Undefined 80",
      "page_number": 3,
      "field_type": "text"
    },
    "undefined_81": {
      "required": true,
      "display_name": "Undefined 81",
      "page_number": 3,
      "field_type": "text"
    },
    "undefined_82": {
      "required": true,
      "display_name": "Undefined 82",
      "page_number": 3,
      "field_type": "text"
    },
    "fill_38_2": {
      "required": true,
      "display_name": "Fill 38 2",
      "page_number": 3,
      "field_type": "text"
    },
    "fill_39_2": {
      "required": true,
      "display_name": "Fill 39 2",
      "page_number": 3,
      "field_type": "text"
    },
    "fill_40_4": {
      "required": true,
      "display_name": "Fill 40 4",
      "page_number": 3,
      "field_type": "text"
    },
    "fill_41_2": {
      "required": true,
      "display_name": "Fill 41 2",
      "page_number": 3,
      "field_type": "text"
    },
    "fill_42_2": {
      "required": true,
      "display_name": "Fill 42 2",
      "page_number": 3,
      "field_type": "text"
    },
    "fill_43_3": {
      "required": true,
      "display_name": "Fill 43 3",
      "page_number": 3,
      "field_type": "text"
    },
    "fill_44_2": {
      "required": true,
      "display_name": "Fill 44 2",
      "page_number": 3,
      "field_type": "text"
    },
    "undefined_83": {
      "required": true,
      "display_name": "Undefined 83",
      "page_number": 3,
      "field_type": "text"
    },
    "undefined_84": {
      "required": true,
      "display_name": "Undefined 84",
      "page_number": 3,
      "field_type": "text"
    },
    "undefined_85": {
      "required": true,
      "display_name": "Undefined 85",
      "page_number": 3,
      "field_type": "text"
    },
    "undefined_86": {
      "required": true,
      "display_name": "Undefined 86",
      "page_number": 3,
      "field_type": "text"
    },
    "fill_45_3": {
      "required": true,
      "display_name": "Fill 45 3",
      "page_number": 3,
      "field_type": "text"
    },
    "fill_46_3": {
      "required": true,
      "display_name": "Fill 46 3",
      "page_number": 3,
      "field_type": "text"
    },
    "fill_47_3": {
      "required": true,
      "display_name": "Fill 47 3",
      "page_number": 3,
      "field_type": "text"
    },
    "Name of countryregion reside": {
      "required": true,
      "display_name": "Name of countryregion reside",
      "page_number": 3,
      "field_type": "text"
    },
    "If YES please state": {
      "required": true,
      "display_name": "If yes please state",
      "page_number": 3,
      "field_type": "text"
    },
    "undefined_87": {
      "required": true,
      "display_name": "Undefined 87",
      "page_number": 3,
      "field_type": "text"
    },
    "undefined_88": {
      "required": true,
      "display_name": "Undefined 88",
      "page_number": 3,
      "field_type": "text"
    },
    "undefined_89": {
      "required": true,
      "display_name": "Undefined 89",
      "page_number": 3,
      "field_type": "text"
    },
    "undefined_90": {
      "required": true,
      "display_name": "Undefined 90",
      "page_number": 3,
      "field_type": "text"
    },
    "Duration of stay per weekmonthyear": {
      "required": true,
      "display_name": "Duration of stay per weekmonthyear",
      "page_number": 3,
      "field_type": "text"
    },
    "Details": {
      "required": true,
      "display_name": "Details",
      "page_number": 3,
      "field_type": "text"
    },
    "undefined_91": {
      "required": true,
      "display_name": "Undefined 91",
      "page_number": 3,
      "field_type": "text"
    },
    "undefined_92": {
      "required": true,
      "display_name": "Undefined 92",
      "page_number": 3,
      "field_type": "text"
    },
    "undefined_93": {
      "required": true,
      "display_name": "Undefined 93",
      "page_number": 3,
      "field_type": "text"
    },
    "undefined_94": {
      "required": true,
      "display_name": "Undefined 94",
      "page_number": 3,
      "field_type": "text"
    },
    "fill_32_2": {
      "required": true,
      "display_name": "Fill 32 2",
      "page_number": 3,
      "field_type": "text"
    },
    "undefined_95": {
      "required": true,
      "display_name": "Undefined 95",
      "page_number": 4,
      "field_type": "text"
    },
    "undefined_96": {
      "required": true,
      "display_name": "Undefined 96",
      "page_number": 4,
      "field_type": "text"
    },
    "undefined_97": {
      "required": true,
      "display_name": "Undefined 97",
      "page_number": 4,
      "field_type": "text"
    },
    "undefined_98": {
      "required": true,
      "display_name": "Undefined 98",
      "page_number": 4,
      "field_type": "text"
    },
    "undefined_99": {
      "required": true,
      "display_name": "Undefined 99",
      "page_number": 4,
      "field_type": "text"
    },
    "undefined_100": {
      "required": true,
      "display_name": "Undefined 100",
      "page_number": 4,
      "field_type": "text"
    },
    "fill_26": {
      "required": true,
      "display_name": "Fill 26",
      "page_number": 4,
      "field_type": "text"
    },
    "fill_27": {
      "required": true,
      "display_name": "Fill 27",
      "page_number": 4,
      "field_type": "text"
    },
    "fill_28_3": {
      "required": true,
      "display_name": "Fill 28 3",
      "page_number": 4,
      "field_type": "text"
    },
    "fill_29_2": {
      "required": true,
      "display_name": "Fill 29 2",
      "page_number": 4,
      "field_type": "text"
    },
    "fill_30_2": {
      "required": true,
      "display_name": "Fill 30 2",
      "page_number": 4,
      "field_type": "text"
    },
    "undefined_101": {
      "required": true,
      "display_name": "Undefined 101",
      "page_number": 4,
      "field_type": "text"
    },
    "undefined_102": {
      "required": true,
      "display_name": "Undefined 102",
      "page_number": 4,
      "field_type": "text"
    },
    "fill_31_3": {
      "required": true,
      "display_name": "Fill 31 3",
      "page_number": 4,
      "field_type": "text"
    },
    "fill_32_3": {
      "required": true,
      "display_name": "Fill 32 3",
      "page_number": 4,
      "field_type": "text"
    },
    "fill_33_2": {
      "required": true,
      "display_name": "Fill 33 2",
      "page_number": 4,
      "field_type": "text"
    },
    "fill_34_4": {
      "required": true,
      "display_name": "Fill 34 4",
      "page_number": 4,
      "field_type": "text"
    },
    "fill_35_4": {
      "required": true,
      "display_name": "Fill 35 4",
      "page_number": 4,
      "field_type": "text"
    },
    "undefined_103": {
      "required": true,
      "display_name": "Undefined 103",
      "page_number": 4,
      "field_type": "text"
    },
    "undefined_104": {
      "required": true,
      "display_name": "Undefined 104",
      "page_number": 4,
      "field_type": "text"
    },
    "fill_36_3": {
      "required": true,
      "display_name": "Fill 36 3",
      "page_number": 4,
      "field_type": "text"
    },
    "fill_37_4": {
      "required": true,
      "display_name": "Fill 37 4",
      "page_number": 4,
      "field_type": "text"
    },
    "fill_38_3": {
      "required": true,
      "display_name": "Fill 38 3",
      "page_number": 4,
      "field_type": "text"
    },
    "fill_39_3": {
      "required": true,
      "display_name": "Fill 39 3",
      "page_number": 4,
      "field_type": "text"
    },
    "fill_40_5": {
      "required": true,
      "display_name": "Fill 40 5",
      "page_number": 4,
      "field_type": "text"
    },
    "undefined_105": {
      "required": true,
      "display_name": "Undefined 105",
      "page_number": 4,
      "field_type": "text"
    },
    "undefined_106": {
      "required": true,
      "display_name": "Undefined 106",
      "page_number": 4,
      "field_type": "text"
    },
    "fill_41_3": {
      "required": true,
      "display_name": "Fill 41 3",
      "page_number": 4,
      "field_type": "text"
    },
    "fill_42_3": {
      "required": true,
      "display_name": "Fill 42 3",
      "page_number": 4,
      "field_type": "text"
    },
    "fill_43_4": {
      "required": true,
      "display_name": "Fill 43 4",
      "page_number": 4,
      "field_type": "text"
    },
    "fill_44_3": {
      "required": true,
      "display_name": "Fill 44 3",
      "page_number": 4,
      "field_type": "text"
    },
    "fill_45_4": {
      "required": true,
      "display_name": "Fill 45 4",
      "page_number": 4,
      "field_type": "text"
    },
    "fill_111": {
      "required": true,
      "display_name": "Fill 111",
      "page_number": 4,
      "field_type": "text"
    },
    "fill_108": {
      "required": true,
      "display_name": "Fill 108",
      "page_number": 4,
      "field_type": "text"
    },
    "undefined_107": {
      "required": true,
      "display_name": "Undefined 107",
      "page_number": 4,
      "field_type": "text"
    },
    "undefined_108": {
      "required": true,
      "display_name": "Undefined 108",
      "page_number": 4,
      "field_type": "text"
    },
    "Height": {
      "required": true,
      "display_name": "Height",
      "page_number": 4,
      "field_type": "text"
    },
    "ft": {
      "required": true,
      "display_name": "Ft",
      "page_number": 4,
      "field_type": "text"
    },
    "or": {
      "required": true,
      "display_name": "Or",
      "page_number": 4,
      "field_type": "text"
    },
    "Height_2": {
      "required": true,
      "display_name": "Height 2",
      "page_number": 4,
      "field_type": "text"
    },
    "ft_2": {
      "required": true,
      "display_name": "Ft 2",
      "page_number": 4,
      "field_type": "text"
    },
    "or_2": {
      "required": true,
      "display_name": "Or 2",
      "page_number": 4,
      "field_type": "text"
    },
    "Weight": {
      "required": true,
      "display_name": "Weight",
      "page_number": 4,
      "field_type": "text"
    },
    "or_3": {
      "required": true,
      "display_name": "Or 3",
      "page_number": 4,
      "field_type": "text"
    },
    "Weight_2": {
      "required": true,
      "display_name": "Weight 2",
      "page_number": 4,
      "field_type": "text"
    },
    "or_4": {
      "required": true,
      "display_name": "Or 4",
      "page_number": 4,
      "field_type": "text"
    },
    "undefined_169": {
      "required": true,
      "display_name": "Undefined 169",
      "page_number": 10,
      "field_type": "text"
    },
    "undefined_170": {
      "required": true,
      "display_name": "Undefined 170",
      "page_number": 10,
      "field_type": "text"
    },
    "fill_5_3": {
      "required": true,
      "display_name": "Fill 5 3",
      "page_number": 10,
      "field_type": "text"
    },
    "undefined_171": {
      "required": true,
      "display_name": "Undefined 171",
      "page_number": 10,
      "field_type": "text"
    },
    "toggle_1_4": {
      "required": true,
      "display_name": "Toggle 1 4",
      "page_number": 11,
      "field_type": "button"
    },
    "toggle_2_4": {
      "required": true,
      "display_name": "Toggle 2 4",
      "page_number": 11,
      "field_type": "button"
    },
    "toggle_3_4": {
      "required": true,
      "display_name": "Toggle 3 4",
      "page_number": 11,
      "field_type": "button"
    },
    "fill_8_3": {
      "required": true,
      "display_name": "Fill 8 3",
      "page_number": 11,
      "field_type": "text"
    },
    "undefined_172": {
      "required": true,
      "display_name": "Undefined 172",
      "page_number": 15,
      "field_type": "text"
    },
    "fill_16_3": {
      "required": true,
      "display_name": "Fill 16 3",
      "page_number": 15,
      "field_type": "text"
    },
    "toggle_1_5": {
      "required": true,
      "display_name": "Toggle 1 5",
      "page_number": 15,
      "field_type": "button"
    },
    "toggle_2_5": {
      "required": true,
      "display_name": "Toggle 2 5",
      "page_number": 15,
      "field_type": "button"
    },
    "toggle_3_5": {
      "required": true,
      "display_name": "Toggle 3 5",
      "page_number": 15,
      "field_type": "button"
    },
    "Others Please specify": {
      "required": true,
      "display_name": "Others please specify",
      "page_number": 15,
      "field_type": "text"
    },
    "toggle_4_4": {
      "required": true,
      "display_name": "Toggle 4 4",
      "page_number": 15,
      "field_type": "button"
    },
    "toggle_5_3": {
      "required": true,
      "display_name": "Toggle 5 3",
      "page_number": 15,
      "field_type": "button"
    },
    "toggle_6_3": {
      "required": true,
      "display_name": "Toggle 6 3",
      "page_number": 15,
      "field_type": "button"
    },
    "Others Please": {
      "required": true,
      "display_name": "Others please",
      "page_number": 15,
      "field_type": "text"
    },
    "toggle_7_3": {
      "required": true,
      "display_name": "Toggle 7 3",
      "page_number": 15,
      "field_type": "button"
    },
    "toggle_8_4": {
      "required": true,
      "display_name": "Toggle 8 4",
      "page_number": 15,
      "field_type": "button"
    },
    "toggle_9_3": {
      "required": true,
      "display_name": "Toggle 9 3",
      "page_number": 15,
      "field_type": "button"
    },
    "1_7": {
      "required": true,
      "display_name": "1 7",
      "page_number": 15,
      "field_type": "text"
    },
    "2_7": {
      "required": true,
      "display_name": "2 7",
      "page_number": 15,
      "field_type": "text"
    },
    "3_4": {
      "required": true,
      "display_name": "3 4",
      "page_number": 15,
      "field_type": "text"
    },
    "undefined_174": {
      "required": true,
      "display_name": "Undefined 174",
      "page_number": 15,
      "field_type": "text"
    },
    "1_8": {
      "required": true,
      "display_name": "1 8",
      "page_number": 15,
      "field_type": "text"
    },
    "2_8": {
      "required": true,
      "display_name": "2 8",
      "page_number": 15,
      "field_type": "text"
    },
    "toggle_1_6": {
      "required": true,
      "display_name": "Toggle 1 6",
      "page_number": 16,
      "field_type": "button"
    },
    "toggle_4_5": {
      "required": true,
      "display_name": "Toggle 4 5",
      "page_number": 16,
      "field_type": "button"
    },
    "toggle_6_4": {
      "required": true,
      "display_name": "Toggle 6 4",
      "page_number": 16,
      "field_type": "button"
    },
    "toggle_8_5": {
      "required": true,
      "display_name": "Toggle 8 5",
      "page_number": 16,
      "field_type": "button"
    },
    "toggle_2_6": {
      "required": true,
      "display_name": "Toggle 2 6",
      "page_number": 16,
      "field_type": "button"
    },
    "toggle_3_6": {
      "required": true,
      "display_name": "Toggle 3 6",
      "page_number": 16,
      "field_type": "button"
    },
    "toggle_5_4": {
      "required": true,
      "display_name": "Toggle 5 4",
      "page_number": 16,
      "field_type": "button"
    },
    "toggle_7_4": {
      "required": true,
      "display_name": "Toggle 7 4",
      "page_number": 16,
      "field_type": "button"
    },
    "A": {
      "required": true,
      "display_name": "A",
      "page_number": 16,
      "field_type": "button"
    },
    "B": {
      "required": true,
      "display_name": "B",
      "page_number": 16,
      "field_type": "button"
    },
    "C": {
      "required": true,
      "display_name": "C",
      "page_number": 16,
      "field_type": "button"
    },
    "fill_4_6": {
      "required": true,
      "display_name": "Fill 4 6",
      "page_number": 16,
      "field_type": "text"
    },
    "fill_5_6": {
      "required": true,
      "display_name": "Fill 5 6",
      "page_number": 16,
      "field_type": "text"
    },
    "A_2": {
      "required": true,
      "display_name": "A 2",
      "page_number": 16,
      "field_type": "button"
    },
    "B_2": {
      "required": true,
      "display_name": "B 2",
      "page_number": 16,
      "field_type": "button"
    },
    "C_2": {
      "required": true,
      "display_name": "C 2",
      "page_number": 16,
      "field_type": "button"
    },
    "fill_6_4": {
      "required": true,
      "display_name": "Fill 6 4",
      "page_number": 16,
      "field_type": "text"
    },
    "Remark": {
      "required": true,
      "display_name": "Remark",
      "page_number": 16,
      "field_type": "text"
    },
    "fill_8_5": {
      "required": true,
      "display_name": "Fill 8 5",
      "page_number": 18,
      "field_type": "text"
    },
    "fill_9_3": {
      "required": true,
      "display_name": "Fill 9 3",
      "page_number": 18,
      "field_type": "text"
    },
    "toggle_1_7": {
      "required": true,
      "display_name": "Toggle 1 7",
      "page_number": 18,
      "field_type": "button"
    },
    "toggle_2_7": {
      "required": true,
      "display_name": "Toggle 2 7",
      "page_number": 18,
      "field_type": "button"
    },
    "Relationship with the Policy Owner": {
      "required": true,
      "display_name": "Relationship with the policy owner",
      "page_number": 18,
      "field_type": "text"
    },
    "Reason for payment": {
      "required": true,
      "display_name": "Reason for payment",
      "page_number": 18,
      "field_type": "text"
    },
    "NationalityCountryRegion": {
      "required": true,
      "display_name": "Nationality Country Region",
      "page_number": 18,
      "field_type": "text"
    },
    "undefined_177": {
      "required": true,
      "display_name": "Undefined 177",
      "page_number": 18,
      "field_type": "text"
    },
    "fill_3_6": {
      "required": true,
      "display_name": "Fill 3 6",
      "page_number": 19,
      "field_type": "text"
    },
    "toggle_1_8": {
      "required": true,
      "display_name": "Toggle 1 8",
      "page_number": 19,
      "field_type": "button"
    },
    "toggle_2_8": {
      "required": true,
      "display_name": "Toggle 2 8",
      "page_number": 19,
      "field_type": "button"
    },
    "Visa Card": {
      "required": true,
      "display_name": "Visa card",
      "page_number": 19,
      "field_type": "button"
    },
    "BOC Cup Dual Currency": {
      "required": true,
      "display_name": "Boc cup dual currency",
      "page_number": 19,
      "field_type": "button"
    },
    "Master Card": {
      "required": true,
      "display_name": "Master card",
      "page_number": 19,
      "field_type": "button"
    },
    "fill_26_2": {
      "required": true,
      "display_name": "Fill 26 2",
      "page_number": 20,
      "field_type": "text"
    },
    "fill_27_2": {
      "required": true,
      "display_name": "Fill 27 2",
      "page_number": 20,
      "field_type": "text"
    },
    "fill_28_4": {
      "required": true,
      "display_name": "Fill 28 4",
      "page_number": 20,
      "field_type": "text"
    },
    "fill_29_3": {
      "required": true,
      "display_name": "Fill 29 3",
      "page_number": 20,
      "field_type": "text"
    },
    "fill_41_4": {
      "required": true,
      "display_name": "Fill 41 4",
      "page_number": 20,
      "field_type": "text"
    },
    "fill_30_3": {
      "required": true,
      "display_name": "Fill 30 3",
      "page_number": 20,
      "field_type": "text"
    },
    "fill_31_5": {
      "required": true,
      "display_name": "Fill 31 5",
      "page_number": 20,
      "field_type": "text"
    },
    "fill_32_4": {
      "required": true,
      "display_name": "Fill 32 4",
      "page_number": 20,
      "field_type": "text"
    },
    "fill_33_3": {
      "required": true,
      "display_name": "Fill 33 3",
      "page_number": 20,
      "field_type": "text"
    },
    "fill_35_5": {
      "required": true,
      "display_name": "Fill 35 5",
      "page_number": 20,
      "field_type": "text"
    },
    "Not applicable": {
      "required": true,
      "display_name": "Not applicable",
      "page_number": 20,
      "field_type": "text"
    },
    "toggle_1_9": {
      "required": true,
      "display_name": "Toggle 1 9",
      "page_number": 20,
      "field_type": "button"
    },
    "Not applicable_2": {
      "required": true,
      "display_name": "Not applicable 2",
      "page_number": 20,
      "field_type": "text"
    },
    "toggle_3_7": {
      "required": true,
      "display_name": "Toggle 3 7",
      "page_number": 20,
      "field_type": "button"
    },
    "toggle_4_6": {
      "required": true,
      "display_name": "Toggle 4 6",
      "page_number": 20,
      "field_type": "button"
    },
    "toggle_2_9": {
      "required": true,
      "display_name": "Toggle 2 9",
      "page_number": 20,
      "field_type": "button"
    },
    "toggle_5_5": {
      "required": true,
      "display_name": "Toggle 5 5",
      "page_number": 20,
      "field_type": "button"
    },
    "toggle_6_5": {
      "required": true,
      "display_name": "Toggle 6 5",
      "page_number": 20,
      "field_type": "button"
    },
    "undefined_178": {
      "required": true,
      "display_name": "Undefined 178",
      "page_number": 20,
      "field_type": "text"
    },
    "toggle_7_5": {
      "required": true,
      "display_name": "Toggle 7 5",
      "page_number": 20,
      "field_type": "button"
    },
    "toggle_8_6": {
      "required": true,
      "display_name": "Toggle 8 6",
      "page_number": 20,
      "field_type": "button"
    },
    "toggle_9_4": {
      "required": true,
      "display_name": "Toggle 9 4",
      "page_number": 20,
      "field_type": "button"
    },
    "toggle_10_4": {
      "required": true,
      "display_name": "Toggle 10 4",
      "page_number": 20,
      "field_type": "button"
    },
    "toggle_11_3": {
      "required": true,
      "display_name": "Toggle 11 3",
      "page_number": 20,
      "field_type": "button"
    },
    "toggle_12_3": {
      "required": true,
      "display_name": "Toggle 12 3",
      "page_number": 20,
      "field_type": "button"
    },
    "toggle_13_3": {
      "required": true,
      "display_name": "Toggle 13 3",
      "page_number": 20,
      "field_type": "button"
    },
    "toggle_15_3": {
      "required": true,
      "display_name": "Toggle 15 3",
      "page_number": 20,
      "field_type": "button"
    },
    "toggle_14_4": {
      "required": true,
      "display_name": "Toggle 14 4",
      "page_number": 20,
      "field_type": "button"
    },
    "toggle_16_3": {
      "required": true,
      "display_name": "Toggle 16 3",
      "page_number": 20,
      "field_type": "button"
    },
    "fill_2_7": {
      "required": true,
      "display_name": "Fill 2 7",
      "page_number": 20,
      "field_type": "text"
    },
    "toggle_17_4": {
      "required": true,
      "display_name": "Toggle 17 4",
      "page_number": 20,
      "field_type": "button"
    },
    "toggle_18_4": {
      "required": true,
      "display_name": "Toggle 18 4",
      "page_number": 20,
      "field_type": "button"
    },
    "toggle_19_4": {
      "required": true,
      "display_name": "Toggle 19 4",
      "page_number": 20,
      "field_type": "button"
    },
    "toggle_20_4": {
      "required": true,
      "display_name": "Toggle 20 4",
      "page_number": 20,
      "field_type": "button"
    },
    "toggle_21_3": {
      "required": true,
      "display_name": "Toggle 21 3",
      "page_number": 20,
      "field_type": "button"
    },
    "toggle_22_3": {
      "required": true,
      "display_name": "Toggle 22 3",
      "page_number": 20,
      "field_type": "button"
    },
    "toggle_23_3": {
      "required": true,
      "display_name": "Toggle 23 3",
      "page_number": 20,
      "field_type": "button"
    },
    "undefined_179": {
      "required": true,
      "display_name": "Undefined 179",
      "page_number": 20,
      "field_type": "text"
    },
    "undefined_180": {
      "required": true,
      "display_name": "Undefined 180",
      "page_number": 20,
      "field_type": "text"
    },
    "undefined_181": {
      "required": true,
      "display_name": "Undefined 181",
      "page_number": 20,
      "field_type": "text"
    },
    "undefined_182": {
      "required": true,
      "display_name": "Undefined 182",
      "page_number": 20,
      "field_type": "text"
    },
    "undefined_183": {
      "required": true,
      "display_name": "Undefined 183",
      "page_number": 20,
      "field_type": "text"
    },
    "fill_9_4": {
      "required": true,
      "display_name": "Fill 9 4",
      "page_number": 20,
      "field_type": "text"
    },
    "Name of assets provider": {
      "required": true,
      "display_name": "Name of assets provider",
      "page_number": 20,
      "field_type": "text"
    },
    "Relationship with Policy Owner": {
      "required": true,
      "display_name": "Relationship with policy owner",
      "page_number": 20,
      "field_type": "text"
    },
    "Job position Industry and Name of company": {
      "required": true,
      "display_name": "Job position industry and name of company",
      "page_number": 20,
      "field_type": "text"
    },
    "Average of annual income": {
      "required": true,
      "display_name": "Average of annual income",
      "page_number": 20,
      "field_type": "text"
    },
    "Other annual income": {
      "required": true,
      "display_name": "Other annual income",
      "page_number": 20,
      "field_type": "text"
    },
    "Other source of income": {
      "required": true,
      "display_name": "Other source of income",
      "page_number": 20,
      "field_type": "text"
    },
    "HKD": {
      "required": true,
      "display_name": "Hkd",
      "page_number": 20,
      "field_type": "text"
    },
    "Father HKD": {
      "required": true,
      "display_name": "Father hkd",
      "page_number": 20,
      "field_type": "text"
    },
    "MotherHKD": {
      "required": true,
      "display_name": "Mother Hkd",
      "page_number": 20,
      "field_type": "text"
    },
    "toggle_24_4": {
      "required": true,
      "display_name": "Toggle 24 4",
      "page_number": 20,
      "field_type": "button"
    },
    "toggle_25_3": {
      "required": true,
      "display_name": "Toggle 25 3",
      "page_number": 20,
      "field_type": "button"
    },
    "toggle_26_3": {
      "required": true,
      "display_name": "Toggle 26 3",
      "page_number": 20,
      "field_type": "button"
    },
    "sum insured of the life insurance policyies": {
      "required": true,
      "display_name": "Sum insured of the life insurance policyies",
      "page_number": 20,
      "field_type": "text"
    },
    "i_5": {
      "required": true,
      "display_name": "I 5",
      "page_number": 20,
      "field_type": "button"
    },
    "toggle_29_3": {
      "required": true,
      "display_name": "Toggle 29 3",
      "page_number": 20,
      "field_type": "button"
    },
    "fill_38_4": {
      "required": true,
      "display_name": "Fill 38 4",
      "page_number": 20,
      "field_type": "text"
    },
    "toggle_28_3": {
      "required": true,
      "display_name": "Toggle 28 3",
      "page_number": 20,
      "field_type": "button"
    },
    "If Yes please provide the reason": {
      "required": true,
      "display_name": "If yes please provide the reason",
      "page_number": 20,
      "field_type": "text"
    },
    "toggle_30_3": {
      "required": true,
      "display_name": "Toggle 30 3",
      "page_number": 20,
      "field_type": "button"
    },
    "toggle_31_3": {
      "required": true,
      "display_name": "Toggle 31 3",
      "page_number": 20,
      "field_type": "button"
    },
    "toggle_32_3": {
      "required": true,
      "display_name": "Toggle 32 3",
      "page_number": 20,
      "field_type": "button"
    },
    "If yes please give details": {
      "required": true,
      "display_name": "If yes please give details",
      "page_number": 20,
      "field_type": "text"
    },
    "fill_22_4": {
      "required": true,
      "display_name": "Fill 22 4",
      "page_number": 20,
      "field_type": "text"
    },
    "fill_24": {
      "required": true,
      "display_name": "Fill 24",
      "page_number": 20,
      "field_type": "text"
    },
    "campaignCode": {
      "required": true,
      "display_name": "Campaign Code",
      "page_number": 0,
      "field_type": "text"
    },
    "brokerName": {
      "required": true,
      "display_name": "Broker Name",
      "page_number": 0,
      "field_type": "text"
    },
    "brokerCode": {
      "required": true,
      "display_name": "Broker Code",
      "page_number": 0,
      "field_type": "text"
    },
    "TR Name": {
      "required": true,
      "display_name": "Tr name",
      "page_number": 0,
      "field_type": "text"
    },
    "TR IA Number": {
      "required": true,
      "display_name": "Tr ia number",
      "page_number": 0,
      "field_type": "text"
    },
    "TR Phone Number": {
      "required": true,
      "display_name": "Tr phone number",
      "page_number": 0,
      "field_type": "text"
    },
    "fullNameChinese": {
      "required": true,
      "display_name": "Full Name Chinese",
      "page_number": 0,
      "field_type": "text"
    },
    "formerName": {
      "required": true,
      "display_name": "Former Name",
      "page_number": 0,
      "field_type": "text"
    },
    "DOB_Y": {
      "required": true,
      "display_name": "Dob Y",
      "page_number": 0,
      "field_type": "text"
    },
    "DOB_M": {
      "required": true,
      "display_name": "Dob M",
      "page_number": 0,
      "field_type": "text"
    },
    "DOB_D": {
      "required": true,
      "display_name": "Dob D",
      "page_number": 0,
      "field_type": "text"
    },
    "HKID": {
      "required": true,
      "display_name": "Hkid",
      "page_number": 0,
      "field_type": "text"
    },
    "birthplace": {
      "required": true,
      "display_name": "Birthplace",
      "page_number": 0,
      "field_type": "text"
    },
    "addressFlat": {
      "required": true,
      "display_name": "Address Flat",
      "page_number": 0,
      "field_type": "text"
    },
    "addressFloor": {
      "required": true,
      "display_name": "Address Floor",
      "page_number": 0,
      "field_type": "text"
    },
    "addressBlock": {
      "required": true,
      "display_name": "Address Block",
      "page_number": 0,
      "field_type": "text"
    },
    "addressBuilding": {
      "required": true,
      "display_name": "Address Building",
      "page_number": 0,
      "field_type": "text"
    },
    "addressStreet": {
      "required": true,
      "display_name": "Address Street",
      "page_number": 0,
      "field_type": "text"
    },
    "addressDistrict": {
      "required": true,
      "display_name": "Address District",
      "page_number": 0,
      "field_type": "text"
    },
    "addressCountry": {
      "required": true,
      "display_name": "Address Country",
      "page_number": 0,
      "field_type": "text"
    },
    "officePhoneNumber": {
      "required": true,
      "display_name": "Office Phone Number",
      "page_number": 0,
      "field_type": "text"
    },
    "Email": {
      "required": true,
      "display_name": "Email",
      "page_number": 0,
      "field_type": "text"
    },
    "correspondenceAddress": {
      "required": true,
      "display_name": "Correspondence Address",
      "page_number": 0,
      "field_type": "text"
    },
    "fullAddress": {
      "required": true,
      "display_name": "Full Address",
      "page_number": 0,
      "field_type": "text"
    },
    "education": {
      "required": true,
      "display_name": "Education",
      "page_number": 0,
      "field_type": "text"
    },
    "TR Name 2": {
      "required": true,
      "display_name": "Tr name 2",
      "page_number": 11,
      "field_type": "text"
    },
    "TR Name 3": {
      "required": true,
      "display_name": "Tr name 3",
      "page_number": 13,
      "field_type": "text"
    },
    "lastNameChinese": {
      "required": true,
      "display_name": "Last Name Chinese",
      "page_number": 15,
      "field_type": "text"
    },
    "lastName": {
      "required": true,
      "display_name": "Last Name",
      "page_number": 15,
      "field_type": "text"
    },
    "firstName": {
      "required": true,
      "display_name": "First Name",
      "page_number": 15,
      "field_type": "text"
    },
    "firstNameChinese": {
      "required": true,
      "display_name": "First Name Chinese",
      "page_number": 15,
      "field_type": "text"
    },
    "HKID 2": {
      "required": true,
      "display_name": "Hkid 2",
      "page_number": 15,
      "field_type": "text"
    },
    "DOB": {
      "required": true,
      "display_name": "Dob",
      "page_number": 15,
      "field_type": "text"
    },
    "taxJurisdiction": {
      "required": true,
      "display_name": "Tax Jurisdiction",
      "page_number": 16,
      "field_type": "text"
    },
    "fullName 2": {
      "required": true,
      "display_name": "Full Name 2",
      "page_number": 17,
      "field_type": "text"
    },
    "fullName 3": {
      "required": true,
      "display_name": "Full Name 3",
      "page_number": 19,
      "field_type": "text"
    },
    "TR IA Number 3": {
      "required": true,
      "display_name": "Tr ia number 3",
      "page_number": 20,
      "field_type": "text"
    },
    "numberOfDependents": {
      "required": true,
      "display_name": "Number Of Dependents",
      "page_number": 1,
      "field_type": "text"
    },
    "netLiquidAssets": {
      "required": true,
      "display_name": "Net Liquid Assets",
      "page_number": 1,
      "field_type": "text"
    },
    "fill_32": {
      "required": true,
      "display_name": "Fill 32",
      "page_number": 1,
      "field_type": "text"
    },
    "occupation": {
      "required": true,
      "display_name": "Occupation",
      "page_number": 1,
      "field_type": "text"
    },
    "workIndustry": {
      "required": true,
      "display_name": "Work Industry",
      "page_number": 1,
      "field_type": "text"
    },
    "exployerName": {
      "required": true,
      "display_name": "Exployer Name",
      "page_number": 1,
      "field_type": "text"
    },
    "officeFullAddress": {
      "required": true,
      "display_name": "Office Full Address",
      "page_number": 1,
      "field_type": "text"
    },
    "monthlyIncome": {
      "required": true,
      "display_name": "Monthly Income",
      "page_number": 1,
      "field_type": "text"
    },
    "exactDuties": {
      "required": true,
      "display_name": "Exact Duties",
      "page_number": 1,
      "field_type": "text"
    },
    "fill_107": {
      "required": true,
      "display_name": "Fill 107",
      "page_number": 4,
      "field_type": "text"
    },
    "US TIN": {
      "required": true,
      "display_name": "Us tin",
      "page_number": 16,
      "field_type": "text"
    },
    "reportSourceOfFund": {
      "required": true,
      "display_name": "Report Source Of Fund",
      "page_number": 20,
      "field_type": "text"
    },
    "intendOverseasCountry": {
      "required": true,
      "display_name": "Intend Overseas Country",
      "page_number": 3,
      "field_type": "text"
    },
    "applyOnBehalfReason": {
      "required": true,
      "display_name": "Apply On Behalf Reason",
      "page_number": 3,
      "field_type": "text"
    },
    "thirdPartyPayorReason": {
      "required": true,
      "display_name": "Third Party Payor Reason",
      "page_number": 2,
      "field_type": "text"
    },
    "undefined_53": {
      "required": true,
      "display_name": "Undefined 53",
      "page_number": 2,
      "field_type": "text"
    },
    "parttimeOccupation": {
      "required": true,
      "display_name": "Parttime Occupation",
      "page_number": 1,
      "field_type": "text"
    },
    "parttimeOccupation2": {
      "required": true,
      "display_name": "Parttime Occupation2",
      "page_number": 1,
      "field_type": "text"
    },
    "nationality": {
      "required": true,
      "display_name": "Nationality",
      "page_number": 0,
      "field_type": "text"
    },
    "Payor Date of Birth": {
      "required": true,
      "display_name": "Payor date of birth",
      "page_number": 18,
      "field_type": "text"
    },
    "fullName": {
      "required": true,
      "display_name": "Full Name",
      "page_number": 0,
      "field_type": "text"
    },
    "HKID TIN": {
      "required": true,
      "display_name": "Hkid tin",
      "page_number": 16,
      "field_type": "text"
    },
    "fullName 4": {
      "required": true,
      "display_name": "Full Name 4",
      "page_number": 18,
      "field_type": "text"
    }
  },
  "boclife_fna": {
    "preferences of the applicant": {
      "required": true,
      "display_name": "Preferences of the applicant",
      "page_number": 2,
      "field_type": "text"
    },
    "monthlySalary": {
      "required": true,
      "display_name": "Monthly Salary",
      "page_number": 0,
      "field_type": "text"
    },
    "monthlyOtherIncome": {
      "required": true,
      "display_name": "Monthly Other Income",
      "page_number": 0,
      "field_type": "text"
    },
    "monthlyExpenses": {
      "required": true,
      "display_name": "Monthly Expenses",
      "page_number": 0,
      "field_type": "text"
    },
    "monthlyNetIncome": {
      "required": true,
      "display_name": "Monthly Net Income",
      "page_number": 0,
      "field_type": "text"
    },
    "monthlyIncomePostRetirement": {
      "required": true,
      "display_name": "Monthly Income Post Retirement",
      "page_number": 0,
      "field_type": "text"
    },
    "liquidAssetPostRetirement": {
      "required": true,
      "display_name": "Liquid Asset Post Retirement",
      "page_number": 0,
      "field_type": "text"
    },
    "netLiquidAsset": {
      "required": true,
      "display_name": "Net Liquid Asset",
      "page_number": 0,
      "field_type": "text"
    },
    "fullNameChinese": {
      "required": true,
      "display_name": "Full Name Chinese",
      "page_number": 0,
      "field_type": "text"
    },
    "DOB": {
      "required": true,
      "display_name": "Dob",
      "page_number": 0,
      "field_type": "text"
    },
    "HKID": {
      "required": true,
      "display_name": "Hkid",
      "page_number": 0,
      "field_type": "text"
    },
    "occupation": {
      "required": true,
      "display_name": "Occupation",
      "page_number": 0,
      "field_type": "text"
    },
    "fullName 2": {
      "required": true,
      "display_name": "Full Name 2",
      "page_number": 3,
      "field_type": "text"
    },
    "TR Name": {
      "required": true,
      "display_name": "Tr name",
      "page_number": 3,
      "field_type": "text"
    },
    "TR Title": {
      "required": true,
      "display_name": "Tr title",
      "page_number": 3,
      "field_type": "text"
    },
    "TR IA Number": {
      "required": true,
      "display_name": "Tr ia number",
      "page_number": 3,
      "field_type": "text"
    },
    "TR Phone Number": {
      "required": true,
      "display_name": "Tr phone number",
      "page_number": 3,
      "field_type": "text"
    },
    "ProductObjective2": {
      "required": true,
      "display_name": "Product Objective2",
      "page_number": 2,
      "field_type": "text"
    },
    "BenefitTerm2": {
      "required": true,
      "display_name": "Benefit Term2",
      "page_number": 2,
      "field_type": "text"
    },
    "ContributionPeriod2": {
      "required": true,
      "display_name": "Contribution Period2",
      "page_number": 2,
      "field_type": "text"
    },
    "ProductSelected2": {
      "required": true,
      "display_name": "Product Selected2",
      "page_number": 2,
      "field_type": "text"
    },
    "ProductObjective3": {
      "required": true,
      "display_name": "Product Objective3",
      "page_number": 2,
      "field_type": "text"
    },
    "BenefitTerm3": {
      "required": true,
      "display_name": "Benefit Term3",
      "page_number": 2,
      "field_type": "text"
    },
    "ContributionPeriod3": {
      "required": true,
      "display_name": "Contribution Period3",
      "page_number": 2,
      "field_type": "text"
    },
    "ProductSelected3": {
      "required": true,
      "display_name": "Product Selected3",
      "page_number": 2,
      "field_type": "text"
    },
    "ProductObjective4": {
      "required": true,
      "display_name": "Product Objective4",
      "page_number": 2,
      "field_type": "text"
    },
    "BenefitTerm4": {
      "required": true,
      "display_name": "Benefit Term4",
      "page_number": 2,
      "field_type": "text"
    },
    "ContributionPeriod4": {
      "required": true,
      "display_name": "Contribution Period4",
      "page_number": 2,
      "field_type": "text"
    },
    "ProductSelected4": {
      "required": true,
      "display_name": "Product Selected4",
      "page_number": 2,
      "field_type": "text"
    },
    "numberOfDependents": {
      "required": true,
      "display_name": "Number Of Dependents",
      "page_number": 0,
      "field_type": "text"
    },
    "fullName": {
      "required": true,
      "display_name": "Full Name",
      "page_number": 0,
      "field_type": "text"
    },
    "retirementAge": {
      "required": true,
      "display_name": "Retirement Age",
      "page_number": 0,
      "field_type": "text"
    }
  }
}

// config/forms/broker_forms.json
{
  "broker_fna": {
    "fullNameChinese": {
      "required": true,
      "display_name": "Full Name Chinese",
      "page_number": 2,
      "field_type": "text"
    },
    "DOB": {
      "required": true,
      "display_name": "Dob",
      "page_number": 2,
      "field_type": "text"
    },
    "Occupation": {
      "required": true,
      "display_name": "Occupation",
      "page_number": 2,
      "field_type": "text"
    },
    "averageMonthlyIncome": {
      "required": true,
      "display_name": "Average Monthly Income",
      "page_number": 3,
      "field_type": "text"
    },
    "averageMonthlyExpenses": {
      "required": true,
      "display_name": "Average Monthly Expenses",
      "page_number": 3,
      "field_type": "text"
    },
    "netLiquidAsset": {
      "required": true,
      "display_name": "Net Liquid Asset",
      "page_number": 3,
      "field_type": "text"
    },
    "fullName2": {
      "required": true,
      "display_name": "Full Name2",
      "page_number": 8,
      "field_type": "text"
    },
    "fullName3": {
      "required": true,
      "display_name": "Full Name3",
      "page_number": 8,
      "field_type": "text"
    },
    "TR Name": {
      "required": true,
      "display_name": "Tr name",
      "page_number": 11,
      "field_type": "text"
    },
    "TR IA Number": {
      "required": true,
      "display_name": "Tr ia number",
      "page_number": 11,
      "field_type": "text"
    }
  },
  "broker_client_agreement": {
    "toggle_5": {
      "required": true,
      "display_name": "Toggle 5",
      "page_number": 22,
      "field_type": "button"
    },
    "undefined": {
      "required": true,
      "display_name": "Undefined",
      "page_number": 22,
      "field_type": "button"
    },
    "fill_18": {
      "required": true,
      "display_name": "Fill 18",
      "page_number": 22,
      "field_type": "text"
    },
    "fill_19": {
      "required": true,
      "display_name": "Fill 19",
      "page_number": 22,
      "field_type": "text"
    },
    "fill_2": {
      "required": true,
      "display_name": "Fill 2",
      "page_number": 22,
      "field_type": "text"
    },
    "fill_20": {
      "required": true,
      "display_name": "Fill 20",
      "page_number": 22,
      "field_type": "text"
    },
    "fill_22": {
      "required": true,
      "display_name": "Fill 22",
      "page_number": 22,
      "field_type": "text"
    },
    "fill_24": {
      "required": true,
      "display_name": "Fill 24",
      "page_number": 22,
      "field_type": "text"
    },
    "fill_25": {
      "required": true,
      "display_name": "Fill 25",
      "page_number": 22,
      "field_type": "text"
    },
    "toggle_11": {
      "required": true,
      "display_name": "Toggle 11",
      "page_number": 22,
      "field_type": "button"
    },
    "undefined_2": {
      "required": true,
      "display_name": "Undefined 2",
      "page_number": 22,
      "field_type": "button"
    },
    "fill_26": {
      "required": true,
      "display_name": "Fill 26",
      "page_number": 22,
      "field_type": "text"
    },
    "fill_27": {
      "required": true,
      "display_name": "Fill 27",
      "page_number": 22,
      "field_type": "text"
    },
    "fill_5": {
      "required": true,
      "display_name": "Fill 5",
      "page_number": 22,
      "field_type": "text"
    },
    "fill_6": {
      "required": true,
      "display_name": "Fill 6",
      "page_number": 22,
      "field_type": "text"
    },
    "fill_12": {
      "required": true,
      "display_name": "Fill 12",
      "page_number": 22,
      "field_type": "text"
    },
    "fill_29": {
      "required": true,
      "display_name": "Fill 29",
      "page_number": 22,
      "field_type": "text"
    },
    "fill_30": {
      "required": true,
      "display_name": "Fill 30",
      "page_number": 22,
      "field_type": "text"
    },
    "fill_31": {
      "required": true,
      "display_name": "Fill 31",
      "page_number": 22,
      "field_type": "text"
    },
    "fill_13": {
      "required": true,
      "display_name": "Fill 13",
      "page_number": 22,
      "field_type": "text"
    },
    "fill_7": {
      "required": true,
      "display_name": "Fill 7",
      "page_number": 22,
      "field_type": "text"
    },
    "fill_8": {
      "required": true,
      "display_name": "Fill 8",
      "page_number": 22,
      "field_type": "text"
    },
    "fill_14": {
      "required": true,
      "display_name": "Fill 14",
      "page_number": 22,
      "field_type": "text"
    },
    "fill_10_2": {
      "required": true,
      "display_name": "Fill 10 2",
      "page_number": 23,
      "field_type": "text"
    },
    "fill_11_2": {
      "required": true,
      "display_name": "Fill 11 2",
      "page_number": 23,
      "field_type": "text"
    },
    "fill_12_2": {
      "required": true,
      "display_name": "Fill 12 2",
      "page_number": 23,
      "field_type": "text"
    },
    "fill_1_2": {
      "required": true,
      "display_name": "Fill 1 2",
      "page_number": 23,
      "field_type": "text"
    },
    "fill_3_2": {
      "required": true,
      "display_name": "Fill 3 2",
      "page_number": 23,
      "field_type": "text"
    },
    "fill_2_2": {
      "required": true,
      "display_name": "Fill 2 2",
      "page_number": 23,
      "field_type": "text"
    },
    "fill_4_2": {
      "required": true,
      "display_name": "Fill 4 2",
      "page_number": 23,
      "field_type": "text"
    },
    "fill_5_2": {
      "required": true,
      "display_name": "Fill 5 2",
      "page_number": 23,
      "field_type": "text"
    },
    "fill_6_2": {
      "required": true,
      "display_name": "Fill 6 2",
      "page_number": 23,
      "field_type": "text"
    },
    "fill_7_2": {
      "required": true,
      "display_name": "Fill 7 2",
      "page_number": 23,
      "field_type": "text"
    },
    "fill_8_2": {
      "required": true,
      "display_name": "Fill 8 2",
      "page_number": 23,
      "field_type": "text"
    },
    "fill_9_2": {
      "required": true,
      "display_name": "Fill 9 2",
      "page_number": 23,
      "field_type": "text"
    },
    "fill_1_3": {
      "required": true,
      "display_name": "Fill 1 3",
      "page_number": 24,
      "field_type": "text"
    },
    "fill_2_3": {
      "required": true,
      "display_name": "Fill 2 3",
      "page_number": 24,
      "field_type": "text"
    },
    "fill_3_3": {
      "required": true,
      "display_name": "Fill 3 3",
      "page_number": 24,
      "field_type": "text"
    },
    "fill_4_3": {
      "required": true,
      "display_name": "Fill 4 3",
      "page_number": 24,
      "field_type": "text"
    },
    "fill_5_3": {
      "required": true,
      "display_name": "Fill 5 3",
      "page_number": 24,
      "field_type": "text"
    },
    "fill_6_3": {
      "required": true,
      "display_name": "Fill 6 3",
      "page_number": 24,
      "field_type": "text"
    },
    "fill_7_3": {
      "required": true,
      "display_name": "Fill 7 3",
      "page_number": 24,
      "field_type": "text"
    },
    "fill_8_3": {
      "required": true,
      "display_name": "Fill 8 3",
      "page_number": 24,
      "field_type": "text"
    },
    "fill_9_3": {
      "required": true,
      "display_name": "Fill 9 3",
      "page_number": 24,
      "field_type": "text"
    },
    "fill_10_3": {
      "required": true,
      "display_name": "Fill 10 3",
      "page_number": 24,
      "field_type": "text"
    },
    "fill_11_3": {
      "required": true,
      "display_name": "Fill 11 3",
      "page_number": 24,
      "field_type": "text"
    },
    "fill_12_3": {
      "required": true,
      "display_name": "Fill 12 3",
      "page_number": 24,
      "field_type": "text"
    },
    "I  We hereby consent to the use of my  our personal data for direct marketing purposes by WFS": {
      "required": true,
      "display_name": "I  we hereby consent to the use of my  our personal data for direct marketing purposes by wfs",
      "page_number": 25,
      "field_type": "button"
    },
    "Optout Box": {
      "required": true,
      "display_name": "Optout box",
      "page_number": 25,
      "field_type": "button"
    },
    "fill_2_4": {
      "required": true,
      "display_name": "Fill 2 4",
      "page_number": 25,
      "field_type": "text"
    },
    "fill_3_4": {
      "required": true,
      "display_name": "Fill 3 4",
      "page_number": 25,
      "field_type": "text"
    },
    "fill_4_4": {
      "required": true,
      "display_name": "Fill 4 4",
      "page_number": 25,
      "field_type": "text"
    },
    "fill_1_5": {
      "required": true,
      "display_name": "Fill 1 5",
      "page_number": 26,
      "field_type": "text"
    },
    "fill_3_5": {
      "required": true,
      "display_name": "Fill 3 5",
      "page_number": 26,
      "field_type": "text"
    },
    "fill_4_5": {
      "required": true,
      "display_name": "Fill 4 5",
      "page_number": 26,
      "field_type": "text"
    },
    "fill_5_4": {
      "required": true,
      "display_name": "Fill 5 4",
      "page_number": 26,
      "field_type": "text"
    },
    "fill_6_4": {
      "required": true,
      "display_name": "Fill 6 4",
      "page_number": 26,
      "field_type": "text"
    },
    "fill_8_4": {
      "required": true,
      "display_name": "Fill 8 4",
      "page_number": 26,
      "field_type": "text"
    },
    "fill_10_4": {
      "required": true,
      "display_name": "Fill 10 4",
      "page_number": 26,
      "field_type": "text"
    },
    "fill_11_4": {
      "required": true,
      "display_name": "Fill 11 4",
      "page_number": 26,
      "field_type": "text"
    },
    "fill_12_4": {
      "required": true,
      "display_name": "Fill 12 4",
      "page_number": 26,
      "field_type": "text"
    },
    "fill_1_6": {
      "required": true,
      "display_name": "Fill 1 6",
      "page_number": 27,
      "field_type": "text"
    },
    "fill_2_6": {
      "required": true,
      "display_name": "Fill 2 6",
      "page_number": 27,
      "field_type": "text"
    },
    "fill_3_6": {
      "required": true,
      "display_name": "Fill 3 6",
      "page_number": 27,
      "field_type": "text"
    },
    "Text13": {
      "required": true,
      "display_name": "Text13",
      "page_number": 23,
      "field_type": "text"
    },
    "Text14": {
      "required": true,
      "display_name": "Text14",
      "page_number": 23,
      "field_type": "text"
    },
    "Text15": {
      "required": true,
      "display_name": "Text15",
      "page_number": 23,
      "field_type": "text"
    },
    "Text16": {
      "required": true,
      "display_name": "Text16",
      "page_number": 25,
      "field_type": "text"
    },
    "Text17": {
      "required": true,
      "display_name": "Text17",
      "page_number": 25,
      "field_type": "text"
    },
    "Text18": {
      "required": true,
      "display_name": "Text18",
      "page_number": 26,
      "field_type": "text"
    },
    "Text19": {
      "required": true,
      "display_name": "Text19",
      "page_number": 26,
      "field_type": "text"
    },
    "Text20": {
      "required": true,
      "display_name": "Text20",
      "page_number": 26,
      "field_type": "text"
    },
    "Text21": {
      "required": true,
      "display_name": "Text21",
      "page_number": 26,
      "field_type": "text"
    },
    "fullName1": {
      "required": true,
      "display_name": "Full Name1",
      "page_number": 22,
      "field_type": "text"
    },
    "fullNameChinese": {
      "required": true,
      "display_name": "Full Name Chinese",
      "page_number": 22,
      "field_type": "text"
    },
    "DOB": {
      "required": true,
      "display_name": "Dob",
      "page_number": 22,
      "field_type": "text"
    },
    "HKID": {
      "required": true,
      "display_name": "Hkid",
      "page_number": 22,
      "field_type": "text"
    },
    "Nationality": {
      "required": true,
      "display_name": "Nationality",
      "page_number": 22,
      "field_type": "text"
    },
    "Email": {
      "required": true,
      "display_name": "Email",
      "page_number": 22,
      "field_type": "text"
    },
    "phoneNumber": {
      "required": true,
      "display_name": "Phone Number",
      "page_number": 22,
      "field_type": "text"
    },
    "fullAddress": {
      "required": true,
      "display_name": "Full Address",
      "page_number": 22,
      "field_type": "text"
    },
    "exployerName": {
      "required": true,
      "display_name": "Exployer Name",
      "page_number": 22,
      "field_type": "text"
    },
    "workIndustry": {
      "required": true,
      "display_name": "Work Industry",
      "page_number": 22,
      "field_type": "text"
    },
    "occupation": {
      "required": true,
      "display_name": "Occupation",
      "page_number": 22,
      "field_type": "text"
    },
    "fullName2": {
      "required": true,
      "display_name": "Full Name2",
      "page_number": 25,
      "field_type": "text"
    },
    "fullName3": {
      "required": true,
      "display_name": "Full Name3",
      "page_number": 26,
      "field_type": "text"
    },
    "TR IA Number": {
      "required": true,
      "display_name": "Tr ia number",
      "page_number": 26,
      "field_type": "text"
    },
    "TR Name": {
      "required": true,
      "display_name": "Tr name",
      "page_number": 26,
      "field_type": "text"
    }
  }
}

// config/forms/chubb_forms.json
{
  "chubb_application": {
    "Citizenship": {
      "required": true,
      "display_name": "Citizenship",
      "page_number": 0,
      "field_type": "text"
    },
    "HKID": {
      "required": true,
      "display_name": "Hkid",
      "page_number": 0,
      "field_type": "text"
    },
    "officeAddressBuilding": {
      "required": true,
      "display_name": "Office Address Building",
      "page_number": 1,
      "field_type": "text"
    },
    "officeAddressStreet": {
      "required": true,
      "display_name": "Office Address Street",
      "page_number": 1,
      "field_type": "text"
    },
    "officeAddressFlat": {
      "required": true,
      "display_name": "Office Address Flat",
      "page_number": 1,
      "field_type": "text"
    },
    "officeAddressFloor": {
      "required": true,
      "display_name": "Office Address Floor",
      "page_number": 1,
      "field_type": "text"
    },
    "officeAddressBlock": {
      "required": true,
      "display_name": "Office Address Block",
      "page_number": 1,
      "field_type": "text"
    },
    "occupation": {
      "required": true,
      "display_name": "Occupation",
      "page_number": 1,
      "field_type": "text"
    },
    "exactDuties": {
      "required": true,
      "display_name": "Exact Duties",
      "page_number": 1,
      "field_type": "text"
    },
    "lastName": {
      "required": true,
      "display_name": "Last Name",
      "page_number": 0,
      "field_type": "text"
    },
    "firstName": {
      "required": true,
      "display_name": "First Name",
      "page_number": 0,
      "field_type": "text"
    },
    "fullName": {
      "required": true,
      "display_name": "Full Name",
      "page_number": 12,
      "field_type": "text"
    },
    "fullNameChinese": {
      "required": true,
      "display_name": "Full Name Chinese",
      "page_number": 0,
      "field_type": "text"
    },
    "Nationality": {
      "required": true,
      "display_name": "Nationality",
      "page_number": 0,
      "field_type": "text"
    },
    "DOB_D": {
      "required": true,
      "display_name": "Dob D",
      "page_number": 0,
      "field_type": "text"
    },
    "DOB_M": {
      "required": true,
      "display_name": "Dob M",
      "page_number": 0,
      "field_type": "text"
    },
    "DOB_Y": {
      "required": true,
      "display_name": "Dob Y",
      "page_number": 0,
      "field_type": "text"
    },
    "birthplace": {
      "required": true,
      "display_name": "Birthplace",
      "page_number": 0,
      "field_type": "text"
    },
    "addressFlat": {
      "required": true,
      "display_name": "Address Flat",
      "page_number": 1,
      "field_type": "text"
    },
    "addressFloor": {
      "required": true,
      "display_name": "Address Floor",
      "page_number": 1,
      "field_type": "text"
    },
    "officeAddressPostalCode": {
      "required": true,
      "display_name": "Office Address Postal Code",
      "page_number": 1,
      "field_type": "text"
    },
    "officeAddressDistrict": {
      "required": true,
      "display_name": "Office Address District",
      "page_number": 1,
      "field_type": "text"
    },
    "addressStreet": {
      "required": true,
      "display_name": "Address Street",
      "page_number": 1,
      "field_type": "text"
    },
    "addressBuilding": {
      "required": true,
      "display_name": "Address Building",
      "page_number": 1,
      "field_type": "text"
    },
    "addressBlock": {
      "required": true,
      "display_name": "Address Block",
      "page_number": 1,
      "field_type": "text"
    },
    "TR Name 2": {
      "required": true,
      "display_name": "Tr name 2",
      "page_number": 8,
      "field_type": "text"
    },
    "TR IA Number": {
      "required": true,
      "display_name": "Tr ia number",
      "page_number": 0,
      "field_type": "text"
    },
    "TR Phone Number": {
      "required": true,
      "display_name": "Tr phone number",
      "page_number": 0,
      "field_type": "text"
    },
    "exployerName": {
      "required": true,
      "display_name": "Exployer Name",
      "page_number": 1,
      "field_type": "text"
    },
    "officePhoneNumber": {
      "required": true,
      "display_name": "Office Phone Number",
      "page_number": 1,
      "field_type": "text"
    },
    "addressDistrict": {
      "required": true,
      "display_name": "Address District",
      "page_number": 1,
      "field_type": "text"
    },
    "addressPostalCode": {
      "required": true,
      "display_name": "Address Postal Code",
      "page_number": 1,
      "field_type": "text"
    },
    "contactNumber": {
      "required": true,
      "display_name": "Contact Number",
      "page_number": 1,
      "field_type": "text"
    },
    "email": {
      "required": true,
      "display_name": "Email",
      "page_number": 1,
      "field_type": "text"
    },
    "taxJurisdiction": {
      "required": true,
      "display_name": "Tax Jurisdiction",
      "page_number": 2,
      "field_type": "text"
    },
    "HKID 2": {
      "required": true,
      "display_name": "Hkid 2",
      "page_number": 2,
      "field_type": "text"
    }
  },
  "chubb_fna": {
    "fullName 2": {
      "required": true,
      "display_name": "Full Name 2",
      "page_number": 0,
      "field_type": "text"
    },
    "fullName 1": {
      "required": true,
      "display_name": "Full Name 1",
      "page_number": 0,
      "field_type": "text"
    },
    "DOB_D": {
      "required": true,
      "display_name": "Dob D",
      "page_number": 0,
      "field_type": "text"
    },
    "DOB_M": {
      "required": true,
      "display_name": "Dob M",
      "page_number": 0,
      "field_type": "text"
    },
    "DOB_Y": {
      "required": true,
      "display_name": "Dob Y",
      "page_number": 0,
      "field_type": "text"
    },
    "numberOfDependents": {
      "required": true,
      "display_name": "Number Of Dependents",
      "page_number": 0,
      "field_type": "text"
    },
    "retirementAge": {
      "required": true,
      "display_name": "Retirement Age",
      "page_number": 0,
      "field_type": "text"
    },
    "fullName 3": {
      "required": true,
      "display_name": "Full Name 3",
      "page_number": 5,
      "field_type": "text"
    },
    "TR Name": {
      "required": true,
      "display_name": "Tr name",
      "page_number": 5,
      "field_type": "text"
    },
    "occupation": {
      "required": true,
      "display_name": "Occupation",
      "page_number": 0,
      "field_type": "text"
    }
  },
  "chubb_payment": {
    "Policy Application Number": {
      "required": true,
      "display_name": "Policy application number",
      "page_number": 0,
      "field_type": "text"
    },
    "fullName 2": {
      "required": true,
      "display_name": "Full Name 2",
      "page_number": 0,
      "field_type": "text"
    },
    "fullName 3": {
      "required": true,
      "display_name": "Full Name 3",
      "page_number": 0,
      "field_type": "text"
    },
    "TR Phone Number": {
      "required": true,
      "display_name": "Tr phone number",
      "page_number": 0,
      "field_type": "text"
    },
    "fullName 1": {
      "required": true,
      "display_name": "Full Name 1",
      "page_number": 0,
      "field_type": "text"
    }
  }
}

// config/mappings/field_mappings.json
{
  "fullName": {
    "broker_client_agreement": ["fullName1","fullName2","fullName3"],
    "broker_fna": ["fullName1","fullName2","fullName3"],
    "chubb_application": "fullName",
    "chubb_fna": ["fullName 1","fullName 2","fullName 3"],
    "chubb_payment": ["fullName 1","fullName 2","fullName 3"],
    "boclife_application": ["fullName","fullName 2","fullName 3","fullName 4"],
    "boclife_fna": ["fullName","fullName 2"]
  },
  "firstName": {
    "broker_client_agreement": ["firstNameE1","firstNameE2"],
    "chubb_application": "firstName",
    "boclife_application": "firstName"
  },
  "lastName": {
    "broker_client_agreement": ["lastNameE1","lastNameE2"],
    "chubb_application": "lastName",
    "boclife_application": "lastName"
  },
  "fullNameChinese": {
    "broker_fna": "fullNameChinese",
    "broker_client_agreement": "fullNameChinese",
    "chubb_application": "fullNameChinese",
    "boclife_application": "fullNameChinese",
    "boclife_fna": "fullNameChinese"
  },
  "firstNameChinese": {
    "broker_client_agreement": ["firstNameChinese1","firstNameChinese2"],
    "boclife_application": "firstNameChinese"
  },
  "lastNameChinese": {
    "broker_client_agreement": ["lastNameChinese1","lastNameChinese2"],
    "boclife_application": "lastNameChinese"
  },
  "dateOfBirth": {
    "broker_fna": "DOB",
    "broker_client_agreement": "DOB",
    "boclife_application": "DOB",
    "boclife_fna": "DOB"
  },
  "DOB_D": {
    "chubb_application": "DOB_D",
    "chubb_fna": "DOB_D",
    "boclife_application": "DOB_D"
  },
  "DOB_M": {
    "chubb_application": "DOB_M",
    "chubb_fna": "DOB_M",
    "boclife_application": "DOB_M"
  },
  "DOB_Y": {
    "chubb_application": "DOB_Y",
    "chubb_fna": "DOB_Y",
    "boclife_application": "DOB_Y"
  },
  "birthplace": {
    "chubb_application": "birthplace",
    "boclife_application": "birthplace"
  },
  "idNumber": {
    "broker_fna": "HKID",
    "broker_client_agreement": "HKID",
    "chubb_application": ["HKID","HKID 2"],
    "boclife_application": ["HKID","HKID 2","HKID TIN","HKID 4"],
    "boclife_fna": "HKID"
  },
  "nationality": {
    "broker_client_agreement": "Nationality",
    "chubb_application": "Nationality",
    "boclife_application": "nationality"
  },
  "gender": {
    "broker_fna": "genderMale"
  },
  "maritalStatus": {
    "broker_fna": "maritalStatusOthers"
  },
  "numberOfDependents": {
    "broker_fna": "numberOfDependents",
    "chubb_fna": "numberOfDependents",
    "boclife_application": "numberOfDependents",
    "boclife_fna": "numberOfDependents"
  },
  "education": {
    "broker_fna": "educationUniversity",
    "boclife_application": "education"
  },
  "fullAddress": {
    "broker_fna": "fullAddress",
    "broker_client_agreement": "fullAddress"
  },
  "correspondenceAddress": {
    "broker_client_agreement": "correspondenceAddress"
  },
  "phoneNumber": {
    "broker_fna": "contactNumber",
    "broker_client_agreement": "phoneNumber",
    "chubb_application": "contactNumber",
    "boclife_application": "phoneNumber"
  },
  "email": {
    "broker_fna": "email",
    "broker_client_agreement": "Email",
    "chubb_application": "email",
    "boclife_application": "Email"
  },
  "taxResidency": {
    "broker_fna": "taxHongKong"
  },
  "taxJurisdiction": {
    "broker_fna": "taxOthersLocation",
    "chubb_application": "taxJurisdiction",
    "boclife_application": "taxJurisdiction"
  },
  "occupation": {
    "broker_fna": "Occupation",
    "broker_client_agreement": "occupation",
    "chubb_application": "occupation",
    "chubb_fna": "occupation",
    "boclife_application": "occupation",
    "boclife_fna": "occupation"
  },
  "exactDuties": {
    "chubb_application": "exactDuties",
    "boclife_application": ["exactDuties","exactDuties 2"]
  },
  "monthlyIncome": {
    "broker_fna": "averageMonthlyIncome",
    "boclife_application": "monthlyIncome",
    "boclife_fna": "monthlySalary"
  },
  "monthlyExpenses": {
    "broker_fna": "averageMonthlyExpenses",
    "boclife_fna": "monthlyExpenses"
  },
  "retirementAge": {
    "broker_fna": "retirementAge",
    "chubb_fna": "retirementAge",
    "boclife_fna": "retirementAge"
  },
  "netLiquidAssets": {
    "broker_fna": "netLiquidAsset",
    "boclife_application": "netLiquidAssets"
  },
  "investmentPreference": {
    "broker_fna": "insuranceBudgetIncome10pct"
  },
  "paymentMethod": {
    "broker_fna": "paymentPeriodSingle"
  },
  "paymentPeriod": {
    "broker_fna": "paymentPeriod2to5"
  },
  "trName": {
    "broker_fna": ["TR Name","TR Name 2"],
    "broker_client_agreement": "TR Name",
    "chubb_application": "TR Name",
    "chubb_fna": "TR Name",
    "boclife_application": ["TR Name","TR Name 2","TR Name 3"],
    "boclife_fna": "TR Name"
  },
  "trLicenseNumber": {
    "broker_fna": "TR IA Number",
    "broker_client_agreement": "TR IA Number",
    "chubb_application": "TR IA Number",
    "boclife_application": ["TR IA Number","TR IA Number 2","TR IA Number 3"],
    "boclife_fna": "TR IA Number"
  },
  "trPhoneNumber": {
    "broker_fna": "TR Phone Number",
    "chubb_application": "TR Phone Number",
    "chubb_payment": "TR Phone Number",
    "boclife_application": "TR Phone Number",
    "boclife_fna": "TR Phone Number"
  },
  "Citizenship": {
    "chubb_application": "Citizenship"
  },
  "addressFlat": {
    "chubb_application": "addressFlat",
    "boclife_application": "addressFlat"
  },
  "addressFloor": {
    "chubb_application": "addressFloor",
    "boclife_application": "addressFloor"
  },
  "addressBlock": {
    "chubb_application": "addressBlock",
    "boclife_application": "addressBlock"
  },
  "addressBuilding": {
    "chubb_application": "addressBuilding",
    "boclife_application": "addressBuilding"
  },
  "addressStreet": {
    "chubb_application": "addressStreet",
    "boclife_application": "addressStreet"
  },
  "addressDistrict": {
    "chubb_application": "addressDistrict",
    "boclife_application": "addressDistrict"
  },
  "addressPostalCode": {
    "chubb_application": "addressPostalCode"
  },
  "exployerName": {
    "broker_client_agreement": "exployerName",
    "chubb_application": "exployerName",
    "boclife_application": "exployerName"
  },
  "workIndustry": {
    "boclife_application": "workIndustry",
    "broker_fna": "workIndustry",
    "broker_client_agreement": "workIndustry"
  },
  "officePhoneNumber": {
    "chubb_application": "officePhoneNumber",
    "boclife_application": "officePhoneNumber"
  },
  "officeFullAddress": {
    "chubb_application": "officeFullAddress",
    "boclife_application": "officeFullAddress"
  },
  "officeAddressFlat": {
    "chubb_application": "officeAddressFlat"
  },
  "officeAddressFloor": {
    "chubb_application": "officeAddressFloor"
  },
  "officeAddressBlock": {
    "chubb_application": "officeAddressBlock"
  },
  "officeAddressBuilding": {
    "chubb_application": "officeAddressBuilding"
  },
  "officeAddressStreet": {
    "chubb_application": "officeAddressStreet"
  },
  "officeAddressDistrict": {
    "chubb_application": "officeAddressDistrict"
  },
  "officeAddressPostalCode": {
    "chubb_application": "officeAddressPostalCode"
  }
}

// config/mappings/reverse_mappings.json
{
  "firstNameE2": "firstName",
  "lastNameE2": "lastName",
  "fullNameE2": "fullName",
  "fullNameC": "fullNameChinese",
  "firstNameChinese2": "firstNameChinese",
  "lastNameChinese2": "lastNameChinese",
  "DOB": "dateOfBirth",
  "HKID": "idNumber",
  "Nationality": "nationality",
  "genderMale": "gender",
  "maritalStatusOthers": "maritalStatus",
  "numberOfDependents": "numberOfDependents",
  "educationUniversity": "education",
  "fullAddress": "fullAddress",
  "correspondenceAddress": "correspondenceAddress",
  "contactNumber": "phoneNumber",
  "contactNo": "phoneNumber",
  "email": "email",
  "Email": "email",
  "taxHongKong": "taxResidency",
  "taxOthersLocation": "taxJurisdiction",
  "occupation": "occupation",
  "averageMonthlyIncome": "monthlyIncome",
  "averageMonthlyExpenses": "monthlyExpenses",
  "retirementAge65": "retirementAge",
  "netLiquidAsset": "netLiquidAssets",
  "insuranceBudgetIncome10pct": "investmentPreference",
  "paymentPeriodSingle": "paymentMethod",
  "paymentPeriod2to5": "paymentPeriod",
  "TR Name": "trName",
  "TR IA Number": "trLicenseNumber",
  "TR Phone Number": "trPhoneNumber"
}

// config/standardized_fields.json
{
  "fullName": {
    "display_name": "Full Name",
    "category": "Personal Information",
    "required": true,
    "llm_guide": "Extract the client's full name in English. If first name and last name are provided separately, combine them."
  },
  "fullNameChinese": {
    "display_name": "Full Name (Chinese)",
    "category": "Personal Information",
    "required": true,
    "llm_guide": "Extract the client's full name in Chinese characters. Look for patterns like '中文身份證姓名', '中文姓名:', '全名(中文):'. If first and last Chinese names are provided separately, combine them with last name first (traditional Chinese format)."
  },
  "lastName": {
    "display_name": "Last Name",
    "category": "Personal Information",
    "required": true,
    "llm_guide": "Extract the client's last name in English. Look for patterns like 'Last Name:', 'Surname:', or the second part of a full name."
  },
  "lastNameChinese": {
    "display_name": "Last Name (Chinese)",
    "category": "Personal Information",
    "required": true,
    "llm_guide": "Extract the client's last name in Chinese characters. Look for patterns like '姓:', '姓氏:' or the first character(s) in a Chinese name."
  },
  "firstName": {
    "display_name": "First Name",
    "category": "Personal Information",
    "required": true,
    "llm_guide": "Extract the client's first name in English. Look for patterns like 'First Name:', 'Name: [First] [Last]', or the first part of a full name."
  },
  "firstNameChinese": {
    "display_name": "First Name (Chinese)",
    "category": "Personal Information",
    "required": true,
    "llm_guide": "Extract the client's first name in Chinese characters. Look for patterns like '名:', '名字:' or Chinese characters following a person's English name."
  },
  "dateOfBirth": {
    "display_name": "Date of Birth",
    "category": "Personal Information",
    "required": true,
    "llm_guide": "Extract the date of birth in YYYY/MM/DD format. Look for patterns like 'DOB:', 'Date of Birth:', 'Born on:', '出生日期:'. Convert any date format to YYYY/MM/DD."
  },
  "DOB_D": {
    "display_name": "Day of Birth",
    "category": "Personal Information",
    "required": true,
    "llm_guide": "Extract only the DAY part of the date of birth. For example, from '01/15/1980', extract '15'."
  },
  "DOB_M": {
    "display_name": "Month of Birth",
    "category": "Personal Information",
    "required": true,
    "llm_guide": "Extract only the MONTH part of the date of birth. For example, from '01/15/1980', extract '01'."
  },
  "DOB_Y": {
    "display_name": "Year of Birth",
    "category": "Personal Information",
    "required": true,
    "llm_guide": "Extract only the YEAR part of the date of birth. For example, from '01/15/1980', extract '1980'."
  },
  "birthplace": {
    "display_name": "Place of Birth",
    "category": "Personal Information",
    "required": true,
    "llm_guide": "Extract the client's place of birth. Look for patterns like 'Birth Place:', 'Born in:', '出生地點:'."
  },
  "idNumber": {
    "display_name": "ID Number/HKID",
    "category": "Personal Information",
    "required": true,
    "llm_guide": "Extract the HKID number. Look for patterns like 'HKID:', 'ID:', 'Identity Number:', '身份證號碼:'. The format is typically a letter followed by 6-7 digits and a check digit in parentheses like A123456(7)."
  },
  "nationality": {
    "display_name": "Nationality",
    "category": "Personal Information",
    "required": false,
    "llm_guide": "Extract the client's nationality or citizenship. Look for terms like 'Nationality:', 'Citizen of:', 'Passport from:', '國籍:'. For Hong Kong residents, common nationalities include 'Chinese', 'Hong Kong', or specific countries."
  },
  "Citizenship": {
    "display_name": "Citizenship",
    "category": "Personal Information",
    "required": false,
    "llm_guide": "Extract the client's citizenship. Look for terms like 'Citizenship:', 'Citizen of:', 'Nationality:'."
  },
  "gender": {
    "display_name": "Gender",
    "category": "Personal Information",
    "required": true,
    "llm_guide": "Extract the client's gender. Look for terms like 'Male', 'Female', 'M', 'F', 'Gender:', '性別:'. In Chinese, look for '男' (male) or '女' (female)."
  },
  "maritalStatus": {
    "display_name": "Marital Status",
    "category": "Personal Information",
    "required": true,
    "llm_guide": "Extract marital status. Look for terms like 'single', 'married', 'divorced', 'widowed', 'Marital Status:', '婚姻狀況:'. Common Chinese terms include '未婚' (unmarried), '已婚' (married), '離婚' (divorced), '喪偶' (widowed)."
  },
  "numberOfDependents": {
    "display_name": "Number of Dependents",
    "category": "Personal Information",
    "required": false,
    "llm_guide": "Extract the number of dependents. Look for patterns like 'Dependents:', 'Number of children:', '供養人數:', '子女人數:'. Return as a number."
  },
  "education": {
    "display_name": "Education Level",
    "category": "Personal Information",
    "required": true,
    "llm_guide": "Extract education level. Look for terms like 'Education:', 'Highest degree:', '學歷:'. Common levels include 'Primary', 'Secondary', 'Diploma', 'Bachelor', 'Master', 'PhD', or their Chinese equivalents."
  },
  "phoneNumber": {
    "display_name": "Phone Number",
    "category": "Contact Information",
    "required": true,
    "llm_guide": "Extract the phone number. Look for patterns like 'Phone:', 'Tel:', 'Contact:', 'Mobile:', '電話:', '手機:'. For Hong Kong numbers, ensure it has the +852 country code if provided. Common formats include +852 XXXX XXXX or 9XXX XXXX."
  },
  "email": {
    "display_name": "Email",
    "category": "Contact Information",
    "required": false,
    "llm_guide": "Extract the email address. Look for patterns like 'Email:', '@', '電郵:', or standard email formats like name@domain.com."
  },
  "fullAddress": {
    "display_name": "Full Address",
    "category": "Contact Information",
    "required": true,
    "llm_guide": "Extract the complete residential or correspondence address. Look for patterns like 'Address:', 'Residence:', 'Living at:', '地址:', '住址:'. Include building name, floor, unit number, street name, and district."
  },
  "correspondenceAddress": {
    "display_name": "Correspondence Address",
    "category": "Contact Information",
    "required": true,
    "llm_guide": "Extract the mailing or correspondence address if different from residential address. Look for patterns like 'Mailing Address:', 'Correspondence:', '通訊地址:', '郵寄地址:'. If not explicitly mentioned, assume it's the same as the residential address."
  },
  "addressFlat": {
    "display_name": "Flat/Room",
    "category": "Contact Information",
    "required": false,
    "llm_guide": "Extract only the flat or room number from the correspondence address. Look for patterns like '室', 'Flat:', 'Room:', 'Unit:'."
  },
  "addressFloor": {
    "display_name": "Floor",
    "category": "Contact Information",
    "required": false,
    "llm_guide": "Extract only the floor number from the correspondence address. Look for patterns like '樓', 'Floor:', 'F:', '/F:'."
  },
  "addressBlock": {
    "display_name": "Block",
    "category": "Contact Information",
    "required": false,
    "llm_guide": "Extract only the block identifier from the correspondence address. Look for patterns like '座', 'Block:', 'Tower:'."
  },
  "addressBuilding": {
    "display_name": "Building",
    "category": "Contact Information",
    "required": false,
    "llm_guide": "Extract only the building name from the correspondence address. Look for patterns like 'Building:', 'Estate:', 'Court:'."
  },
  "addressStreet": {
    "display_name": "Street",
    "category": "Contact Information",
    "required": false,
    "llm_guide": "Extract only the street name and number from the correspondence address. Look for patterns like street numbers followed by road/street/avenue names."
  },
  "addressDistrict": {
    "display_name": "District",
    "category": "Contact Information",
    "required": false,
    "llm_guide": "Extract only the district name from the correspondence address. For Hong Kong addresses, districts include Central, Wan Chai, Tsim Sha Tsui, Mong Kok, etc."
  },
  "addressPostalCode": {
    "display_name": "Postal Code",
    "category": "Contact Information",
    "required": false,
    "llm_guide": "Extract only the postal code from the  correspondence address. Note that Hong Kong does not use postal codes, but this might be applicable for addresses in other countries."
  },
  "exployerName": {
    "display_name": "Employer Name",
    "category": "Employment Information",
    "required": false,
    "llm_guide": "Extract the name of the client's employer or company. Look for patterns like 'Employer:', 'Company:', 'Works for:', 'Employed by:', '僱主名稱:', '公司名稱:'."
  },
  "officePhoneNumber": {
    "display_name": "Office Phone Number",
    "category": "Employment Information",
    "required": false,
    "llm_guide": "Extract the client's office or work phone number. Look for patterns like 'Office Tel:', 'Work Phone:', 'Business Contact:', '辦公室電話:', '工作電話:'. For Hong Kong numbers, the format may include +852 XXXX XXXX or just XXXX XXXX."
  },
  "occupation": {
    "display_name": "Occupation",
    "category": "Employment Information",
    "required": true,
    "llm_guide": "Extract the client's job or profession. Look for patterns like 'Occupation:', 'Job:', 'Profession:', 'Works as:', '職業:', '工作:'. Be specific about both position and industry if mentioned."
  },
  "exactDuties": {
    "display_name": "Exact Duties",
    "category": "Employment Information",
    "required": false,
    "llm_guide": "Extract a description of the client's exact job duties or responsibilities. Look for patterns like 'Job duties:', 'Responsibilities:', 'Daily tasks:'."
  },
  "workIndustry": {
    "display_name": "Industry",
    "category": "Employment Information",
    "required": false,
    "llm_guide": "Extract or infer a description of the client's work industry. Look for patterns like '行業:', '行業性質:', 'Industry:', 'Business Nature:'."
  },
  "officeFullAddress": {
    "display_name": "Office Full Address",
    "category": "Employment Information",
    "required": true,
    "llm_guide": "Extract the complete office address. Look for patterns like 'Office Address:', 'Working at:', '公司地址'. Include building name, floor, unit number, street name, and district."
  },
  "officeAddressFlat": {
    "display_name": "Office Flat/Room",
    "category": "Employment Information",
    "required": false,
    "llm_guide": "Extract only the flat or room number from the office address. Look for patterns like 'Office Flat:', 'Office Room:', 'Office Unit:'."
  },
  "officeAddressFloor": {
    "display_name": "Office Floor",
    "category": "Employment Information",
    "required": false,
    "llm_guide": "Extract only the floor number from the office address. Look for patterns like 'Office Floor:', 'Office F:', 'Office /F:'."
  },
  "officeAddressBlock": {
    "display_name": "Office Block",
    "category": "Employment Information",
    "required": false,
    "llm_guide": "Extract only the block identifier from the office address. Look for patterns like 'Office Block:', 'Office Tower:'."
  },
  "officeAddressBuilding": {
    "display_name": "Office Building",
    "category": "Employment Information",
    "required": false,
    "llm_guide": "Extract only the building name from the office address. Look for patterns like 'Office Building:', 'Office Estate:', 'Office Court:'."
  },
  "officeAddressStreet": {
    "display_name": "Office Street",
    "category": "Employment Information",
    "required": false,
    "llm_guide": "Extract only the street name and number from the office address. Look for patterns like street numbers followed by road/street/avenue names in the office address."
  },
  "officeAddressDistrict": {
    "display_name": "Office District",
    "category": "Employment Information",
    "required": false,
    "llm_guide": "Extract only the district name from the office address. For Hong Kong addresses, districts include Central, Wan Chai, Tsim Sha Tsui, Mong Kok, etc."
  },
  "officeAddressPostalCode": {
    "display_name": "Office Postal Code",
    "category": "Employment Information",
    "required": false,
    "llm_guide": "Extract only the postal code from the office address. Note that Hong Kong does not use postal codes, but this might be applicable for addresses in other countries."
  },
  "taxResidency": {
    "display_name": "Tax Residency",
    "category": "Financial Information",
    "required": false,
    "llm_guide": "Extract information about tax residency status. Look for patterns like 'Tax Resident of:', 'Tax Residency:', '稅務居民:', '報稅地區:'. Common answers include 'Hong Kong', 'China', or specific countries."
  },
  "taxJurisdiction": {
    "display_name": "Tax Jurisdiction",
    "category": "Financial Information",
    "required": false,
    "llm_guide": "Extract specific tax jurisdiction information if different from residency. Look for patterns like 'Tax Jurisdiction:', 'Pays tax in:', '繳稅地區:'. This may include multiple countries."
  },
  "monthlyIncome": {
    "display_name": "Monthly Income",
    "category": "Financial Information",
    "required": false,
    "llm_guide": "Extract the monthly income amount. Look for patterns like 'Monthly Income:', 'Monthly Salary:', '月薪:', '月收入:'. Convert to numeric value without currency symbols. If annual income is provided, divide by 12."
  },
  "monthlyExpenses": {
    "display_name": "Monthly Expenses",
    "category": "Financial Information",
    "required": false,
    "llm_guide": "Extract monthly expenses or spending. Look for patterns like 'Monthly Expenses:', 'Monthly Spending:', '月支出:', '每月開支:'. Convert to numeric value without currency symbols."
  },
  "netLiquidAssets": {
    "display_name": "Net Liquid Assets",
    "category": "Financial Information",
    "required": false,
    "llm_guide": "Extract information on liquid assets (cash, stocks, bonds, etc.). Look for patterns like 'Liquid Assets:', 'Cash and Investments:', '流動資產:', '現金及投資:'. Convert to numeric value without currency symbols."
  },
  "trName": {
    "display_name": "Technical Representative Name",
    "category": "Advisor Information",
    "required": false,
    "llm_guide": "Extract the name of the insurance broker or technical representative (TR). Look for patterns like 'Broker:', 'Agent:', 'TR:', 'Advisor:', '顧問:', '代理人:'. This should be the full name of the person advising the client."
  },
  "trLicenseNumber": {
    "display_name": "TR License Number",
    "category": "Advisor Information",
    "required": false,
    "llm_guide": "Extract the license or registration number of the insurance broker or technical representative. Look for patterns like 'License Number:', 'TR No.:', 'Reg. No.:', '牌照號碼:', '註冊編號:'. This is typically a combination of letters and numbers."
  },
  "trPhoneNumber": {
    "display_name": "TR Phone Number",
    "category": "Advisor Information",
    "required": false,
    "llm_guide": "Extract the phone number of the insurance broker or technical representative. Look for patterns like 'Broker Tel:', 'Agent Contact:', 'TR Phone:', '顧問電話:', '代理人聯絡電話:'. For Hong Kong numbers, ensure it has the +852 country code if provided."
  }
}

// scripts/init-listener-priority.sh
#!/bin/bash

# Set locale variables
export LC_ALL=C.UTF-8
export LANG=C.UTF-8

# Function to find an unused priority
find_unused_priority() {
  local listener_arn=$1
  local review_app_url=$2
  local rules=$(aws elbv2 describe-rules --listener-arn $listener_arn)
  local listener_priority=$(echo $rules | jq -r --arg url "$review_app_url" '.Rules[] | select(.Conditions[].Values[] == $url) | .Priority')
  if [[ -n "$listener_priority" ]]; then
    echo $listener_priority
  else
    local used_priorities=$(echo $rules | jq -r '.Rules[].Priority')
    local hash=$(echo -n "$review_app_url" | sha256sum | cut -f1 -d' ')
    local seed=0
    for (( i=0; i<${#hash}; i+=2 )); do
      seed=$((((seed + 0x${hash:$i:2}) % 50000)))
    done
    for i in $(seq $seed 50000) $(seq 1 $((seed-1))); do
      if [[ ! $used_priorities =~ $i ]]; then
        echo $i
        return
      fi
    done
    echo "No unused priority found"
    exit 1
  fi
}

find_unused_priority $1 $2

// scripts/remove-listener.sh
#!/bin/bash

# Set locale variables
export LC_ALL=C.UTF-8
export LANG=C.UTF-8

# Function to remove a listener from an ELB based on the specified port
remove_listener() {
  local elb_arn=$1
  local port=$2
  LISTENER_ARN=$(aws elbv2 describe-listeners --load-balancer-arn $elb_arn | jq -r ".Listeners[] | select(.Port == $port) | .ListenerArn")

  # Check if the listener ARN is empty
  if [ -z "$LISTENER_ARN" ]
  then
      echo "No listener found on port $port"
  else
      # Delete the listener
      aws elbv2 delete-listener --listener-arn $LISTENER_ARN
      echo "Listener on port $port deleted"
  fi
}

remove_listener $1 $2

// static/css/styles.css
/* static/css/styles.css */

body {
    padding-top: 2rem;
    padding-bottom: 2rem;
    background-color: #f8f9fa;
}

.card {
    border-radius: 10px;
    overflow: hidden;
}

.card-title {
    color: #3d5a80;
}

/* Form Steps */
.form-step {
    display: none;
}

.form-step.active {
    display: block;
}

/* Progress Bar */
.progress {
    border-radius: 10px;
    margin-bottom: 20px;
}

.progress-bar {
    background-color: #3d5a80;
    transition: width 0.6s ease;
}

/* Form Fields */
.required-field::after {
    content: "*";
    color: #dc3545;
    margin-left: 4px;
}

.missing-field {
    border-color: #dc3545;
}

.form-label {
    font-weight: 500;
    color: #495057;
}

textarea.form-control {
    border-radius: 5px;
    border-color: #e0e0e0;
}

textarea.form-control:focus,
select.form-select:focus,
input.form-control:focus {
    box-shadow: 0 0 0 0.2rem rgba(61, 90, 128, 0.25);
    border-color: #3d5a80;
}

/* Buttons */
.btn-primary {
    background-color: #3d5a80;
    border-color: #3d5a80;
}

.btn-primary:hover {
    background-color: #2c4262;
    border-color: #2c4262;
}

.btn-outline-secondary {
    color: #6c757d;
    border-color: #6c757d;
}

.btn-outline-secondary:hover {
    background-color: #6c757d;
    color: white;
}

.btn-link {
    color: #3d5a80;
}

.btn-link:hover {
    color: #2c4262;
}

/* Step 3 button layout */
#step-3 .d-flex.justify-content-between {
    width: 100%;
}

#btn-back-to-edit {
    transition: all 0.2s ease;
}

#btn-back-to-edit:hover {
    background-color: #e9ecef;
    border-color: #6c757d;
}

/* Form Categories */
.form-category {
    margin-bottom: 20px;
}

.form-category-header {
    font-weight: 600;
    color: #3d5a80;
    margin-bottom: 15px;
    padding-bottom: 5px;
    border-bottom: 1px solid #e0e0e0;
}

/* Form Preview Items */
.form-preview-item {
    transition: all 0.2s ease;
}

.form-preview-item:hover {
    background-color: #f8f9fa;
}

/* Alerts */
.alert {
    border-radius: 5px;
}

/* Forms List */
.list-group-item {
    padding: 12px 15px;
    transition: all 0.2s ease;
}

.list-group-item:hover {
    background-color: #f8f9fa;
}

/* Animations */
@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

.form-step.active {
    animation: fadeIn 0.5s ease;
}

/* Advisor Information Section */
#advisor-info-container {
    background-color: #f1f8ff;
    border-color: #b8daff;
}

#advisor-info-container .form-category-header {
    color: #004085;
    border-bottom-color: #b8daff;
}

/* Dropdown styling */
.form-select {
    border-radius: 5px;
    border-color: #e0e0e0;
    height: calc(1.5em + 0.75rem + 2px);
    padding: 0.375rem 0.75rem;
    font-size: 1rem;
    font-weight: 400;
    line-height: 1.5;
    color: #495057;
    background-color: #fff;
    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}

.form-select:focus {
    border-color: #3d5a80;
    outline: 0;
    box-shadow: 0 0 0 0.2rem rgba(61, 90, 128, 0.25);
}

.form-select.missing-field {
    border-color: #dc3545;
}

// static/favicon.ico
�PNG

   
IHDR         ��a   	pHYs    ��~�  �IDAT8��SMKQ=٤"~��Pd YaD�(h�Z	ѦUA��-[��6�l[ۢ���(�U����2IZ/�Eeflax7��=��s�;�:� ����D��B��F�?��%՘�̬�b�j���ԅ��$�z"�Y65�&��ev+���7�C�A�s�j�
^�[#�t�`?<���y�F5�x2 �9���w�˽�XMa%v	��1F5����I�b�vK'�F�l?�P�V:=��U4+������,�����6�E��\S�\
�|�꧆tYóVb� �Vc>���T�P�@V�<����
�Ն�t�s� ��e)�|����>���b��(G��4�@>�gT�Oyz�<0�Y����Q͟.�U��t���)�B�R�f�#�1��3_f�2�Fۏ����
�-aDrs    IEND�B`�

// static/index.html
<!-- static/index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI-Assisted PDF Form Filler</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css">
    <link rel="stylesheet" href="/css/styles.css">
</head>
<body>
    <div class="container">
        <div class="row mb-4">
            <div class="col-12">
                <h1 class="text-center">AI-Assisted PDF Form Filler</h1>
                <p class="text-center text-muted">DEMO - WRISE FINANCIAL SERVICES LIMITED</p>
            </div>
        </div>

        <div class="row justify-content-center">
            <div class="col-md-10 col-lg-8">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <!-- Progress Bar -->
                        <div class="progress mb-4" style="height: 30px;">
                            <div id="progress-bar" class="progress-bar" role="progressbar" style="width: 33%;" aria-valuenow="33" aria-valuemin="0" aria-valuemax="100">Step 1 of 3</div>
                        </div>

                        <!-- Step 1: Input Information -->
                        <div id="step-1" class="form-step active">
                            <h3 class="card-title mb-4">Step 1: Input Client Information</h3>
                            
                            <div class="mb-4">
                                <label class="form-label">Select Insurance Company:</label>
                                <div class="d-flex">
                                    <div class="form-check me-4">
                                        <input class="form-check-input" type="radio" name="insurer" id="insurer-boclife" value="BOCLife" checked>
                                        <label class="form-check-label" for="insurer-boclife">BOCLife</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="insurer" id="insurer-chubb" value="Chubb">
                                        <label class="form-check-label" for="insurer-chubb">Chubb</label>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="mb-4">
                                <label for="client-info" class="form-label">Enter Client Information:</label>
                                <textarea id="client-info" class="form-control" rows="10" placeholder="Enter client details in free text format. Example:
Client Name: John Smith
DOB: 01/15/1980
HKID: A123456(7)
Address: 123 Main St, Central, Hong Kong
Phone: +852 9876 5432
Occupation: Engineer
Annual Income: HKD 960,000
..."></textarea>
                            </div>
                            
                            <div class="d-flex justify-content-end">
                                <button id="btn-extract" class="btn btn-primary">
                                    <span id="extract-spinner" class="spinner-border spinner-border-sm d-none me-2" role="status" aria-hidden="true"></span>
                                    Process Information
                                </button>
                            </div>
                        </div>

                        <!-- Step 2: Verify Information -->
                        <div id="step-2" class="form-step">
                            <h3 class="card-title mb-4">Step 2: Verify Extracted Information</h3>
                            
                            <div class="alert alert-info mb-4">
                                <i class="bi bi-info-circle-fill me-2"></i>
                                The AI has extracted the following information. Please verify and edit if necessary.
                            </div>
                            
                            <div id="missing-fields-alert" class="alert alert-warning mb-4 d-none">
                                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                                <strong>Missing Required Fields:</strong>
                                <ul id="missing-fields-list" class="mb-0 mt-2"></ul>
                            </div>
                            
                            <div id="extracted-fields-container" class="mb-4">
                                <!-- Fields will be dynamically generated here -->
                            </div>
                            
                            <!-- Separate Advisor Information Section -->
                            <div id="advisor-info-container" class="mb-4 p-3 bg-light rounded border">
                                <!-- Advisor fields will be dynamically generated here -->
                            </div>
                            
                            <div class="d-flex justify-content-between mt-4">
                                <button id="btn-back-to-input" class="btn btn-outline-secondary">
                                    <i class="bi bi-arrow-left me-2"></i>
                                    Back
                                </button>
                                <button id="btn-generate" class="btn btn-primary">
                                    <span id="generate-spinner" class="spinner-border spinner-border-sm d-none me-2" role="status" aria-hidden="true"></span>
                                    <i class="bi bi-file-earmark-pdf me-2"></i>
                                    Generate Forms
                                </button>
                            </div>
                        </div>

                        <!-- Step 3: Download Forms -->
                        <div id="step-3" class="form-step">
                            <h3 class="card-title mb-4">Step 3: Download Completed Forms</h3>
                            
                            <div class="alert alert-success mb-4">
                                <i class="bi bi-check-circle-fill me-2"></i>
                                The forms have been successfully generated with the provided information.
                            </div>
                            
                            <div class="mb-4">
                                <h5>Generated Forms:</h5>
                                <ul class="list-group" id="generated-forms-list">
                                    <!-- Forms will be listed here -->
                                </ul>
                            </div>
                            
                            <div class="d-flex justify-content-center mb-4">
                                <a id="download-zip" href="#" class="btn btn-primary btn-lg">
                                    <i class="bi bi-download me-2"></i>
                                    Download All Forms (ZIP)
                                </a>
                            </div>
                            
                            <div class="d-flex justify-content-between mt-4 pt-4 border-top">
                                <button id="btn-back-to-edit" class="btn btn-outline-secondary">
                                    <i class="bi bi-arrow-left me-2"></i>
                                    Back to Edit
                                </button>
                                <div>
                                    <button id="btn-new-application" class="btn btn-link text-decoration-none">
                                        <i class="bi bi-plus-circle me-2"></i>
                                        Start New Application
                                    </button>
                                    <button id="btn-save-template" class="btn btn-link text-decoration-none">
                                        <i class="bi bi-save me-2"></i>
                                        Save As Template
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/js/app.js"></script>
    <script src="/js/forms.js"></script>
</body>
</html>

// static/js/app.js
// static/js/app.js

/**
 * Main application logic for the PDF Form Filler
 */
document.addEventListener('DOMContentLoaded', function() {
    // UI Elements
    const step1 = document.getElementById('step-1');
    const step2 = document.getElementById('step-2');
    const step3 = document.getElementById('step-3');
    const progressBar = document.getElementById('progress-bar');
    const btnExtract = document.getElementById('btn-extract');
    const btnBackToInput = document.getElementById('btn-back-to-input');
    const btnGenerate = document.getElementById('btn-generate');
    const btnBackToEdit = document.getElementById('btn-back-to-edit');
    const btnNewApplication = document.getElementById('btn-new-application');
    const btnSaveTemplate = document.getElementById('btn-save-template');
    const extractSpinner = document.getElementById('extract-spinner');
    const generateSpinner = document.getElementById('generate-spinner');
    const clientInfoTextarea = document.getElementById('client-info');
    const extractedFieldsContainer = document.getElementById('extracted-fields-container');
    const advisorInfoContainer = document.getElementById('advisor-info-container');
    const missingFieldsAlert = document.getElementById('missing-fields-alert');
    const missingFieldsList = document.getElementById('missing-fields-list');
    const generatedFormsList = document.getElementById('generated-forms-list');
    const downloadZip = document.getElementById('download-zip');

    // State
    let extractedData = {};
    let downloadUrl = '';
    let verifiedData = {};
    
    // Advisor Information Presets
    const advisorPresets = {
        'Ken Wong': { 
            trLicenseNumber: 'IA5220', 
            trPhoneNumber: '+852 6123 4567' 
        },
        'Wrise TR 1': { 
            trLicenseNumber: 'IA3978', 
            trPhoneNumber: '+852 6123 0010' 
        },
        'Wrise TR 2': { 
            trLicenseNumber: 'IB1572', 
            trPhoneNumber: '+852 6123 6086' 
        },
        'Wrise TR 3': { 
            trLicenseNumber: 'JG1065', 
            trPhoneNumber: '+852 6123 0010' 
        },
        'Wrise TR 4': { 
            trLicenseNumber: 'IA7507', 
            trPhoneNumber: '+852 6123 0100' 
        }
    };

    // Get selected insurer
    function getSelectedInsurer() {
        const insurerRadio = document.querySelector('input[name="insurer"]:checked');
        return insurerRadio ? insurerRadio.value : 'BOCLife';
    }

    // Event listeners
    btnExtract.addEventListener('click', handleExtraction);
    btnBackToInput.addEventListener('click', goToStep1);
    btnGenerate.addEventListener('click', handleFormGeneration);
    btnBackToEdit.addEventListener('click', goToStep2FromStep3);
    btnNewApplication.addEventListener('click', resetForm);
    btnSaveTemplate.addEventListener('click', saveAsTemplate);

    /**
     * Handle the extraction of client data
     */
    async function handleExtraction() {
        const textInput = clientInfoTextarea.value.trim();
        if (!textInput) {
            alert('Please enter client information');
            return;
        }

        // Show spinner
        extractSpinner.classList.remove('d-none');
        btnExtract.disabled = true;

        try {
            // Call the API to extract data
            const response = await fetch('/api/extract', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    text_input: textInput,
                    insurer: getSelectedInsurer()
                })
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.detail || 'Failed to extract data');
            }

            // Parse response
            extractedData = await response.json();
            
            // Populate verification form
            populateVerificationForm(extractedData);
            
            // Populate advisor information section
            populateAdvisorInfoSection(extractedData);

            // Go to step 2
            goToStep2();
        } catch (error) {
            console.error('Extraction error:', error);
            alert(`Error: ${error.message || 'Failed to extract data'}`);
        } finally {
            // Hide spinner
            extractSpinner.classList.add('d-none');
            btnExtract.disabled = false;
        }
    }

    /**
     * Populate the verification form with extracted data
     * The fields are displayed in the order they are returned from the API
     * which matches the order in standardized_fields.json
     */
    function populateVerificationForm(data) {
        // Clear container
        extractedFieldsContainer.innerHTML = '';

        // Group fields by category while preserving the original order
        const fieldsByCategory = {};
        const categoryOrder = [];
        
        // Process each extracted field, but exclude advisor information
        data.fields.forEach(field => {
            // Skip advisor information fields - they will be handled separately
            if (field.field_name === 'trName' || field.field_name === 'trLicenseNumber' || field.field_name === 'trPhoneNumber') {
                return;
            }
            
            // Skip blank slots
            if (field.field_name.startsWith('blankSlot') || field.is_blank_slot === true) {
                return;
            }
            
            if (!fieldsByCategory[field.category]) {
                fieldsByCategory[field.category] = [];
                // Add to category order list the first time we see this category
                categoryOrder.push(field.category);
            }
            fieldsByCategory[field.category].push(field);
        });

        // Create category sections in the order they first appeared in the data
        categoryOrder.forEach(category => {
            const fields = fieldsByCategory[category];
            
            const categoryDiv = document.createElement('div');
            categoryDiv.classList.add('form-category', 'mb-4');
            
            const categoryHeader = document.createElement('h5');
            categoryHeader.classList.add('form-category-header');
            categoryHeader.textContent = category;
            categoryDiv.appendChild(categoryHeader);
            
            const row = document.createElement('div');
            row.classList.add('row', 'g-3');
            
            // Create form controls for each field
            fields.forEach(field => {
                const col = document.createElement('div');
                col.classList.add('col-md-6');
                
                const formGroup = document.createElement('div');
                formGroup.classList.add('mb-3');
                
                const label = document.createElement('label');
                label.setAttribute('for', `field-${field.field_name}`);
                label.classList.add('form-label');
                if (field.required) {
                    label.classList.add('required-field');
                }
                label.textContent = field.display_name;
                
                const input = document.createElement('input');
                input.setAttribute('type', 'text');
                input.setAttribute('id', `field-${field.field_name}`);
                input.setAttribute('name', field.field_name);
                input.setAttribute('value', field.value);
                input.classList.add('form-control');
                
                if (field.missing) {
                    input.classList.add('missing-field');
                }
                
                formGroup.appendChild(label);
                formGroup.appendChild(input);
                col.appendChild(formGroup);
                row.appendChild(col);
            });
            
            categoryDiv.appendChild(row);
            extractedFieldsContainer.appendChild(categoryDiv);
        });

        // Show missing fields alert if needed
        if (data.missing_required && data.missing_required.length > 0) {
            missingFieldsAlert.classList.remove('d-none');
            missingFieldsList.innerHTML = '';
            
            data.missing_required.forEach(field => {
                // Find display name for the field
                const fieldData = data.fields.find(f => f.field_name === field);
                const displayName = fieldData ? fieldData.display_name : formatFieldName(field);
                
                const li = document.createElement('li');
                li.textContent = displayName;
                missingFieldsList.appendChild(li);
            });
        } else {
            missingFieldsAlert.classList.add('d-none');
        }
    }
    
    /**
     * Populate the advisor information section
     */
    function populateAdvisorInfoSection(data) {
        // Clear container
        advisorInfoContainer.innerHTML = '';
        
        // Create category header
        const categoryHeader = document.createElement('h5');
        categoryHeader.classList.add('form-category-header');
        categoryHeader.textContent = 'Advisor Information';
        advisorInfoContainer.appendChild(categoryHeader);
        
        // Create row for form fields
        const row = document.createElement('div');
        row.classList.add('row', 'g-3');
        
        // Find advisor information fields in the data
        const trNameField = data.fields.find(f => f.field_name === 'trName');
        const trLicenseField = data.fields.find(f => f.field_name === 'trLicenseNumber');
        const trPhoneField = data.fields.find(f => f.field_name === 'trPhoneNumber');
        
        // Create TR Name field with dropdown
        const trNameCol = document.createElement('div');
        trNameCol.classList.add('col-md-6');
        
        const trNameGroup = document.createElement('div');
        trNameGroup.classList.add('mb-3');
        
        const trNameLabel = document.createElement('label');
        trNameLabel.setAttribute('for', 'field-trName');
        trNameLabel.classList.add('form-label');
        if (trNameField && trNameField.required) {
            trNameLabel.classList.add('required-field');
        }
        trNameLabel.textContent = trNameField ? trNameField.display_name : 'Technical Representative Name';
        
        const trNameSelect = document.createElement('select');
        trNameSelect.setAttribute('id', 'field-trName');
        trNameSelect.setAttribute('name', 'trName');
        trNameSelect.classList.add('form-select');
        
        // Add default option
        const defaultOption = document.createElement('option');
        defaultOption.value = '';
        defaultOption.textContent = 'Select Technical Representative';
        trNameSelect.appendChild(defaultOption);
        
        // Add options from advisor presets
        for (const advisor in advisorPresets) {
            const option = document.createElement('option');
            option.value = advisor;
            option.textContent = advisor;
            // Set selected if matches the extracted data
            if (trNameField && trNameField.value === advisor) {
                option.selected = true;
            }
            trNameSelect.appendChild(option);
        }
        
        // Add event listener to handle selection change
        trNameSelect.addEventListener('change', function() {
            const selectedAdvisor = this.value;
            const licenseInput = document.getElementById('field-trLicenseNumber');
            const phoneInput = document.getElementById('field-trPhoneNumber');
            
            if (selectedAdvisor && advisorPresets[selectedAdvisor]) {
                // Auto-fill license and phone
                licenseInput.value = advisorPresets[selectedAdvisor].trLicenseNumber;
                phoneInput.value = advisorPresets[selectedAdvisor].trPhoneNumber;
            } else {
                // Clear fields if none selected
                licenseInput.value = '';
                phoneInput.value = '';
            }
        });
        
        trNameGroup.appendChild(trNameLabel);
        trNameGroup.appendChild(trNameSelect);
        trNameCol.appendChild(trNameGroup);
        row.appendChild(trNameCol);
        
        // Create TR License Number field
        const trLicenseCol = document.createElement('div');
        trLicenseCol.classList.add('col-md-6');
        
        const trLicenseGroup = document.createElement('div');
        trLicenseGroup.classList.add('mb-3');
        
        const trLicenseLabel = document.createElement('label');
        trLicenseLabel.setAttribute('for', 'field-trLicenseNumber');
        trLicenseLabel.classList.add('form-label');
        if (trLicenseField && trLicenseField.required) {
            trLicenseLabel.classList.add('required-field');
        }
        trLicenseLabel.textContent = trLicenseField ? trLicenseField.display_name : 'TR License Number';
        
        const trLicenseInput = document.createElement('input');
        trLicenseInput.setAttribute('type', 'text');
        trLicenseInput.setAttribute('id', 'field-trLicenseNumber');
        trLicenseInput.setAttribute('name', 'trLicenseNumber');
        trLicenseInput.classList.add('form-control');
        
        // Set value if available
        if (trLicenseField) {
            trLicenseInput.value = trLicenseField.value;
        }
        
        trLicenseGroup.appendChild(trLicenseLabel);
        trLicenseGroup.appendChild(trLicenseInput);
        trLicenseCol.appendChild(trLicenseGroup);
        row.appendChild(trLicenseCol);
        
        // Create TR Phone Number field
        const trPhoneCol = document.createElement('div');
        trPhoneCol.classList.add('col-md-6');
        
        const trPhoneGroup = document.createElement('div');
        trPhoneGroup.classList.add('mb-3');
        
        const trPhoneLabel = document.createElement('label');
        trPhoneLabel.setAttribute('for', 'field-trPhoneNumber');
        trPhoneLabel.classList.add('form-label');
        if (trPhoneField && trPhoneField.required) {
            trPhoneLabel.classList.add('required-field');
        }
        trPhoneLabel.textContent = trPhoneField ? trPhoneField.display_name : 'TR Phone Number';
        
        const trPhoneInput = document.createElement('input');
        trPhoneInput.setAttribute('type', 'text');
        trPhoneInput.setAttribute('id', 'field-trPhoneNumber');
        trPhoneInput.setAttribute('name', 'trPhoneNumber');
        trPhoneInput.classList.add('form-control');
        
        // Set value if available
        if (trPhoneField) {
            trPhoneInput.value = trPhoneField.value;
        }
        
        trPhoneGroup.appendChild(trPhoneLabel);
        trPhoneGroup.appendChild(trPhoneInput);
        trPhoneCol.appendChild(trPhoneGroup);
        row.appendChild(trPhoneCol);
        
        // Add a blank column for even spacing
        const blankCol = document.createElement('div');
        blankCol.classList.add('col-md-6');
        row.appendChild(blankCol);
        
        // Add row to container
        advisorInfoContainer.appendChild(row);
        
        // Check if we should trigger the auto-fill
        if (trNameField && trNameField.value && advisorPresets[trNameField.value]) {
            // Auto-fill license and phone based on initial name
            if (trLicenseField && !trLicenseField.value) {
                trLicenseInput.value = advisorPresets[trNameField.value].trLicenseNumber;
            }
            if (trPhoneField && !trPhoneField.value) {
                trPhoneInput.value = advisorPresets[trNameField.value].trPhoneNumber;
            }
        }
    }

    /**
     * Handle form generation
     */
    async function handleFormGeneration() {
        // Collect verified data
        verifiedData = {
            fields: {},
            insurer: getSelectedInsurer()
        };

        // Get all input values from the main form - using standardized field names
        const inputs = extractedFieldsContainer.querySelectorAll('input[type="text"]');
        inputs.forEach(input => {
            verifiedData.fields[input.name] = input.value;
        });
        
        // Get advisor information values
        const advisorName = document.getElementById('field-trName');
        const advisorLicense = document.getElementById('field-trLicenseNumber');
        const advisorPhone = document.getElementById('field-trPhoneNumber');
        
        if (advisorName) {
            verifiedData.fields['trName'] = advisorName.value;
        }
        
        if (advisorLicense) {
            verifiedData.fields['trLicenseNumber'] = advisorLicense.value;
        }
        
        if (advisorPhone) {
            verifiedData.fields['trPhoneNumber'] = advisorPhone.value;
        }

        // Show spinner
        generateSpinner.classList.remove('d-none');
        btnGenerate.disabled = true;

        try {
            // Call the API to generate forms
            const response = await fetch('/api/generate', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(verifiedData)
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.detail || 'Failed to generate forms');
            }

            // Parse response
            const data = await response.json();
            
            // Store download URL
            downloadUrl = data.download_url;
            downloadZip.setAttribute('href', downloadUrl);
            
            // Populate forms list
            populateFormsList(data.forms);

            // Go to step 3
            goToStep3();
        } catch (error) {
            console.error('Form generation error:', error);
            alert(`Error: ${error.message || 'Failed to generate forms'}`);
        } finally {
            // Hide spinner
            generateSpinner.classList.add('d-none');
            btnGenerate.disabled = false;
        }
    }

    /**
     * Populate the list of generated forms
     */
    function populateFormsList(forms) {
        generatedFormsList.innerHTML = '';
        
        forms.forEach(form => {
            const filename = form.toLowerCase().replace(/ /g, '_') + '.pdf';
            
            const li = document.createElement('li');
            li.classList.add('list-group-item', 'd-flex', 'justify-content-between', 'align-items-center', 'form-preview-item');
            
            const formDiv = document.createElement('div');
            
            const formName = document.createElement('p');
            formName.classList.add('mb-0', 'fw-medium');
            formName.textContent = form;
            
            const formFilename = document.createElement('p');
            formFilename.classList.add('mb-0', 'text-muted', 'small');
            formFilename.textContent = filename;
            
            formDiv.appendChild(formName);
            formDiv.appendChild(formFilename);
            
            const previewBtn = document.createElement('button');
            previewBtn.classList.add('btn', 'btn-sm', 'btn-outline-primary');
            previewBtn.innerHTML = '<i class="bi bi-eye me-1"></i> Preview';
            previewBtn.addEventListener('click', () => {
                alert(`Preview functionality for "${form}" is not implemented in the prototype.`);
            });
            
            li.appendChild(formDiv);
            li.appendChild(previewBtn);
            
            generatedFormsList.appendChild(li);
        });
    }

    /**
     * Format a field name for display
     */
    function formatFieldName(fieldName) {
        return fieldName
            .split(/(?=[A-Z])/)
            .map(word => word.charAt(0).toUpperCase() + word.slice(1))
            .join(' ');
    }

    /**
     * Navigate to step 1
     */
    function goToStep1() {
        step1.classList.add('active');
        step2.classList.remove('active');
        step3.classList.remove('active');
        progressBar.style.width = '33%';
        progressBar.textContent = 'Step 1 of 3';
        progressBar.setAttribute('aria-valuenow', '33');
    }

    /**
     * Navigate to step 2
     */
    function goToStep2() {
        step1.classList.remove('active');
        step2.classList.add('active');
        step3.classList.remove('active');
        progressBar.style.width = '66%';
        progressBar.textContent = 'Step 2 of 3';
        progressBar.setAttribute('aria-valuenow', '66');
    }

    /**
     * Navigate from step 3 back to step 2
     * Preserves the verified data when returning to edit
     */
    function goToStep2FromStep3() {
        // Keep the same verification form populated
        step3.classList.remove('active');
        step2.classList.add('active');
        progressBar.style.width = '66%';
        progressBar.textContent = 'Step 2 of 3';
        progressBar.setAttribute('aria-valuenow', '66');
    }

    /**
     * Navigate to step 3
     */
    function goToStep3() {
        step1.classList.remove('active');
        step2.classList.remove('active');
        step3.classList.add('active');
        progressBar.style.width = '100%';
        progressBar.textContent = 'Step 3 of 3';
        progressBar.setAttribute('aria-valuenow', '100');
    }

    /**
     * Reset the form for a new application
     */
    function resetForm() {
        // Clear input
        clientInfoTextarea.value = '';
        
        // Reset data
        extractedData = {};
        verifiedData = {};
        downloadUrl = '';
        
        // Go back to step 1
        goToStep1();
    }

    /**
     * Save the current data as a template
     * Note: In a real app, this would save to server/local storage
     */
    function saveAsTemplate() {
        alert('This feature is not implemented in the prototype.');
        // In a real implementation, this would save the current data as a template
    }
});

// static/js/forms.js
// static/js/forms.js

/**
 * Form-specific utilities for the PDF Form Filler
 */
document.addEventListener('DOMContentLoaded', function() {
    // Add event listener for form field changes to highlight missing fields
    document.addEventListener('input', function(event) {
        // Check if the input is a form field
        if (event.target.classList.contains('form-control') || event.target.classList.contains('form-select')) {
            handleFormFieldChange(event.target);
        }
    });
    
    /**
     * Handle form field change to update missing field styling
     */
    function handleFormFieldChange(inputElement) {
        // Check if field has value
        const hasValue = inputElement.value.trim() !== '';
        
        // Check if field is required (has required-field class on label)
        const label = inputElement.previousElementSibling;
        const isRequired = label && label.classList.contains('required-field');
        
        // Update missing field styling
        if (isRequired && !hasValue) {
            // Field is required but empty
            inputElement.classList.add('missing-field');
        } else {
            // Field has value or is not required
            inputElement.classList.remove('missing-field');
        }
    }
    
    /**
     * Pre-fill client information from sample templates
     * This would be expanded in a real implementation
     */
    window.loadTemplate = function(templateName) {
        const clientInfoTextarea = document.getElementById('client-info');
        
        // Sample templates
        const templates = {
            'sample1': `Client Name: John Smith
DOB: 01/15/1980
HKID: A123456(7)
Address: 123 Main St, Central, Hong Kong
Phone: +852 9876 5432
Occupation: Engineer
Annual Income: HKD 960,000
Marital Status: Married
Technical Representative: Jensen`,
            'sample2': `Client: Jane Doe
Date of Birth: 05/22/1985
ID Number: B789012(3)
Address: 456 Park Avenue, Wan Chai, Hong Kong
Contact: +852 8765 4321
Job: Teacher
Income: $720,000 per year
Status: Single
TR Name: Carmen`
        };
        
        // Set the template text
        if (templates[templateName]) {
            clientInfoTextarea.value = templates[templateName];
        }
    };
    
    /**
     * Validate all form fields before submission
     */
    window.validateFormFields = function() {
        // Validate standard field inputs
        const standardInputs = document.querySelectorAll('#extracted-fields-container .form-control');
        let hasErrors = false;
        
        // Check each standard input
        standardInputs.forEach(input => {
            // Check if field has value
            const hasValue = input.value.trim() !== '';
            
            // Check if field is required
            const label = input.previousElementSibling;
            const isRequired = label && label.classList.contains('required-field');
            
            // Update missing field styling
            if (isRequired && !hasValue) {
                input.classList.add('missing-field');
                hasErrors = true;
            } else {
                input.classList.remove('missing-field');
            }
        });
        
        // Validate advisor fields
        const advisorInputs = document.querySelectorAll('#advisor-info-container .form-control, #advisor-info-container .form-select');
        
        // Check each advisor input
        advisorInputs.forEach(input => {
            // Check if field has value
            const hasValue = input.value.trim() !== '';
            
            // Check if field is required
            const label = input.previousElementSibling;
            const isRequired = label && label.classList.contains('required-field');
            
            // Update missing field styling
            if (isRequired && !hasValue) {
                input.classList.add('missing-field');
                hasErrors = true;
            } else {
                input.classList.remove('missing-field');
            }
        });
        
        return !hasErrors;
    };
    
    /**
     * Generate a form preview
     * Note: In a real app, this would show a PDF preview
     */
    window.previewForm = function(formName) {
        alert(`Preview functionality for "${formName}" is not implemented in the prototype.`);
        // In a real implementation, this would show a PDF preview
    };
    
    /**
     * Check if Technical Representative exists in presets
     * @param {string} trName - The name to check
     * @returns {boolean} - True if TR exists in presets
     */
    window.checkTechnicalRepresentative = function(trName) {
        const advisorPresets = {
            'Ken Wong': true,
            'Wrise TR 1': true,
            'Wrise TR 2': true,
            'Wrise TR 3': true,
            'Wrise TR 4': true
        };
        
        return advisorPresets[trName] === true;
    };
});

// .gitignore
# .gitignore

# Environment variables
.env
.env.*

# CloudFormation debug
CloudFormation.yml
ecs-compose.deploy.yml

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
*.egg-info/
.installed.cfg
*.egg

# Virtual Environment
venv/
ENV/

# IDE
.idea/
.vscode/
*.swp
*.swo

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Temporary files
/archive/
/tmp/
temp/
*.tmp

# PDF forms (you might want to include these in a real project)
# templates/**/*.pdf

// .gitlab-ci.yml
image: docker:latest

services:
  - name: docker:dind

stages:
  - deploy

before_script:
  - apk add --no-cache make bash grep aws-cli jq
  - apk add --update curl && rm -rf /var/cache/apk/*
  - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
  - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
  - aws configure set region $AWS_DEFAULT_REGION
  - curl -L "https://github.com/docker/compose-cli/releases/download/v1.0.33/docker-linux-amd64" -o docker
  - chmod +x docker
  - ln -s /usr/local/bin/docker /usr/local/bin/com.docker.cli
  - export PATH=".:$PATH" # add current directory to PATH
  - docker context create ecs 10life-ecs-context --from-env

deploy:
  stage: deploy
  script:
    - export ENV=$(if [ "$CI_COMMIT_REF_NAME" = "dev" ]; then echo "dev"; elif [[ "$CI_COMMIT_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+-?.*$ ]]; then echo "prod"; else echo "local"; fi)
    - make pull-app-config ENV=$ENV
    - make create-ecr-repo-if-not-exist ENV=$ENV
    - make ecs-docker-build ENV=$ENV GIT_COMMIT=$CI_COMMIT_SHORT_SHA
    - unset DOCKER_HOST
    - make ecs-docker-up ENV=$ENV
  rules:
    - if: ($CI_COMMIT_REF_NAME == "dev")
    - if: $CI_COMMIT_TAG =~ /^v\d+.\d+.\d+-?.*$/

// docker-compose.yml
# docker-compose.yml
version: '3'

services:
  pdf-form-filler:
    build: .
    ports:
      - "8002:8002"
    volumes:
      - ./app:/app/app
      - ./static:/app/static
      - ./config:/app/config
      - /tmp/pdf-form-filler:/tmp/pdf-form-filler
    environment:
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_DEPLOYMENT_NAME=${AZURE_OPENAI_DEPLOYMENT_NAME:-gpt-4o-mini}
      - AZURE_OPENAI_API_VERSION=${AZURE_OPENAI_API_VERSION:-2023-12-01-preview}
      - DEBUG=True
      - ENV=development
    restart: unless-stopped

// ecs-compose.dev.yml
version: '3.8'

// ecs-compose.yml
version: "3.8"

x-aws-vpc: ${AWS_VPC}
x-aws-logs_retention: 7
x-aws-loadbalancer: ${AWS_ELB_ARN}

services:
  pdf-form-filler:
    platform: linux/amd64
    build: .
    image: ${DOCKER_REGISTRY}/${COMPOSE_PROJECT_NAME}-${CURRENT_ENV}:${TAG:-latest}
    ports:
      - target: 8002
        x-aws-protocol: http
    environment:
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_DEPLOYMENT_NAME=${AZURE_OPENAI_DEPLOYMENT_NAME:-gpt-4o-mini}
      - AZURE_OPENAI_API_VERSION=${AZURE_OPENAI_API_VERSION:-2023-12-01-preview}
      - DEBUG=True
      - ENV=development
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2Gb

x-aws-cloudformation:
  Resources:
    Pdfformfiller8002Listener:

    HTTPS443ListenerRule1:
      Properties:
        Priority: __HTTPS_UNUSED_PRIORITY_PUBLIC__
        Actions:
          - Type: forward
            TargetGroupArn:
              Ref: Pdfformfiller8002TargetGroup
        Conditions:
          - Field: "host-header"
            HostHeaderConfig:
              Values:
                - ${AWS_PUBLIC_HOST_NAME}
        ListenerArn: ${AWS_HTTPS_443_LISTENER_ARN}
      Type: AWS::ElasticLoadBalancingV2::ListenerRule

    Pdfformfiller8002TargetGroup:
      Properties:
        Port: 8002
        Protocol: HTTP
        Tags:
          - Key: com.docker.compose.project
            Value: ${COMPOSE_PROJECT_NAME}-${CURRENT_ENV}
        TargetType: ip
        VpcId: ${AWS_VPC}
        HealthCheckPath: "/"
        HealthCheckIntervalSeconds: 30
        HealthCheckTimeoutSeconds: 15
        HealthyThresholdCount: 5
        UnhealthyThresholdCount: 2
      Type: AWS::ElasticLoadBalancingV2::TargetGroup

    PdfformfillerService:
      DependsOn:
        - HTTPS443ListenerRule1
      Properties:
        DesiredCount: 1
        HealthCheckGracePeriodSeconds: 600
        NetworkConfiguration:
          AwsvpcConfiguration:
            AssignPublicIp: DISABLED
            SecurityGroups:
              - Ref: DefaultNetwork
            Subnets:
              - ${AWS_PRIVATE_SUBNET_1}
              - ${AWS_PRIVATE_SUBNET_2}

    Route53StrapiRecordSet:
      Properties:
        AliasTarget:
          DNSName:
            Fn::Join:
              - ""
              - - "dualstack."
                - ${AWS_ELB_DNS}
          EvaluateTargetHealth: false
          HostedZoneId: ${AWS_ELB_ROUTE53_HOSTED_ZONE_ID}
        HostedZoneId: ${AWS_ROUTE53_HOSTED_ZONE_ID}
        Name: ${AWS_PUBLIC_HOST_NAME}
        Type: A
      Type: AWS::Route53::RecordSet

// Makefile
APP_IDENTIFIER := tenlife-financial-pdf-form-filler

DOCKER_COMPOSE_BASE := docker-compose.yml
DOCKER_COMPOSE_ENV_FILE := ./.env.$(ENV)
DOCKER_COMPOSE := docker compose -f $(DOCKER_COMPOSE_BASE) --env-file $(DOCKER_COMPOSE_ENV_FILE)

fetch_container_name = $(shell docker ps --filter "name=$(SERVICE)" --format "{{.Names}}" | head -n 1)
GIT_COMMIT ?= $(shell git rev-parse --short HEAD)

define EVAL_USE_ENV
ifneq ($$(filter $(1), prod),)
	USE_ENV = prod
else ifneq ($$(filter $(1), dev),)
	USE_ENV = dev
endif
endef

validate-ENV-variable:
ifndef ENV
	$(error ENV variable must be set)
endif

validate-REMOTE-ENV-variable:
ifndef REMOTE-ENV
	$(error REMOTE-ENV variable must be set)
endif

validate-SERVICE-variable:
ifndef SERVICE
	$(error SERVICE variable must be set)
endif

pull-app-config: validate-ENV-variable
	$(eval CONFIG_TOKEN := $(shell aws appconfigdata start-configuration-session \
		--application-identifier $(APP_IDENTIFIER) \
		--environment-identifier $(ENV) \
		--configuration-profile-identifier $(ENV) \
		| grep -oP '(?<="InitialConfigurationToken": ")[^"]*'))
	@echo "Getting latest configuration for environment $(ENV)..."
	@aws appconfigdata get-latest-configuration \
		--configuration-token $(CONFIG_TOKEN) \
		./.env.$(ENV)
	@echo "Configuration saved to ./.env.$(ENV)"

push-app-config: validate-ENV-variable
	@echo "Fetching application ID..."
	$(eval APPLICATION_ID := $(shell aws appconfig list-applications | jq -r --arg app_identifier "$(APP_IDENTIFIER)" '.Items[] | select(.Name == $$app_identifier) | .Id'))
	@echo "Fetching configuration profile ID..."
	$(eval CONFIG_PROFILE_ID := $(shell aws appconfig list-configuration-profiles --application-id $(APPLICATION_ID) | jq -r --arg env "$(ENV)" '.Items[] | select(.Name == $$env) | .Id'))
	@echo "Encoding local file content as base64 string..."
	$(eval BASE64_CONTENT := $(shell base64 -w 0 ./.env.$(ENV)))
	@echo "Fetching current hosted configuration version number..."
	$(eval CURRENT_VERSION_NUMBER := $(shell aws appconfig list-hosted-configuration-versions --application-id $(APPLICATION_ID) --configuration-profile-id $(CONFIG_PROFILE_ID) | jq '.Items | max_by(.VersionNumber) | .VersionNumber'))
	@echo "Fetching and comparing the latest configuration version..."
	$(eval TEMP_FILE := $(shell mktemp ./get-configuration-output-XXXXXX))
	$(eval CONFIG_TOKEN := $(shell aws appconfigdata start-configuration-session --application-identifier $(APP_IDENTIFIER) --environment-identifier $(ENV) --configuration-profile-identifier $(ENV) | grep -oP '(?<="InitialConfigurationToken": ")[^"]*'))
	$(eval CURRENT_HOSTED_CONFIG_DATA := $(shell aws appconfigdata get-latest-configuration --configuration-token $(CONFIG_TOKEN) $(TEMP_FILE)))
#	$(eval CURRENT_HOSTED_CONFIG_DATA := $(shell aws appconfig get-hosted-configuration-version --application-id $(APPLICATION_ID) --configuration-profile-id $(CONFIG_PROFILE_ID) --version-number $(CURRENT_VERSION_NUMBER) $(TEMP_FILE)))
	$(eval LASTEST_BASE64_CONTENT := $(shell base64 -w 0 $(TEMP_FILE)))
	@if [ "$(BASE64_CONTENT)" = "$(LASTEST_BASE64_CONTENT)" ]; then \
		echo "Configuration is up-to-date, no further action needed."; \
	else \
		echo "Creating a new hosted configuration version..." \
		$(eval TEMP_FILE2 := $(shell mktemp ./create-configuration-output-XXXXXX)) >/dev/null 2>&1; \
		$(eval LATEST_VERSION_NUMBER := $(shell aws appconfig create-hosted-configuration-version --application-id $(APPLICATION_ID) --configuration-profile-id $(CONFIG_PROFILE_ID) --content $(BASE64_CONTENT) --content-type "text/plain" $(TEMP_FILE2) | jq -r '.VersionNumber')) >/dev/null 2>&1; \
		echo "Fetching environment ID..."; \
		$(eval ENVIRONMENT_ID := $(shell aws appconfig list-environments --application-id $(APPLICATION_ID) | jq -r --arg env "$(ENV)" '.Items[] | select(.Name == $$env) | .Id')) >/dev/null 2>&1; \
		echo "Fetching deployment strategy ID..."; \
		$(eval DEPLOYMENT_STRATEGY_ID := $(shell aws appconfig list-deployment-strategies | jq -r '.Items[0].Id')) >/dev/null 2>&1; \
		echo "Starting deployment..."; \
		DEPLOYMENT_OUTPUT=$$(aws appconfig start-deployment --application-id $(APPLICATION_ID) --environment-id $(ENVIRONMENT_ID) --deployment-strategy-id $(DEPLOYMENT_STRATEGY_ID) --configuration-profile-id $(CONFIG_PROFILE_ID) --configuration-version $(LATEST_VERSION_NUMBER)); \
		DEPLOYMENT_STATE=$$(echo $$DEPLOYMENT_OUTPUT | jq -r '.State'); \
		if [ "$$DEPLOYMENT_STATE" == "DEPLOYING" ]; then \
			echo "Deployment started successfully!"; \
		else \
			echo "Deployment failed."; \
		fi; \
	fi
	@rm $(TEMP_FILE)
	@rm $(TEMP_FILE2)

switch-to-local-docker-context:
	docker context use default

#10life-ecs-context is just a named context in your local
switch-to-aws-ecs-docker-context:
	docker context use 10life-ecs-context

ecr-login:
	aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 978397510092.dkr.ecr.ap-southeast-1.amazonaws.com

local-docker-up: validate-ENV-variable switch-to-local-docker-context
	$(DOCKER_COMPOSE) up -d

local-docker-watch: validate-ENV-variable switch-to-local-docker-context
	$(DOCKER_COMPOSE) watch

local-docker-restart:
	$(MAKE) local-docker-down
	$(MAKE) local-docker-up

local-docker-build-restart: validate-ENV-variable local-docker-down
	$(DOCKER_COMPOSE) build
	$(MAKE) local-docker-up

local-docker-build-restart-service: validate-ENV-variable validate-SERVICE-variable switch-to-local-docker-context
	@container_name=$$(docker-compose ps -q "$(SERVICE)" | xargs docker inspect --format '{{.Name}}' | sed 's/^\///'); \
	echo "Container name for service '$(SERVICE)': $$container_name"; \
	$(DOCKER_COMPOSE) up -d --no-deps --build $(SERVICE)

local-docker-down: validate-ENV-variable switch-to-local-docker-context
	$(DOCKER_COMPOSE) down

local-docker-down-volume: validate-ENV-variable switch-to-local-docker-context
	$(DOCKER_COMPOSE) down -v

local-docker-down-everything: validate-ENV-variable switch-to-local-docker-context
	$(DOCKER_COMPOSE) down -v --remove-orphans --rmi all

prepare-review-config: validate-ENV-variable
	if [ "$(ENV)" = "review" ]; then \
		sed -i "s~__SUBDOMAIN_PREFIX__~$(REVIEW_APP_SLUG)~" ./.env.review ; \
	fi ; \

create-ecr-repo-if-not-exist: validate-ENV-variable
	@sed -i 's/\r$$//' ./.env.$(ENV) ; \
	COMPOSE_PROJECT_NAME=$$(grep COMPOSE_PROJECT_NAME ./.env.$(ENV) | cut -d '=' -f 2-) ; \
	SUFFIX=$(ENV) ; \
	if [ "$(ENV)" = "review" ]; then \
		SUFFIX=$(REVIEW_APP_SLUG) ; \
	fi ; \
	create_and_set_policy() { \
		REPO_NAME=$$COMPOSE_PROJECT_NAME-$$SUFFIX ; \
		if aws ecr describe-repositories --repository-names $$REPO_NAME ; then \
			echo "Repository $$REPO_NAME already exists" ; \
		else \
			aws ecr create-repository --repository-name $$REPO_NAME ; \
			aws ecr put-lifecycle-policy --repository-name $$REPO_NAME --lifecycle-policy-text "{\"rules\":[{\"rulePriority\":1,\"description\":\"Keep total images count within 20\",\"selection\":{\"tagStatus\":\"any\",\"countType\":\"imageCountMoreThan\",\"countNumber\":20},\"action\":{\"type\":\"expire\"}}]}"; \
		fi ; \
	} ; \
	create_and_set_policy;

delete-ecr-repo: validate-ENV-variable
	@sed -i 's/\r$$//' ./.env.$(ENV) ; \
	COMPOSE_PROJECT_NAME=$$(grep COMPOSE_PROJECT_NAME ./.env.$(ENV) | cut -d '=' -f 2-) ; \
	SUFFIX=$(ENV) ; \
	if [ "$(ENV)" = "review" ]; then \
		SUFFIX=$(REVIEW_APP_SLUG) ; \
	fi ; \
	aws ecr delete-repository --repository-name $$COMPOSE_PROJECT_NAME-$$SUFFIX --force;

set-app-versions:
	$(eval BACKEND_CURRENT_VERSION=$(shell jq -r '.version' ./backend/package.json))
	$(eval FRONTEND_CURRENT_VERSION=$(shell jq -r '.version' ./frontend/package.json))
	npm --prefix ./backend --no-git-tag-version version $(BACKEND_CURRENT_VERSION)-$(GIT_COMMIT)
	npm --prefix ./frontend --no-git-tag-version version $(FRONTEND_CURRENT_VERSION)-$(GIT_COMMIT)

process-ecs-config: validate-ENV-variable
	@sed -i 's/\r$$//' ./.env.$(ENV) ; \
	AWS_HTTPS_443_LISTENER_ARN=$$(grep AWS_HTTPS_443_LISTENER_ARN ./.env.$(ENV) | cut -d '=' -f 2-) ; \
	AWS_PUBLIC_HOST_NAME=$$(grep AWS_PUBLIC_HOST_NAME ./.env.$(ENV) | cut -d '=' -f 2-) ; \
	export AWS_HTTPS_443_LISTENER_ARN AWS_PUBLIC_HOST_NAME ; \
	chmod +x ./scripts/init-listener-priority.sh ; \
	HTTPS_UNUSED_PRIORITY_PUBLIC=$$(./scripts/init-listener-priority.sh $${AWS_HTTPS_443_LISTENER_ARN} $${AWS_PUBLIC_HOST_NAME}) ; \
	cp ecs-compose.yml ecs-compose.deploy.yml ; \
	sed -i "s~__HTTPS_UNUSED_PRIORITY_PUBLIC__~$${HTTPS_UNUSED_PRIORITY_PUBLIC}~" ecs-compose.deploy.yml

remove-listener: validate-ENV-variable
	@chmod +x ./scripts/remove-listener.sh ; \
	AWS_ELB_ARN=$$(grep AWS_ELB_ARN ./.env.$(ENV) | cut -d '=' -f 2-) ; \
	./scripts/remove-listener.sh $$AWS_ELB_ARN 3000 ; \
	./scripts/remove-listener.sh $$AWS_ELB_ARN 1337

ecs-docker-build: validate-ENV-variable switch-to-local-docker-context
	$(MAKE) ecr-login
	$(eval $(call EVAL_USE_ENV,$(ENV)))
	$(MAKE) process-ecs-config
	docker compose -f ecs-compose.deploy.yml $(if $(USE_ENV),-f ecs-compose.$(USE_ENV).yml,) --env-file ./.env.$(ENV) build --pull
	docker compose -f ecs-compose.deploy.yml $(if $(USE_ENV),-f ecs-compose.$(USE_ENV).yml,) --env-file ./.env.$(ENV) push
	TAG=commit-$(GIT_COMMIT) docker compose -f ecs-compose.deploy.yml $(if $(USE_ENV),-f ecs-compose.$(USE_ENV).yml,) --env-file ./.env.$(ENV) build
	TAG=commit-$(GIT_COMMIT) docker compose -f ecs-compose.deploy.yml $(if $(USE_ENV),-f ecs-compose.$(USE_ENV).yml,) --env-file ./.env.$(ENV) push

ecs-docker-export-cloudformation: 
	$(MAKE) validate-ENV-variable
	$(MAKE) switch-to-aws-ecs-docker-context
	$(MAKE) ecr-login
	$(eval $(call EVAL_USE_ENV,$(ENV)))
	docker compose -f ecs-compose.deploy.yml $(if $(USE_ENV),-f ecs-compose.$(USE_ENV).yml,) --env-file ./.env.$(ENV) convert > CloudFormation.yml

ecs-docker-lint-cloudformation:
	$(MAKE) ecs-docker-export-cloudformation
	cfn-lint -t CloudFormation.yml

ecs-docker-up:
	$(MAKE) validate-ENV-variable
	$(MAKE) switch-to-aws-ecs-docker-context
	$(MAKE) ecr-login
	$(eval $(call EVAL_USE_ENV,$(ENV)))
	docker compose -f ecs-compose.deploy.yml $(if $(USE_ENV),-f ecs-compose.$(USE_ENV).yml,) --env-file ./.env.$(ENV) up

ecs-docker-down:
	$(MAKE) validate-ENV-variable
	$(MAKE) switch-to-aws-ecs-docker-context
	$(eval $(call EVAL_USE_ENV,$(ENV)))
	$(MAKE) process-ecs-config
	docker compose -f ecs-compose.deploy.yml $(if $(USE_ENV),-f ecs-compose.$(USE_ENV).yml,) --env-file ./.env.$(ENV) down

ecs-docker-deploy:
	$(MAKE) ecs-docker-build
	$(MAKE) ecs-docker-up

// read_pdf_form.py
#!/usr/bin/env python
"""
PDF Form Field Reader and Mapping Validator.
Extracts fields from PDF forms and updates configuration files.
"""
import os
import sys
import json
import argparse
import logging
from typing import Dict, List, Any, Set, Tuple
import PyPDF2

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def extract_form_fields(pdf_path: str) -> Dict[str, Dict[str, Any]]:
    """
    Extract form fields from a PDF file with page numbers.
    
    Args:
        pdf_path: Path to the PDF file
        
    Returns:
        Dict: Dictionary of form fields with metadata including page numbers
    """
    logger.info(f"Extracting form fields from: {pdf_path}")
    
    fields = {}
    
    try:
        # Open the PDF file
        with open(pdf_path, 'rb') as file:
            reader = PyPDF2.PdfReader(file)
            
            # Check if the PDF has form fields
            has_acroform = False
            if reader.trailer and '/Root' in reader.trailer:
                root = reader.trailer['/Root']
                if isinstance(root, PyPDF2.generic.IndirectObject):
                    root = root.get_object()
                has_acroform = '/AcroForm' in root
            
            if not has_acroform:
                logger.warning(f"PDF does not have AcroForm. This may not be a fillable PDF: {pdf_path}")
            
            # Extract all form fields
            raw_fields = reader.get_fields()
            
            if not raw_fields:
                logger.warning(f"No form fields found in PDF: {pdf_path}")
                return {}
            
            logger.info(f"Found {len(raw_fields)} form fields")
            
            # Find field locations (page numbers)
            field_page_map = {}
            
            # Scan each page for annotations (which include form fields)
            for page_idx, page in enumerate(reader.pages):
                if page.get("/Annots"):
                    annots = page["/Annots"]
                    for annot in annots:
                        annot_obj = annot.get_object()
                        if annot_obj.get("/Subtype") == "/Widget" and annot_obj.get("/T"):
                            field_name = annot_obj["/T"]
                            # Store the page this field was found on
                            field_page_map[field_name] = page_idx
            
            # Process each field
            for field_name, field_obj in raw_fields.items():
                # Skip any parent fields that don't directly hold values
                if isinstance(field_obj, dict) and '/Kids' in field_obj:
                    continue
                
                # Clean up field name (remove any internal structure, take the last part)
                clean_name = field_name.split('.')[-1]
                
                # Get field type if possible
                field_type = "unknown"
                if isinstance(field_obj, dict):
                    if '/FT' in field_obj:
                        field_type_code = field_obj['/FT']
                        if field_type_code == '/Tx':
                            field_type = "text"
                        elif field_type_code == '/Btn':
                            field_type = "button"  # checkbox or radio button
                        elif field_type_code == '/Ch':
                            field_type = "choice"  # dropdown or list
                        else:
                            field_type = str(field_type_code)
                
                # Get page number (default to 0 if not found)
                page_number = field_page_map.get(field_name, 0)
                
                # Add to fields dictionary
                fields[clean_name] = {
                    "required": True,  # Default to true, can be adjusted later
                    "display_name": format_display_name(clean_name),
                    "page_number": page_number,
                    "field_type": field_type
                }
    
    except Exception as e:
        logger.error(f"Error extracting fields from PDF: {e}")
        return {}
    
    return fields

def format_display_name(field_name: str) -> str:
    """Format a field name for display."""
    # Split by underscore, camelCase, or other common separators
    words = []
    current_word = ""
    
    for char in field_name:
        if char.isupper() and current_word and current_word[-1].islower():
            words.append(current_word)
            current_word = char
        elif char == '_' or char == '-':
            if current_word:
                words.append(current_word)
                current_word = ""
        else:
            current_word += char
    
    if current_word:
        words.append(current_word)
    
    # Capitalize each word
    display_name = ' '.join(word.capitalize() for word in words)
    
    return display_name

def update_form_configuration(
    form_name: str, 
    fields: Dict[str, Dict[str, Any]], 
    config_dir: str
) -> str:
    """
    Update form configuration file with extracted fields.
    
    Args:
        form_name: Name of the form (e.g., broker_client_agreement)
        fields: Dictionary of form fields
        config_dir: Path to configuration directory
        
    Returns:
        str: Path to the updated form configuration file
    """
    # Determine which form file to update
    if form_name.startswith('broker_'):
        forms_file = os.path.join(config_dir, 'forms', 'broker_forms.json')
    elif form_name.startswith('boclife_'):
        forms_file = os.path.join(config_dir, 'forms', 'boclife_forms.json')
    elif form_name.startswith('chubb_'):
        forms_file = os.path.join(config_dir, 'forms', 'chubb_forms.json')
    else:
        forms_file = os.path.join(config_dir, 'forms', f'{form_name}.json')
    
    # Load existing form configuration if it exists
    existing_forms = {}
    if os.path.exists(forms_file):
        try:
            with open(forms_file, 'r', encoding='utf-8') as f:
                existing_forms = json.load(f)
        except Exception as e:
            logger.error(f"Error loading existing form configuration: {e}")
    
    # Update forms configuration
    existing_forms[form_name] = fields
    
    # Create directory if it doesn't exist
    os.makedirs(os.path.dirname(forms_file), exist_ok=True)
    
    # Save updated form configuration
    try:
        with open(forms_file, 'w', encoding='utf-8') as f:
            json.dump(existing_forms, f, indent=2)
        logger.info(f"Updated form configuration: {forms_file}")
    except Exception as e:
        logger.error(f"Error saving form configuration: {e}")
    
    return forms_file

def check_mapping_discrepancies(
    form_name: str, 
    form_fields: Dict[str, Dict[str, Any]], 
    config_dir: str
) -> Tuple[List[Tuple[str, int]], List[str], List[Tuple[str, str, int]]]:
    """
    Check for discrepancies between form fields and field mappings.
    
    Args:
        form_name: Name of the form.
        form_fields: Dictionary of form fields extracted from the PDF.
        config_dir: Path to configuration directory.
        
    Returns:
        Tuple containing:
          - unmapped_fields: List of tuples (field_name, page_number) present in the PDF that are not referenced by any mapping.
          - unused_mappings: List of mappings that reference fields not present in the PDF.
          - correct_mappings: List of tuples (standardized_field, mapped_field, page_number) that are correctly mapped.
    """
    # Load field mappings
    mappings_file = os.path.join(config_dir, 'mappings', 'field_mappings.json')
    if not os.path.exists(mappings_file):
        logger.error(f"Field mappings file not found: {mappings_file}")
        return [], [], []
    
    try:
        with open(mappings_file, 'r', encoding='utf-8') as f:
            field_mappings = json.load(f)
    except Exception as e:
        logger.error(f"Error loading field mappings: {e}")
        return [], [], []
    
    # Get expected fields from the PDF (keys of form_fields)
    expected_fields = set(form_fields.keys())
    
    mapped_fields_set = set()
    correct_mappings = []
    unused_mappings = []
    
    # Iterate over standardized field mappings for the given form
    for std_field, mapping in field_mappings.items():
        if form_name in mapping:
            mapped_value = mapping[form_name]
            # Normalize to a list if necessary
            mapping_list = mapped_value if isinstance(mapped_value, list) else [mapped_value]
            for mapped_field in mapping_list:
                mapped_fields_set.add(mapped_field)
                if mapped_field in expected_fields:
                    page_number = form_fields[mapped_field].get("page_number", 0)
                    correct_mappings.append((std_field, mapped_field, page_number))
                else:
                    unused_mappings.append(f"{std_field} -> {mapped_field}")
    
    # Identify unmapped fields: expected fields that are not referenced in any mapping
    unmapped_fields = [(field, form_fields[field].get("page_number", 0)) for field in expected_fields - mapped_fields_set]
    
    return unmapped_fields, unused_mappings, correct_mappings

def main():
    parser = argparse.ArgumentParser(description='PDF Form Field Reader and Mapping Validator')
    parser.add_argument('pdf_path', help='Path to the PDF file')
    parser.add_argument('--form-name', required=True, help='Name of the form (e.g., broker_client_agreement)')
    parser.add_argument('--config-dir', default='config', help='Path to the configuration directory')
    args = parser.parse_args()
    
    # Check if PDF file exists
    if not os.path.exists(args.pdf_path):
        logger.error(f"PDF file not found: {args.pdf_path}")
        sys.exit(1)
    
    # Extract form fields
    logger.info(f"Reading PDF form: {args.pdf_path}")
    fields = extract_form_fields(args.pdf_path)
    
    if not fields:
        logger.error("No fields found or error extracting fields. Check the PDF and try again.")
        sys.exit(1)
    
    logger.info(f"Found {len(fields)} fields in the PDF")
    
    # Update form configuration
    forms_file = update_form_configuration(args.form_name, fields, args.config_dir)
    
    # Check for mapping discrepancies
    unmapped_fields, unused_mappings, correct_mappings = check_mapping_discrepancies(args.form_name, fields, args.config_dir)
    
    # Sort the fields by field name
    unmapped_fields.sort(key=lambda x: x[0])
    unused_mappings.sort()
    correct_mappings.sort(key=lambda x: x[1])  # Sort by mapped_field name
    
    # Report results
    if unmapped_fields:
        logger.warning(f"Found {len(unmapped_fields)} fields that are not mapped in field_mappings.json:")
        for field, page_number in unmapped_fields:
            logger.warning(f"  - {field} (page {page_number + 1})")
    
    if unused_mappings:
        logger.warning(f"Found {len(unused_mappings)} mappings that reference non-existent fields:")
        for mapping in unused_mappings:
            logger.warning(f"  - {mapping}")
    
    if correct_mappings:
        logger.info(f"Found {len(correct_mappings)} correctly mapped fields:")
        for std_field, form_field, page_number in correct_mappings:
            logger.info(f"  - {std_field} -> {form_field} (page {page_number + 1})")
    
    if not unmapped_fields and not unused_mappings:
        logger.info("All fields are properly mapped!")
    
    logger.info("Success! Updated configuration file:")
    logger.info(f"  - Forms file: {forms_file}")
    
    # Show reload instructions
    logger.info("\nTo apply changes, reload the mappings:")
    logger.info("  curl -X POST http://localhost:8002/api/admin/reload-mappings")

if __name__ == "__main__":
    main()

// README.md
# AI-Assisted PDF Form Filler

A lightweight web application for insurance brokers to automate the process of filling out multiple PDF forms using AI-assisted data extraction.

## Features

- Extract client information from free text input using Azure OpenAI (GPT-4o mini)
- Automatically populate multiple insurance forms
- Support for both broker forms (client agreement, FNA) and insurance company forms (application, FNA, payment)
- Field verification and correction interface
- Package completed forms into a downloadable ZIP file

## Project Structure

```
pdf-form-filler/
│
├── app/                        # Backend application
│   ├── main.py                 # Application entry point
│   ├── config.py               # Configuration settings
│   ├── api/                    # API endpoints
│   ├── services/               # Business logic
│   └── core/                   # Core functionality
│
├── config/                     # Configuration files
│   ├── forms/                  # Form field definitions
│   │   ├── broker_forms.json   # Broker form fields
│   │   ├── boclife_forms.json  # BOCLife form fields
│   │   └── chubb_forms.json    # Chubb form fields
│   ├── mappings/               # Field mappings
│   │   └── field_mappings.json # Maps standardized fields to form fields
│   └── standardized_fields.json # Standardized field definitions
│
├── static/                     # Frontend files
│   ├── index.html              # Main application page
│   ├── css/                    # CSS styles
│   └── js/                     # JavaScript files
│
├── templates/                  # PDF form templates
│   ├── broker/                 # Broker forms
│   │   ├── 10Life_client_agreement.pdf
│   │   └── 10Life_fna.pdf
│   ├── boclife/                # BOCLife forms
│   │   ├── BOCLife_application.pdf
│   │   ├── BOCLife_fna.pdf
│   │   └── BOCLife_payment.pdf
│   └── chubb/                  # Chubb forms
│       ├── Chubb_application.pdf
│       ├── Chubb_fna.pdf
│       └── Chubb_payment.pdf
│
├── .env                        # Environment variables
├── .gitignore                  # Git ignore file
├── Dockerfile                  # Docker configuration
├── docker-compose.yml          # Docker Compose configuration
├── requirements.txt            # Python dependencies
└── README.md                   # Project documentation
```

## Quick Start

### Prerequisites

- Docker and Docker Compose
- Azure OpenAI API Key (for GPT-4o mini model)

### Setup

1. Clone this repository
2. Create a `.env` file based on `.env.example`:
   ```
   cp .env.example .env
   ```
3. Edit the `.env` file with your Azure OpenAI API details:
   ```
   AZURE_OPENAI_API_KEY=your_api_key_here
   AZURE_OPENAI_ENDPOINT=https://your-resource-name.openai.azure.com
   ```
4. Start the application with Docker Compose:
   ```
   docker-compose up -d
   ```
5. Access the application at `http://localhost:8002`

## Configuration

### Field Mappings

The system's field mappings are stored in JSON configuration files in the `config` directory:

1. **Standardized Fields** (`config/standardized_fields.json`):
   - Defines the fields that appear in the user interface
   - Specifies display names, categories, and whether fields are required

2. **Form Fields** (`config/forms/*.json`):
   - Define the fields for each PDF form
   - Grouped by company (broker, BOCLife, Chubb)

3. **Field Mappings** (`config/mappings/field_mappings.json`):
   - Maps standardized fields to form-specific fields
   - Ensures data is correctly populated in PDF forms

To update mappings without restarting the application, use the reload endpoint:
```
curl -X POST http://localhost:8002/api/admin/reload-mappings
```

### Adding New Insurance Companies

To add a new insurance company:

1. Create PDF templates in a new directory under `templates/`
2. Create a new form fields JSON file in `config/forms/`
3. Update `config/mappings/field_mappings.json` with the new mappings
4. Reload the mappings using the reload endpoint

## Development

### Local Development Setup

1. Create and activate a virtual environment:
   ```
   python -m venv venv
   source venv/bin/activate  # On Windows: venv\Scripts\activate
   ```
2. Install dependencies:
   ```
   pip install -r requirements.txt
   ```
3. Create your `.env` file as described in the setup section
4. Run the FastAPI server:
   ```
   uvicorn app.main:app --reload
   ```

## Implementation Details

### PDF Form Filling

The system uses PyPDF2 to fill PDF form fields:
1. Extracts field names from the PDFs
2. Maps standardized data to form-specific field names
3. Populates the PDF form fields with mapped data

If a PDF doesn't have fillable form fields, the system provides a copy of the template.

### LLM Integration

Azure OpenAI (GPT-4o mini) is used to extract structured data from free text input:
1. User provides free text description of client information
2. System sends text to Azure OpenAI API
3. LLM extracts structured data (name, address, etc.)
4. System maps extracted data to standardized fields
5. User verifies and corrects extracted data

// rebuild_docker.sh
#!/bin/bash
# Docker management script for PDF Form Filler
# This script will stop the old container, remove it, delete the image, and rebuild

# Set colors for better output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Function to print section headers
print_header() {
    echo -e "${YELLOW}==== $1 ====${NC}"
}

# Function to check if docker is running
check_docker() {
    if ! docker info > /dev/null 2>&1; then
        echo -e "${RED}Error: Docker is not running or you don't have permission to use it.${NC}"
        exit 1
    fi
}

# Get the service name from docker-compose
get_service_name() {
    SERVICE_NAME=$(grep -A1 "services:" docker-compose.yml | tail -n1 | awk '{print $1}' | tr -d ':')
    if [ -z "$SERVICE_NAME" ]; then
        echo -e "${RED}Error: Couldn't detect service name from docker-compose.yml${NC}"
        echo -e "${YELLOW}Using default service name: pdf-form-filler${NC}"
        SERVICE_NAME="pdf-form-filler"
    fi
    echo -e "${GREEN}Detected service name: ${SERVICE_NAME}${NC}"
}

# Stop and remove the container
stop_container() {
    print_header "Stopping running container"
    
    # Check if the container is running
    if docker ps | grep -q $SERVICE_NAME; then
        echo "Stopping container..."
        docker-compose down
        echo -e "${GREEN}Container stopped successfully.${NC}"
    else
        echo -e "${YELLOW}No running container found.${NC}"
    fi
    
    # Check for any remaining containers with the image
    CONTAINER_ID=$(docker ps -a | grep $SERVICE_NAME | awk '{print $1}')
    if [ ! -z "$CONTAINER_ID" ]; then
        echo "Removing container $CONTAINER_ID..."
        docker rm -f $CONTAINER_ID
        echo -e "${GREEN}Container removed successfully.${NC}"
    fi
}

# Remove the Docker image
remove_image() {
    print_header "Removing Docker image"
    
    # Get the image ID
    IMAGE_ID=$(docker images | grep $SERVICE_NAME | awk '{print $3}')
    
    if [ ! -z "$IMAGE_ID" ]; then
        echo "Removing image $IMAGE_ID..."
        docker rmi -f $IMAGE_ID
        echo -e "${GREEN}Image removed successfully.${NC}"
    else
        echo -e "${YELLOW}No image found for ${SERVICE_NAME}.${NC}"
    fi
}

# Rebuild the Docker image and start container
rebuild_and_start() {
    print_header "Rebuilding and starting container"
    
    echo "Building new Docker image..."
    docker-compose build --no-cache
    
    echo "Starting container..."
    docker-compose up -d
    
    echo -e "${GREEN}Container rebuilt and started successfully.${NC}"
}

# Show logs of the running container
show_logs() {
    print_header "Container logs"
    
    echo "Showing logs of the new container (press Ctrl+C to exit)..."
    docker-compose logs -f
}

# Main script execution
check_docker
get_service_name
stop_container
remove_image
rebuild_and_start

# Ask user if they want to see logs
echo ""
read -p "Do you want to see the container logs? (y/n): " SHOW_LOGS_ANSWER
if [[ "$SHOW_LOGS_ANSWER" =~ ^[Yy] ]]; then
    show_logs
else
    echo -e "${GREEN}Container is now running in the background.${NC}"
    echo "You can check logs at any time with: docker-compose logs -f"
fi

echo ""
echo -e "${GREEN}Operation completed successfully!${NC}"

